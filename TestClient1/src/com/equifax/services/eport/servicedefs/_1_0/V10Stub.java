/**
 * V10Stub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.3  Built on : Jun 27, 2015 (11:17:49 BST)
 */
package com.equifax.services.eport.servicedefs._1_0;


/*
 *  V10Stub java implementation
 */

public class V10Stub extends org.apache.axis2.client.Stub {
	protected org.apache.axis2.description.AxisOperation[] _operations;

	// hashmaps to keep the fault mapping
	private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
	private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
	private java.util.HashMap faultMessageMap = new java.util.HashMap();

	private static int counter = 0;

	
	
	private static synchronized java.lang.String getUniqueSuffix() {
		// reset the counter if it is greater than 99999
		if (counter > 99999) {
			counter = 0;
		}
		counter = counter + 1;
		return java.lang.Long.toString(java.lang.System.currentTimeMillis())
				+ "_" + counter;
	}

	private void populateAxisService() throws org.apache.axis2.AxisFault {

		// creating the Service with a unique name
		_service = new org.apache.axis2.description.AxisService("V10"
				+ getUniqueSuffix());
		addAnonymousOperations();

		// creating the operations
		org.apache.axis2.description.AxisOperation __operation;

		_operations = new org.apache.axis2.description.AxisOperation[1];

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/servicedefs/1.0",
				"getConsumerCreditReport"));
		_service.addOperation(__operation);

		_operations[0] = __operation;

	}

	// populates the faults
	private void populateFaults() {

	}

	/**
	 * Constructor that takes in a configContext
	 */

	public V10Stub(
			org.apache.axis2.context.ConfigurationContext configurationContext,
			java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
		this(configurationContext, targetEndpoint, false);
	}

	/**
	 * Constructor that takes in a configContext and useseperate listner
	 */
	public V10Stub(
			org.apache.axis2.context.ConfigurationContext configurationContext,
			java.lang.String targetEndpoint, boolean useSeparateListener)
			throws org.apache.axis2.AxisFault {
		// To populate AxisService
		populateAxisService();
		populateFaults();

		_serviceClient = new org.apache.axis2.client.ServiceClient(
				configurationContext, _service);

		_serviceClient.getOptions().setTo(
				new org.apache.axis2.addressing.EndpointReference(
						targetEndpoint));
		_serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

	}

	/**
	 * Default Constructor
	 */
	public V10Stub(
			org.apache.axis2.context.ConfigurationContext configurationContext)
			throws org.apache.axis2.AxisFault {

		this(
				configurationContext,
				"http://eporttrain.equifax.co.in:8080/creditreportws/CreditReportWSInquiry/v1.0/");

	}

	/**
	 * Default Constructor
	 */
	public V10Stub() throws org.apache.axis2.AxisFault {

		this(
				"http://eporttrain.equifax.co.in:8080/creditreportws/CreditReportWSInquiry/v1.0/");

	}

	/**
	 * Constructor taking the target endpoint
	 */
	public V10Stub(java.lang.String targetEndpoint)
			throws org.apache.axis2.AxisFault {
		this(null, targetEndpoint);
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see com.equifax.services.eport.servicedefs._1_0.V10#getConsumerCreditReport
	 * @param inquiryRequest0
	 */

	public com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryResponse getConsumerCreditReport(

			com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryRequest inquiryRequest0)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient
					.createClient(_operations[0].getName());
			_operationClient
					.getOptions()
					.setAction(
							"http://services.equifax.com/CreditReportWS/CreditReportWSInquiry/1.0");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
					true);

			addPropertyToOperationClient(
					_operationClient,
					org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
					"&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env = toEnvelope(
					getFactory(_operationClient.getOptions()
							.getSoapVersionURI()),
					inquiryRequest0,
					optimizeContent(new javax.xml.namespace.QName(
							"http://services.equifax.com/eport/servicedefs/1.0",
							"getConsumerCreditReport")),
					new javax.xml.namespace.QName(
							"http://services.equifax.com/eport/servicedefs/1.0",
							"getConsumerCreditReport"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
					.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
					.getEnvelope();

			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement(),
					com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryResponse.class,
					getEnvelopeNamespaces(_returnEnv));

			return (com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap
						.containsKey(new org.apache.axis2.client.FaultMapKey(
								faultElt.getQName(), "getConsumerCreditReport"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
								.get(new org.apache.axis2.client.FaultMapKey(
										faultElt.getQName(),
										"getConsumerCreditReport"));
						java.lang.Class exceptionClass = java.lang.Class
								.forName(exceptionClassName);
						java.lang.reflect.Constructor constructor = exceptionClass
								.getConstructor(java.lang.String.class);
						java.lang.Exception ex = (java.lang.Exception) constructor
								.newInstance(f.getMessage());
						// message class
						java.lang.String messageClassName = (java.lang.String) faultMessageMap
								.get(new org.apache.axis2.client.FaultMapKey(
										faultElt.getQName(),
										"getConsumerCreditReport"));
						java.lang.Class messageClass = java.lang.Class
								.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,
								messageClass, null);
						java.lang.reflect.Method m = exceptionClass.getMethod(
								"setFaultMessage",
								new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender()
						.cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see com.equifax.services.eport.servicedefs._1_0.V10#startgetConsumerCreditReport
	 * @param inquiryRequest0
	 */
	public void startgetConsumerCreditReport(

			com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryRequest inquiryRequest0,

			final com.equifax.services.eport.servicedefs._1_0.V10CallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient = _serviceClient
				.createClient(_operations[0].getName());
		_operationClient
				.getOptions()
				.setAction(
						"http://services.equifax.com/CreditReportWS/CreditReportWSInquiry/1.0");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(
				_operationClient,
				org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
				"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env = toEnvelope(getFactory(_operationClient.getOptions()
				.getSoapVersionURI()), inquiryRequest0,
				optimizeContent(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/servicedefs/1.0",
						"getConsumerCreditReport")),
				new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/servicedefs/1.0",
						"getConsumerCreditReport"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient
				.setCallback(new org.apache.axis2.client.async.AxisCallback() {
					public void onMessage(
							org.apache.axis2.context.MessageContext resultContext) {
						try {
							org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
									.getEnvelope();

							java.lang.Object object = fromOM(
									resultEnv.getBody().getFirstElement(),
									com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryResponse.class,
									getEnvelopeNamespaces(resultEnv));
							callback.receiveResultgetConsumerCreditReport((com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryResponse) object);

						} catch (org.apache.axis2.AxisFault e) {
							callback.receiveErrorgetConsumerCreditReport(e);
						}
					}

					public void onError(java.lang.Exception error) {
						if (error instanceof org.apache.axis2.AxisFault) {
							org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
							org.apache.axiom.om.OMElement faultElt = f
									.getDetail();
							if (faultElt != null) {
								if (faultExceptionNameMap
										.containsKey(new org.apache.axis2.client.FaultMapKey(
												faultElt.getQName(),
												"getConsumerCreditReport"))) {
									// make the fault by reflection
									try {
										java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
												.get(new org.apache.axis2.client.FaultMapKey(
														faultElt.getQName(),
														"getConsumerCreditReport"));
										java.lang.Class exceptionClass = java.lang.Class
												.forName(exceptionClassName);
										java.lang.reflect.Constructor constructor = exceptionClass
												.getConstructor(java.lang.String.class);
										java.lang.Exception ex = (java.lang.Exception) constructor
												.newInstance(f.getMessage());
										// message class
										java.lang.String messageClassName = (java.lang.String) faultMessageMap
												.get(new org.apache.axis2.client.FaultMapKey(
														faultElt.getQName(),
														"getConsumerCreditReport"));
										java.lang.Class messageClass = java.lang.Class
												.forName(messageClassName);
										java.lang.Object messageObject = fromOM(
												faultElt, messageClass, null);
										java.lang.reflect.Method m = exceptionClass
												.getMethod(
														"setFaultMessage",
														new java.lang.Class[] { messageClass });
										m.invoke(
												ex,
												new java.lang.Object[] { messageObject });

										callback.receiveErrorgetConsumerCreditReport(new java.rmi.RemoteException(
												ex.getMessage(), ex));
									} catch (java.lang.ClassCastException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorgetConsumerCreditReport(f);
									} catch (java.lang.ClassNotFoundException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorgetConsumerCreditReport(f);
									} catch (java.lang.NoSuchMethodException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorgetConsumerCreditReport(f);
									} catch (java.lang.reflect.InvocationTargetException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorgetConsumerCreditReport(f);
									} catch (java.lang.IllegalAccessException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorgetConsumerCreditReport(f);
									} catch (java.lang.InstantiationException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorgetConsumerCreditReport(f);
									} catch (org.apache.axis2.AxisFault e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorgetConsumerCreditReport(f);
									}
								} else {
									callback.receiveErrorgetConsumerCreditReport(f);
								}
							} else {
								callback.receiveErrorgetConsumerCreditReport(f);
							}
						} else {
							callback.receiveErrorgetConsumerCreditReport(error);
						}
					}

					public void onFault(
							org.apache.axis2.context.MessageContext faultContext) {
						org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
								.getInboundFaultFromMessageContext(faultContext);
						onError(fault);
					}

					public void onComplete() {
						try {
							_messageContext.getTransportOut().getSender()
									.cleanup(_messageContext);
						} catch (org.apache.axis2.AxisFault axisFault) {
							callback.receiveErrorgetConsumerCreditReport(axisFault);
						}
					}
				});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[0].getMessageReceiver() == null
				&& _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[0].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * A utility method that copies the namepaces from the SOAPEnvelope
	 */
	private java.util.Map getEnvelopeNamespaces(
			org.apache.axiom.soap.SOAPEnvelope env) {
		java.util.Map returnMap = new java.util.HashMap();
		java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
		while (namespaceIterator.hasNext()) {
			org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator
					.next();
			returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
		}
		return returnMap;
	}

	private javax.xml.namespace.QName[] opNameArray = null;

	private boolean optimizeContent(javax.xml.namespace.QName opName) {

		if (opNameArray == null) {
			return false;
		}
		for (int i = 0; i < opNameArray.length; i++) {
			if (opName.equals(opNameArray[i])) {
				return true;
			}
		}
		return false;
	}

	// http://eporttrain.equifax.co.in:8080/creditreportws/CreditReportWSInquiry/v1.0/
	public static class PlaceOfBirthInfoType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * PlaceOfBirthInfoType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for CityOfBirth
		 */

		protected java.lang.String localCityOfBirth;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCityOfBirthTracker = false;

		public boolean isCityOfBirthSpecified() {
			return localCityOfBirthTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCityOfBirth() {
			return localCityOfBirth;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CityOfBirth
		 */
		public void setCityOfBirth(java.lang.String param) {
			localCityOfBirthTracker = param != null;

			this.localCityOfBirth = param;

		}

		/**
		 * field for StateOfBirth
		 */

		protected java.lang.String localStateOfBirth;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localStateOfBirthTracker = false;

		public boolean isStateOfBirthSpecified() {
			return localStateOfBirthTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getStateOfBirth() {
			return localStateOfBirth;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StateOfBirth
		 */
		public void setStateOfBirth(java.lang.String param) {
			localStateOfBirthTracker = param != null;

			this.localStateOfBirth = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":PlaceOfBirthInfoType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "PlaceOfBirthInfoType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}
			if (localCityOfBirthTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CityOfBirth", xmlWriter);

				if (localCityOfBirth == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CityOfBirth cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localCityOfBirth);

				}

				xmlWriter.writeEndElement();
			}
			if (localStateOfBirthTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "StateOfBirth", xmlWriter);

				if (localStateOfBirth == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"StateOfBirth cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localStateOfBirth);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localCityOfBirthTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CityOfBirth"));

				if (localCityOfBirth != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCityOfBirth));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CityOfBirth cannot be null!!");
				}
			}
			if (localStateOfBirthTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"StateOfBirth"));

				if (localStateOfBirth != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localStateOfBirth));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"StateOfBirth cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static PlaceOfBirthInfoType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				PlaceOfBirthInfoType object = new PlaceOfBirthInfoType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"PlaceOfBirthInfoType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (PlaceOfBirthInfoType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CityOfBirth").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CityOfBirth"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCityOfBirth(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"StateOfBirth").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "StateOfBirth"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setStateOfBirth(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ScoringElementsType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * ScoringElementsType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for ScoringElement This was an Array!
		 */

		protected ScoringElementType[] localScoringElement;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localScoringElementTracker = false;

		public boolean isScoringElementSpecified() {
			return localScoringElementTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return ScoringElementType[]
		 */
		public ScoringElementType[] getScoringElement() {
			return localScoringElement;
		}

		/**
		 * validate the array for ScoringElement
		 */
		protected void validateScoringElement(ScoringElementType[] param) {

			if ((param != null) && (param.length > 8)) {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ScoringElement
		 */
		public void setScoringElement(ScoringElementType[] param) {

			validateScoringElement(param);

			localScoringElementTracker = param != null;

			this.localScoringElement = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            ScoringElementType
		 */
		public void addScoringElement(ScoringElementType param) {
			if (localScoringElement == null) {
				localScoringElement = new ScoringElementType[] {};
			}

			// update the setting tracker
			localScoringElementTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localScoringElement);
			list.add(param);
			this.localScoringElement = (ScoringElementType[]) list
					.toArray(new ScoringElementType[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":ScoringElementsType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ScoringElementsType", xmlWriter);
				}

			}
			if (localScoringElementTracker) {
				if (localScoringElement != null) {
					for (int i = 0; i < localScoringElement.length; i++) {
						if (localScoringElement[i] != null) {
							localScoringElement[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"ScoringElement"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"ScoringElement cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localScoringElementTracker) {
				if (localScoringElement != null) {
					for (int i = 0; i < localScoringElement.length; i++) {

						if (localScoringElement[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"ScoringElement"));
							elementList.add(localScoringElement[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"ScoringElement cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ScoringElementsType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ScoringElementsType object = new ScoringElementsType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"ScoringElementsType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (ScoringElementsType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ScoringElement").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(ScoringElementType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"ScoringElement").equals(reader
										.getName())) {
									list1.add(ScoringElementType.Factory
											.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setScoringElement((ScoringElementType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(ScoringElementType.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class CreditReportSummaryType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * CreditReportSummaryType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for NoOfAccounts
		 */

		protected int localNoOfAccounts;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNoOfAccountsTracker = false;

		public boolean isNoOfAccountsSpecified() {
			return localNoOfAccountsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNoOfAccounts() {
			return localNoOfAccounts;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NoOfAccounts
		 */
		public void setNoOfAccounts(int param) {

			// setting primitive attribute tracker to true
			localNoOfAccountsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNoOfAccounts = param;

		}

		/**
		 * field for NoOfActiveAccounts
		 */

		protected int localNoOfActiveAccounts;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNoOfActiveAccountsTracker = false;

		public boolean isNoOfActiveAccountsSpecified() {
			return localNoOfActiveAccountsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNoOfActiveAccounts() {
			return localNoOfActiveAccounts;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NoOfActiveAccounts
		 */
		public void setNoOfActiveAccounts(int param) {

			// setting primitive attribute tracker to true
			localNoOfActiveAccountsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNoOfActiveAccounts = param;

		}

		/**
		 * field for NoOfWriteOffs
		 */

		protected int localNoOfWriteOffs;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNoOfWriteOffsTracker = false;

		public boolean isNoOfWriteOffsSpecified() {
			return localNoOfWriteOffsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNoOfWriteOffs() {
			return localNoOfWriteOffs;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NoOfWriteOffs
		 */
		public void setNoOfWriteOffs(int param) {

			// setting primitive attribute tracker to true
			localNoOfWriteOffsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNoOfWriteOffs = param;

		}

		/**
		 * field for TotalPastDue
		 */

		protected java.math.BigDecimal localTotalPastDue;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTotalPastDueTracker = false;

		public boolean isTotalPastDueSpecified() {
			return localTotalPastDueTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getTotalPastDue() {
			return localTotalPastDue;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TotalPastDue
		 */
		public void setTotalPastDue(java.math.BigDecimal param) {
			localTotalPastDueTracker = param != null;

			this.localTotalPastDue = param;

		}

		/**
		 * field for MostSevereStatusWithIn24Months
		 */

		protected java.lang.String localMostSevereStatusWithIn24Months;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMostSevereStatusWithIn24MonthsTracker = false;

		public boolean isMostSevereStatusWithIn24MonthsSpecified() {
			return localMostSevereStatusWithIn24MonthsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMostSevereStatusWithIn24Months() {
			return localMostSevereStatusWithIn24Months;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MostSevereStatusWithIn24Months
		 */
		public void setMostSevereStatusWithIn24Months(java.lang.String param) {
			localMostSevereStatusWithIn24MonthsTracker = param != null;

			this.localMostSevereStatusWithIn24Months = param;

		}

		/**
		 * field for SingleHighestCredit
		 */

		protected java.math.BigDecimal localSingleHighestCredit;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSingleHighestCreditTracker = false;

		public boolean isSingleHighestCreditSpecified() {
			return localSingleHighestCreditTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getSingleHighestCredit() {
			return localSingleHighestCredit;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SingleHighestCredit
		 */
		public void setSingleHighestCredit(java.math.BigDecimal param) {
			localSingleHighestCreditTracker = param != null;

			this.localSingleHighestCredit = param;

		}

		/**
		 * field for SingleHighestSanctionAmount
		 */

		protected java.math.BigDecimal localSingleHighestSanctionAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSingleHighestSanctionAmountTracker = false;

		public boolean isSingleHighestSanctionAmountSpecified() {
			return localSingleHighestSanctionAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getSingleHighestSanctionAmount() {
			return localSingleHighestSanctionAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SingleHighestSanctionAmount
		 */
		public void setSingleHighestSanctionAmount(java.math.BigDecimal param) {
			localSingleHighestSanctionAmountTracker = param != null;

			this.localSingleHighestSanctionAmount = param;

		}

		/**
		 * field for TotalHighCredit
		 */

		protected java.math.BigDecimal localTotalHighCredit;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTotalHighCreditTracker = false;

		public boolean isTotalHighCreditSpecified() {
			return localTotalHighCreditTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getTotalHighCredit() {
			return localTotalHighCredit;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TotalHighCredit
		 */
		public void setTotalHighCredit(java.math.BigDecimal param) {
			localTotalHighCreditTracker = param != null;

			this.localTotalHighCredit = param;

		}

		/**
		 * field for AverageOpenBalance
		 */

		protected java.math.BigDecimal localAverageOpenBalance;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAverageOpenBalanceTracker = false;

		public boolean isAverageOpenBalanceSpecified() {
			return localAverageOpenBalanceTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getAverageOpenBalance() {
			return localAverageOpenBalance;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AverageOpenBalance
		 */
		public void setAverageOpenBalance(java.math.BigDecimal param) {
			localAverageOpenBalanceTracker = param != null;

			this.localAverageOpenBalance = param;

		}

		/**
		 * field for SingleHighestBalance
		 */

		protected java.math.BigDecimal localSingleHighestBalance;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSingleHighestBalanceTracker = false;

		public boolean isSingleHighestBalanceSpecified() {
			return localSingleHighestBalanceTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getSingleHighestBalance() {
			return localSingleHighestBalance;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SingleHighestBalance
		 */
		public void setSingleHighestBalance(java.math.BigDecimal param) {
			localSingleHighestBalanceTracker = param != null;

			this.localSingleHighestBalance = param;

		}

		/**
		 * field for NoOfPastDueAccounts
		 */

		protected int localNoOfPastDueAccounts;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNoOfPastDueAccountsTracker = false;

		public boolean isNoOfPastDueAccountsSpecified() {
			return localNoOfPastDueAccountsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNoOfPastDueAccounts() {
			return localNoOfPastDueAccounts;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NoOfPastDueAccounts
		 */
		public void setNoOfPastDueAccounts(int param) {

			// setting primitive attribute tracker to true
			localNoOfPastDueAccountsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNoOfPastDueAccounts = param;

		}

		/**
		 * field for NoOfZeroBalanceAccounts
		 */

		protected int localNoOfZeroBalanceAccounts;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNoOfZeroBalanceAccountsTracker = false;

		public boolean isNoOfZeroBalanceAccountsSpecified() {
			return localNoOfZeroBalanceAccountsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNoOfZeroBalanceAccounts() {
			return localNoOfZeroBalanceAccounts;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NoOfZeroBalanceAccounts
		 */
		public void setNoOfZeroBalanceAccounts(int param) {

			// setting primitive attribute tracker to true
			localNoOfZeroBalanceAccountsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNoOfZeroBalanceAccounts = param;

		}

		/**
		 * field for RecentAccount
		 */

		protected java.lang.String localRecentAccount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRecentAccountTracker = false;

		public boolean isRecentAccountSpecified() {
			return localRecentAccountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRecentAccount() {
			return localRecentAccount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RecentAccount
		 */
		public void setRecentAccount(java.lang.String param) {
			localRecentAccountTracker = param != null;

			this.localRecentAccount = param;

		}

		/**
		 * field for OldestAccount
		 */

		protected java.lang.String localOldestAccount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localOldestAccountTracker = false;

		public boolean isOldestAccountSpecified() {
			return localOldestAccountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getOldestAccount() {
			return localOldestAccount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            OldestAccount
		 */
		public void setOldestAccount(java.lang.String param) {
			localOldestAccountTracker = param != null;

			this.localOldestAccount = param;

		}

		/**
		 * field for TotalBalanceAmount
		 */

		protected java.math.BigDecimal localTotalBalanceAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTotalBalanceAmountTracker = false;

		public boolean isTotalBalanceAmountSpecified() {
			return localTotalBalanceAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getTotalBalanceAmount() {
			return localTotalBalanceAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TotalBalanceAmount
		 */
		public void setTotalBalanceAmount(java.math.BigDecimal param) {
			localTotalBalanceAmountTracker = param != null;

			this.localTotalBalanceAmount = param;

		}

		/**
		 * field for TotalSanctionAmount
		 */

		protected java.math.BigDecimal localTotalSanctionAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTotalSanctionAmountTracker = false;

		public boolean isTotalSanctionAmountSpecified() {
			return localTotalSanctionAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getTotalSanctionAmount() {
			return localTotalSanctionAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TotalSanctionAmount
		 */
		public void setTotalSanctionAmount(java.math.BigDecimal param) {
			localTotalSanctionAmountTracker = param != null;

			this.localTotalSanctionAmount = param;

		}

		/**
		 * field for TotalCreditLimit
		 */

		protected java.math.BigDecimal localTotalCreditLimit;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTotalCreditLimitTracker = false;

		public boolean isTotalCreditLimitSpecified() {
			return localTotalCreditLimitTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getTotalCreditLimit() {
			return localTotalCreditLimit;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TotalCreditLimit
		 */
		public void setTotalCreditLimit(java.math.BigDecimal param) {
			localTotalCreditLimitTracker = param != null;

			this.localTotalCreditLimit = param;

		}

		/**
		 * field for TotalMonthlyPaymentAmount
		 */

		protected java.math.BigDecimal localTotalMonthlyPaymentAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTotalMonthlyPaymentAmountTracker = false;

		public boolean isTotalMonthlyPaymentAmountSpecified() {
			return localTotalMonthlyPaymentAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getTotalMonthlyPaymentAmount() {
			return localTotalMonthlyPaymentAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TotalMonthlyPaymentAmount
		 */
		public void setTotalMonthlyPaymentAmount(java.math.BigDecimal param) {
			localTotalMonthlyPaymentAmountTracker = param != null;

			this.localTotalMonthlyPaymentAmount = param;

		}

		/**
		 * field for TotalWrittenOffAmount
		 */

		protected java.math.BigDecimal localTotalWrittenOffAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTotalWrittenOffAmountTracker = false;

		public boolean isTotalWrittenOffAmountSpecified() {
			return localTotalWrittenOffAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getTotalWrittenOffAmount() {
			return localTotalWrittenOffAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TotalWrittenOffAmount
		 */
		public void setTotalWrittenOffAmount(java.math.BigDecimal param) {
			localTotalWrittenOffAmountTracker = param != null;

			this.localTotalWrittenOffAmount = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":CreditReportSummaryType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "CreditReportSummaryType", xmlWriter);
				}

			}
			if (localNoOfAccountsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "NoOfAccounts", xmlWriter);

				if (localNoOfAccounts == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"NoOfAccounts cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNoOfAccounts));
				}

				xmlWriter.writeEndElement();
			}
			if (localNoOfActiveAccountsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "NoOfActiveAccounts",
						xmlWriter);

				if (localNoOfActiveAccounts == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"NoOfActiveAccounts cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNoOfActiveAccounts));
				}

				xmlWriter.writeEndElement();
			}
			if (localNoOfWriteOffsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "NoOfWriteOffs", xmlWriter);

				if (localNoOfWriteOffs == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"NoOfWriteOffs cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNoOfWriteOffs));
				}

				xmlWriter.writeEndElement();
			}
			if (localTotalPastDueTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TotalPastDue", xmlWriter);

				if (localTotalPastDue == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TotalPastDue cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalPastDue));

				}

				xmlWriter.writeEndElement();
			}
			if (localMostSevereStatusWithIn24MonthsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace,
						"MostSevereStatusWithIn24Months", xmlWriter);

				if (localMostSevereStatusWithIn24Months == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MostSevereStatusWithIn24Months cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(localMostSevereStatusWithIn24Months);

				}

				xmlWriter.writeEndElement();
			}
			if (localSingleHighestCreditTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "SingleHighestCredit",
						xmlWriter);

				if (localSingleHighestCredit == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"SingleHighestCredit cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSingleHighestCredit));

				}

				xmlWriter.writeEndElement();
			}
			if (localSingleHighestSanctionAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace,
						"SingleHighestSanctionAmount", xmlWriter);

				if (localSingleHighestSanctionAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"SingleHighestSanctionAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSingleHighestSanctionAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localTotalHighCreditTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TotalHighCredit", xmlWriter);

				if (localTotalHighCredit == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TotalHighCredit cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalHighCredit));

				}

				xmlWriter.writeEndElement();
			}
			if (localAverageOpenBalanceTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AverageOpenBalance",
						xmlWriter);

				if (localAverageOpenBalance == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AverageOpenBalance cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAverageOpenBalance));

				}

				xmlWriter.writeEndElement();
			}
			if (localSingleHighestBalanceTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "SingleHighestBalance",
						xmlWriter);

				if (localSingleHighestBalance == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"SingleHighestBalance cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSingleHighestBalance));

				}

				xmlWriter.writeEndElement();
			}
			if (localNoOfPastDueAccountsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "NoOfPastDueAccounts",
						xmlWriter);

				if (localNoOfPastDueAccounts == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"NoOfPastDueAccounts cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNoOfPastDueAccounts));
				}

				xmlWriter.writeEndElement();
			}
			if (localNoOfZeroBalanceAccountsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "NoOfZeroBalanceAccounts",
						xmlWriter);

				if (localNoOfZeroBalanceAccounts == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"NoOfZeroBalanceAccounts cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNoOfZeroBalanceAccounts));
				}

				xmlWriter.writeEndElement();
			}
			if (localRecentAccountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "RecentAccount", xmlWriter);

				if (localRecentAccount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"RecentAccount cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localRecentAccount);

				}

				xmlWriter.writeEndElement();
			}
			if (localOldestAccountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "OldestAccount", xmlWriter);

				if (localOldestAccount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"OldestAccount cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localOldestAccount);

				}

				xmlWriter.writeEndElement();
			}
			if (localTotalBalanceAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TotalBalanceAmount",
						xmlWriter);

				if (localTotalBalanceAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TotalBalanceAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalBalanceAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localTotalSanctionAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TotalSanctionAmount",
						xmlWriter);

				if (localTotalSanctionAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TotalSanctionAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalSanctionAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localTotalCreditLimitTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TotalCreditLimit",
						xmlWriter);

				if (localTotalCreditLimit == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TotalCreditLimit cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalCreditLimit));

				}

				xmlWriter.writeEndElement();
			}
			if (localTotalMonthlyPaymentAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TotalMonthlyPaymentAmount",
						xmlWriter);

				if (localTotalMonthlyPaymentAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TotalMonthlyPaymentAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalMonthlyPaymentAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localTotalWrittenOffAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TotalWrittenOffAmount",
						xmlWriter);

				if (localTotalWrittenOffAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TotalWrittenOffAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalWrittenOffAmount));

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localNoOfAccountsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NoOfAccounts"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNoOfAccounts));
			}
			if (localNoOfActiveAccountsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NoOfActiveAccounts"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNoOfActiveAccounts));
			}
			if (localNoOfWriteOffsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NoOfWriteOffs"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNoOfWriteOffs));
			}
			if (localTotalPastDueTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TotalPastDue"));

				if (localTotalPastDue != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalPastDue));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TotalPastDue cannot be null!!");
				}
			}
			if (localMostSevereStatusWithIn24MonthsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MostSevereStatusWithIn24Months"));

				if (localMostSevereStatusWithIn24Months != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMostSevereStatusWithIn24Months));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MostSevereStatusWithIn24Months cannot be null!!");
				}
			}
			if (localSingleHighestCreditTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"SingleHighestCredit"));

				if (localSingleHighestCredit != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSingleHighestCredit));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"SingleHighestCredit cannot be null!!");
				}
			}
			if (localSingleHighestSanctionAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"SingleHighestSanctionAmount"));

				if (localSingleHighestSanctionAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSingleHighestSanctionAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"SingleHighestSanctionAmount cannot be null!!");
				}
			}
			if (localTotalHighCreditTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TotalHighCredit"));

				if (localTotalHighCredit != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalHighCredit));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TotalHighCredit cannot be null!!");
				}
			}
			if (localAverageOpenBalanceTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AverageOpenBalance"));

				if (localAverageOpenBalance != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAverageOpenBalance));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AverageOpenBalance cannot be null!!");
				}
			}
			if (localSingleHighestBalanceTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"SingleHighestBalance"));

				if (localSingleHighestBalance != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSingleHighestBalance));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"SingleHighestBalance cannot be null!!");
				}
			}
			if (localNoOfPastDueAccountsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NoOfPastDueAccounts"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNoOfPastDueAccounts));
			}
			if (localNoOfZeroBalanceAccountsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NoOfZeroBalanceAccounts"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNoOfZeroBalanceAccounts));
			}
			if (localRecentAccountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"RecentAccount"));

				if (localRecentAccount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRecentAccount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"RecentAccount cannot be null!!");
				}
			}
			if (localOldestAccountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"OldestAccount"));

				if (localOldestAccount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localOldestAccount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"OldestAccount cannot be null!!");
				}
			}
			if (localTotalBalanceAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TotalBalanceAmount"));

				if (localTotalBalanceAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalBalanceAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TotalBalanceAmount cannot be null!!");
				}
			}
			if (localTotalSanctionAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TotalSanctionAmount"));

				if (localTotalSanctionAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalSanctionAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TotalSanctionAmount cannot be null!!");
				}
			}
			if (localTotalCreditLimitTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TotalCreditLimit"));

				if (localTotalCreditLimit != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalCreditLimit));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TotalCreditLimit cannot be null!!");
				}
			}
			if (localTotalMonthlyPaymentAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TotalMonthlyPaymentAmount"));

				if (localTotalMonthlyPaymentAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalMonthlyPaymentAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TotalMonthlyPaymentAmount cannot be null!!");
				}
			}
			if (localTotalWrittenOffAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TotalWrittenOffAmount"));

				if (localTotalWrittenOffAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalWrittenOffAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TotalWrittenOffAmount cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static CreditReportSummaryType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				CreditReportSummaryType object = new CreditReportSummaryType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"CreditReportSummaryType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (CreditReportSummaryType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NoOfAccounts").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NoOfAccounts"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNoOfAccounts(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNoOfAccounts(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NoOfActiveAccounts").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NoOfActiveAccounts"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNoOfActiveAccounts(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNoOfActiveAccounts(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NoOfWriteOffs").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NoOfWriteOffs"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNoOfWriteOffs(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNoOfWriteOffs(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TotalPastDue").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TotalPastDue"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTotalPastDue(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MostSevereStatusWithIn24Months")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: "
											+ "MostSevereStatusWithIn24Months"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMostSevereStatusWithIn24Months(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"SingleHighestCredit").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "SingleHighestCredit"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSingleHighestCredit(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"SingleHighestSanctionAmount")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: "
											+ "SingleHighestSanctionAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSingleHighestSanctionAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TotalHighCredit").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TotalHighCredit"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTotalHighCredit(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AverageOpenBalance").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AverageOpenBalance"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAverageOpenBalance(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"SingleHighestBalance").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "SingleHighestBalance"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSingleHighestBalance(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NoOfPastDueAccounts").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NoOfPastDueAccounts"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNoOfPastDueAccounts(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNoOfPastDueAccounts(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NoOfZeroBalanceAccounts").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NoOfZeroBalanceAccounts"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNoOfZeroBalanceAccounts(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNoOfZeroBalanceAccounts(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RecentAccount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "RecentAccount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRecentAccount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"OldestAccount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "OldestAccount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setOldestAccount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TotalBalanceAmount").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TotalBalanceAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTotalBalanceAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TotalSanctionAmount").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TotalSanctionAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTotalSanctionAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TotalCreditLimit")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TotalCreditLimit"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTotalCreditLimit(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TotalMonthlyPaymentAmount").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: "
											+ "TotalMonthlyPaymentAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTotalMonthlyPaymentAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TotalWrittenOffAmount").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TotalWrittenOffAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTotalWrittenOffAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class EnquiryType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * EnquiryType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Institution
		 */

		protected java.lang.String localInstitution;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInstitutionTracker = false;

		public boolean isInstitutionSpecified() {
			return localInstitutionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getInstitution() {
			return localInstitution;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Institution
		 */
		public void setInstitution(java.lang.String param) {
			localInstitutionTracker = param != null;

			this.localInstitution = param;

		}

		/**
		 * field for Date
		 */

		protected java.util.Date localDate;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateTracker = false;

		public boolean isDateSpecified() {
			return localDateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDate() {
			return localDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Date
		 */
		public void setDate(java.util.Date param) {
			localDateTracker = param != null;

			this.localDate = param;

		}

		/**
		 * field for Time
		 */

		protected java.lang.String localTime;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTimeTracker = false;

		public boolean isTimeSpecified() {
			return localTimeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTime() {
			return localTime;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Time
		 */
		public void setTime(java.lang.String param) {
			localTimeTracker = param != null;

			this.localTime = param;

		}

		/**
		 * field for RequestPurpose
		 */

		protected java.lang.String localRequestPurpose;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRequestPurposeTracker = false;

		public boolean isRequestPurposeSpecified() {
			return localRequestPurposeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRequestPurpose() {
			return localRequestPurpose;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RequestPurpose
		 */
		public void setRequestPurpose(java.lang.String param) {
			localRequestPurposeTracker = param != null;

			this.localRequestPurpose = param;

		}

		/**
		 * field for Amount
		 */

		protected java.math.BigDecimal localAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAmountTracker = false;

		public boolean isAmountSpecified() {
			return localAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getAmount() {
			return localAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Amount
		 */
		public void setAmount(java.math.BigDecimal param) {
			localAmountTracker = param != null;

			this.localAmount = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":EnquiryType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "EnquiryType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}
			if (localInstitutionTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Institution", xmlWriter);

				if (localInstitution == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Institution cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localInstitution);

				}

				xmlWriter.writeEndElement();
			}
			if (localDateTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Date", xmlWriter);

				if (localDate == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Date cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDate));

				}

				xmlWriter.writeEndElement();
			}
			if (localTimeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Time", xmlWriter);

				if (localTime == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Time cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localTime);

				}

				xmlWriter.writeEndElement();
			}
			if (localRequestPurposeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "RequestPurpose", xmlWriter);

				if (localRequestPurpose == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"RequestPurpose cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localRequestPurpose);

				}

				xmlWriter.writeEndElement();
			}
			if (localAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Amount", xmlWriter);

				if (localAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Amount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAmount));

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localInstitutionTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Institution"));

				if (localInstitution != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localInstitution));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Institution cannot be null!!");
				}
			}
			if (localDateTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Date"));

				if (localDate != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDate));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Date cannot be null!!");
				}
			}
			if (localTimeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Time"));

				if (localTime != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTime));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Time cannot be null!!");
				}
			}
			if (localRequestPurposeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"RequestPurpose"));

				if (localRequestPurpose != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRequestPurpose));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"RequestPurpose cannot be null!!");
				}
			}
			if (localAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Amount"));

				if (localAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Amount cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static EnquiryType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				EnquiryType object = new EnquiryType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"EnquiryType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (EnquiryType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Institution").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Institution"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setInstitution(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Date").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Date"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Time").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Time"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTime(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RequestPurpose").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "RequestPurpose"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRequestPurpose(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Amount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Amount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AdditionalMFIDetailsType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * AdditionalMFIDetailsType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for MFIClientFullname
		 */

		protected java.lang.String localMFIClientFullname;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIClientFullnameTracker = false;

		public boolean isMFIClientFullnameSpecified() {
			return localMFIClientFullnameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIClientFullname() {
			return localMFIClientFullname;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIClientFullname
		 */
		public void setMFIClientFullname(java.lang.String param) {
			localMFIClientFullnameTracker = param != null;

			this.localMFIClientFullname = param;

		}

		/**
		 * field for MFIDOB
		 */

		protected java.lang.String localMFIDOB;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIDOBTracker = false;

		public boolean isMFIDOBSpecified() {
			return localMFIDOBTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIDOB() {
			return localMFIDOB;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIDOB
		 */
		public void setMFIDOB(java.lang.String param) {
			localMFIDOBTracker = param != null;

			this.localMFIDOB = param;

		}

		/**
		 * field for MFIGender
		 */

		protected java.lang.String localMFIGender;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIGenderTracker = false;

		public boolean isMFIGenderSpecified() {
			return localMFIGenderTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIGender() {
			return localMFIGender;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIGender
		 */
		public void setMFIGender(java.lang.String param) {
			localMFIGenderTracker = param != null;

			this.localMFIGender = param;

		}

		/**
		 * field for MFIIdentification
		 */

		protected MFIAdditionalIdentityInfoType localMFIIdentification;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIIdentificationTracker = false;

		public boolean isMFIIdentificationSpecified() {
			return localMFIIdentificationTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return MFIAdditionalIdentityInfoType
		 */
		public MFIAdditionalIdentityInfoType getMFIIdentification() {
			return localMFIIdentification;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIIdentification
		 */
		public void setMFIIdentification(MFIAdditionalIdentityInfoType param) {
			localMFIIdentificationTracker = param != null;

			this.localMFIIdentification = param;

		}

		/**
		 * field for MFIAddress
		 */

		protected MFIAdditionalAddressType localMFIAddress;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIAddressTracker = false;

		public boolean isMFIAddressSpecified() {
			return localMFIAddressTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return MFIAdditionalAddressType
		 */
		public MFIAdditionalAddressType getMFIAddress() {
			return localMFIAddress;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIAddress
		 */
		public void setMFIAddress(MFIAdditionalAddressType param) {
			localMFIAddressTracker = param != null;

			this.localMFIAddress = param;

		}

		/**
		 * field for Phone This was an Array!
		 */

		protected PhoneType[] localPhone;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPhoneTracker = false;

		public boolean isPhoneSpecified() {
			return localPhoneTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return PhoneType[]
		 */
		public PhoneType[] getPhone() {
			return localPhone;
		}

		/**
		 * validate the array for Phone
		 */
		protected void validatePhone(PhoneType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Phone
		 */
		public void setPhone(PhoneType[] param) {

			validatePhone(param);

			localPhoneTracker = param != null;

			this.localPhone = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            PhoneType
		 */
		public void addPhone(PhoneType param) {
			if (localPhone == null) {
				localPhone = new PhoneType[] {};
			}

			// update the setting tracker
			localPhoneTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localPhone);
			list.add(param);
			this.localPhone = (PhoneType[]) list.toArray(new PhoneType[list
					.size()]);

		}

		/**
		 * field for MemberId
		 */

		protected java.lang.String localMemberId;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMemberIdTracker = false;

		public boolean isMemberIdSpecified() {
			return localMemberIdTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMemberId() {
			return localMemberId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MemberId
		 */
		public void setMemberId(java.lang.String param) {
			localMemberIdTracker = param != null;

			this.localMemberId = param;

		}

		/**
		 * field for Id This was an Attribute!
		 */

		protected int localId;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getId() {
			return localId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Id
		 */
		public void setId(int param) {

			this.localId = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":AdditionalMFIDetailsType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AdditionalMFIDetailsType", xmlWriter);
				}

			}

			if (localId != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "id",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localId), xmlWriter);

			}
			if (localMFIClientFullnameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIClientFullname",
						xmlWriter);

				if (localMFIClientFullname == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIClientFullname cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIClientFullname);

				}

				xmlWriter.writeEndElement();
			}
			if (localMFIDOBTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIDOB", xmlWriter);

				if (localMFIDOB == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIDOB cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIDOB);

				}

				xmlWriter.writeEndElement();
			}
			if (localMFIGenderTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIGender", xmlWriter);

				if (localMFIGender == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIGender cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIGender);

				}

				xmlWriter.writeEndElement();
			}
			if (localMFIIdentificationTracker) {
				if (localMFIIdentification == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIIdentification cannot be null!!");
				}
				localMFIIdentification.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIIdentification"), xmlWriter);
			}
			if (localMFIAddressTracker) {
				if (localMFIAddress == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIAddress cannot be null!!");
				}
				localMFIAddress.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIAddress"), xmlWriter);
			}
			if (localPhoneTracker) {
				if (localPhone != null) {
					for (int i = 0; i < localPhone.length; i++) {
						if (localPhone[i] != null) {
							localPhone[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"Phone"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"Phone cannot be null!!");

				}
			}
			if (localMemberIdTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MemberId", xmlWriter);

				if (localMemberId == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MemberId cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMemberId);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localMFIClientFullnameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIClientFullname"));

				if (localMFIClientFullname != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIClientFullname));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIClientFullname cannot be null!!");
				}
			}
			if (localMFIDOBTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIDOB"));

				if (localMFIDOB != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIDOB));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIDOB cannot be null!!");
				}
			}
			if (localMFIGenderTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIGender"));

				if (localMFIGender != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIGender));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIGender cannot be null!!");
				}
			}
			if (localMFIIdentificationTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIIdentification"));

				if (localMFIIdentification == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIIdentification cannot be null!!");
				}
				elementList.add(localMFIIdentification);
			}
			if (localMFIAddressTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIAddress"));

				if (localMFIAddress == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIAddress cannot be null!!");
				}
				elementList.add(localMFIAddress);
			}
			if (localPhoneTracker) {
				if (localPhone != null) {
					for (int i = 0; i < localPhone.length; i++) {

						if (localPhone[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"Phone"));
							elementList.add(localPhone[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"Phone cannot be null!!");

				}

			}
			if (localMemberIdTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MemberId"));

				if (localMemberId != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMemberId));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MemberId cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "id"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localId));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AdditionalMFIDetailsType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AdditionalMFIDetailsType object = new AdditionalMFIDetailsType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"AdditionalMFIDetailsType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (AdditionalMFIDetailsType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "id"
					java.lang.String tempAttribId =

					reader.getAttributeValue(null, "id");

					if (tempAttribId != null) {
						java.lang.String content = tempAttribId;

						object.setId(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribId));

					} else {

						object.setId(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("id");

					reader.next();

					java.util.ArrayList list6 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIClientFullname").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIClientFullname"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIClientFullname(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIDOB").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIDOB"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIDOB(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIGender").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIGender"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIGender(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIIdentification").equals(reader
									.getName())) {

						object.setMFIIdentification(MFIAdditionalIdentityInfoType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIAddress").equals(reader.getName())) {

						object.setMFIAddress(MFIAdditionalAddressType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Phone").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list6.add(PhoneType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone6 = false;
						while (!loopDone6) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone6 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"Phone").equals(reader.getName())) {
									list6.add(PhoneType.Factory.parse(reader));

								} else {
									loopDone6 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setPhone((PhoneType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(PhoneType.class, list6));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MemberId").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MemberId"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMemberId(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RequestHeaderType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * RequestHeaderType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for CustomerId
		 */

		protected int localCustomerId;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getCustomerId() {
			return localCustomerId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CustomerId
		 */
		public void setCustomerId(int param) {

			this.localCustomerId = param;

		}

		/**
		 * field for UserId
		 */

		protected java.lang.String localUserId;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getUserId() {
			return localUserId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UserId
		 */
		public void setUserId(java.lang.String param) {

			this.localUserId = param;

		}

		/**
		 * field for Password
		 */

		protected java.lang.String localPassword;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPassword() {
			return localPassword;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Password
		 */
		public void setPassword(java.lang.String param) {

			this.localPassword = param;

		}

		/**
		 * field for MemberNumber
		 */

		protected java.lang.String localMemberNumber;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMemberNumber() {
			return localMemberNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MemberNumber
		 */
		public void setMemberNumber(java.lang.String param) {

			this.localMemberNumber = param;

		}

		/**
		 * field for SecurityCode
		 */

		protected java.lang.String localSecurityCode;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getSecurityCode() {
			return localSecurityCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SecurityCode
		 */
		public void setSecurityCode(java.lang.String param) {

			this.localSecurityCode = param;

		}

		/**
		 * field for ProductCode
		 */

		protected java.lang.String localProductCode;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getProductCode() {
			return localProductCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ProductCode
		 */
		public void setProductCode(java.lang.String param) {

			this.localProductCode = param;

		}

		/**
		 * field for ProductVersion
		 */

		protected java.lang.String localProductVersion;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getProductVersion() {
			return localProductVersion;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ProductVersion
		 */
		public void setProductVersion(java.lang.String param) {

			this.localProductVersion = param;

		}

		/**
		 * field for ReportFormat
		 */

		protected ReportFormatOptions localReportFormat;

		/**
		 * Auto generated getter method
		 * 
		 * @return ReportFormatOptions
		 */
		public ReportFormatOptions getReportFormat() {
			return localReportFormat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportFormat
		 */
		public void setReportFormat(ReportFormatOptions param) {

			this.localReportFormat = param;

		}

		/**
		 * field for CustRefField
		 */

		protected java.lang.String localCustRefField;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCustRefFieldTracker = false;

		public boolean isCustRefFieldSpecified() {
			return localCustRefFieldTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCustRefField() {
			return localCustRefField;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CustRefField
		 */
		public void setCustRefField(java.lang.String param) {
			localCustRefFieldTracker = param != null;

			this.localCustRefField = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":RequestHeaderType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "RequestHeaderType", xmlWriter);
				}

			}

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "CustomerId", xmlWriter);

			if (localCustomerId == java.lang.Integer.MIN_VALUE) {

				throw new org.apache.axis2.databinding.ADBException(
						"CustomerId cannot be null!!");

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localCustomerId));
			}

			xmlWriter.writeEndElement();

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "UserId", xmlWriter);

			if (localUserId == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"UserId cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localUserId);

			}

			xmlWriter.writeEndElement();

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "Password", xmlWriter);

			if (localPassword == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"Password cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localPassword);

			}

			xmlWriter.writeEndElement();

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "MemberNumber", xmlWriter);

			if (localMemberNumber == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"MemberNumber cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localMemberNumber);

			}

			xmlWriter.writeEndElement();

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "SecurityCode", xmlWriter);

			if (localSecurityCode == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"SecurityCode cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localSecurityCode);

			}

			xmlWriter.writeEndElement();

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "ProductCode", xmlWriter);

			if (localProductCode == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"ProductCode cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localProductCode);

			}

			xmlWriter.writeEndElement();

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "ProductVersion", xmlWriter);

			if (localProductVersion == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"ProductVersion cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localProductVersion);

			}

			xmlWriter.writeEndElement();

			if (localReportFormat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ReportFormat cannot be null!!");
			}
			localReportFormat.serialize(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"ReportFormat"), xmlWriter);
			if (localCustRefFieldTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CustRefField", xmlWriter);

				if (localCustRefField == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CustRefField cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localCustRefField);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"CustomerId"));

			elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localCustomerId));

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"UserId"));

			if (localUserId != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localUserId));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"UserId cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"Password"));

			if (localPassword != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localPassword));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"Password cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"MemberNumber"));

			if (localMemberNumber != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localMemberNumber));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"MemberNumber cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"SecurityCode"));

			if (localSecurityCode != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSecurityCode));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"SecurityCode cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"ProductCode"));

			if (localProductCode != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localProductCode));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"ProductCode cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"ProductVersion"));

			if (localProductVersion != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localProductVersion));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"ProductVersion cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"ReportFormat"));

			if (localReportFormat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ReportFormat cannot be null!!");
			}
			elementList.add(localReportFormat);
			if (localCustRefFieldTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CustRefField"));

				if (localCustRefField != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCustRefField));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CustRefField cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static RequestHeaderType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				RequestHeaderType object = new RequestHeaderType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"RequestHeaderType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (RequestHeaderType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CustomerId").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CustomerId"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCustomerId(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"UserId").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "UserId"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setUserId(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Password").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Password"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPassword(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MemberNumber").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MemberNumber"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMemberNumber(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"SecurityCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "SecurityCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSecurityCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ProductCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ProductCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setProductCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ProductVersion").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ProductVersion"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setProductVersion(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ReportFormat").equals(reader.getName())) {

						object.setReportFormat(ReportFormatOptions.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CustRefField").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CustRefField"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCustRefField(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VidVoterResponse implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * vidVoterResponse Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for VoterRequest
		 */

		protected VoterRequest localVoterRequest;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVoterRequestTracker = false;

		public boolean isVoterRequestSpecified() {
			return localVoterRequestTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return VoterRequest
		 */
		public VoterRequest getVoterRequest() {
			return localVoterRequest;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VoterRequest
		 */
		public void setVoterRequest(VoterRequest param) {
			localVoterRequestTracker = param != null;

			this.localVoterRequest = param;

		}

		/**
		 * field for VoterResponse
		 */

		protected VoterResponse localVoterResponse;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVoterResponseTracker = false;

		public boolean isVoterResponseSpecified() {
			return localVoterResponseTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return VoterResponse
		 */
		public VoterResponse getVoterResponse() {
			return localVoterResponse;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VoterResponse
		 */
		public void setVoterResponse(VoterResponse param) {
			localVoterResponseTracker = param != null;

			this.localVoterResponse = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":vidVoterResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "vidVoterResponse", xmlWriter);
				}

			}
			if (localVoterRequestTracker) {
				if (localVoterRequest == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"voterRequest cannot be null!!");
				}
				localVoterRequest.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"voterRequest"), xmlWriter);
			}
			if (localVoterResponseTracker) {
				if (localVoterResponse == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"voterResponse cannot be null!!");
				}
				localVoterResponse.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"voterResponse"), xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localVoterRequestTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"voterRequest"));

				if (localVoterRequest == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"voterRequest cannot be null!!");
				}
				elementList.add(localVoterRequest);
			}
			if (localVoterResponseTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"voterResponse"));

				if (localVoterResponse == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"voterResponse cannot be null!!");
				}
				elementList.add(localVoterResponse);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static VidVoterResponse parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				VidVoterResponse object = new VidVoterResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"vidVoterResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (VidVoterResponse) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"voterRequest").equals(reader.getName())) {

						object.setVoterRequest(VoterRequest.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"voterResponse").equals(reader.getName())) {

						object.setVoterResponse(VoterResponse.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GenderOptions implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"GenderOptions", "ns1");

		/**
		 * field for GenderOptions
		 */

		protected java.lang.String localGenderOptions;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected GenderOptions(java.lang.String value, boolean isRegisterValue) {
			localGenderOptions = value;
			if (isRegisterValue) {

				_table_.put(localGenderOptions, this);

			}

		}

		public static final java.lang.String _value1 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("1");

		public static final java.lang.String _value2 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("2");

		public static final GenderOptions value1 = new GenderOptions(_value1,
				true);

		public static final GenderOptions value2 = new GenderOptions(_value2,
				true);

		public java.lang.String getValue() {
			return localGenderOptions;
		}

		public boolean equals(java.lang.Object obj) {
			return (obj == this);
		}

		public int hashCode() {
			return toString().hashCode();
		}

		public java.lang.String toString() {

			return localGenderOptions.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":GenderOptions",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "GenderOptions", xmlWriter);
				}
			}

			if (localGenderOptions == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"GenderOptions cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localGenderOptions);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localGenderOptions) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static GenderOptions fromValue(java.lang.String value)
					throws java.lang.IllegalArgumentException {
				GenderOptions enumeration = (GenderOptions)

				_table_.get(value);

				if ((enumeration == null)
						&& !((value == null) || (value.equals("")))) {
					throw new java.lang.IllegalArgumentException();
				}
				return enumeration;
			}

			public static GenderOptions fromString(java.lang.String value,
					java.lang.String namespaceURI)
					throws java.lang.IllegalArgumentException {
				try {

					return fromValue(org.apache.axis2.databinding.utils.ConverterUtil
							.convertToString(value));

				} catch (java.lang.Exception e) {
					throw new java.lang.IllegalArgumentException();
				}
			}

			public static GenderOptions fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return GenderOptions.Factory.fromString(content,
							namespaceUri);
				} else {
					return GenderOptions.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GenderOptions parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				GenderOptions object = null;
				// initialize a hash map to keep values
				java.util.Map attributeMap = new java.util.HashMap();
				java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							nillableValue = reader
									.getAttributeValue(
											"http://www.w3.org/2001/XMLSchema-instance",
											"nil");
							if ("true".equals(nillableValue)
									|| "1".equals(nillableValue)) {
								throw new org.apache.axis2.databinding.ADBException(
										"The element: " + "GenderOptions"
												+ "  cannot be null");
							}

							java.lang.String content = reader.getElementText();

							if (content.indexOf(":") > 0) {
								// this seems to be a Qname so find the
								// namespace and send
								prefix = content.substring(0,
										content.indexOf(":"));
								namespaceuri = reader.getNamespaceURI(prefix);
								object = GenderOptions.Factory.fromString(
										content, namespaceuri);
							} else {
								// this seems to be not a qname send and empty
								// namespace incase of it is
								// check is done in fromString method
								object = GenderOptions.Factory.fromString(
										content, "");
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GenderTypeCode implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"GenderTypeCode", "ns1");

		/**
		 * field for GenderTypeCode
		 */

		protected java.lang.String localGenderTypeCode;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected GenderTypeCode(java.lang.String value, boolean isRegisterValue) {
			localGenderTypeCode = value;
			if (isRegisterValue) {

				_table_.put(localGenderTypeCode, this);

			}

		}

		public static final java.lang.String _Male = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Male");

		public static final java.lang.String _Female = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Female");

		public static final java.lang.String _M = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("M");

		public static final java.lang.String _F = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("F");

		public static final GenderTypeCode Male = new GenderTypeCode(_Male,
				true);

		public static final GenderTypeCode Female = new GenderTypeCode(_Female,
				true);

		public static final GenderTypeCode M = new GenderTypeCode(_M, true);

		public static final GenderTypeCode F = new GenderTypeCode(_F, true);

		public java.lang.String getValue() {
			return localGenderTypeCode;
		}

		public boolean equals(java.lang.Object obj) {
			return (obj == this);
		}

		public int hashCode() {
			return toString().hashCode();
		}

		public java.lang.String toString() {

			return localGenderTypeCode.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":GenderTypeCode",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "GenderTypeCode", xmlWriter);
				}
			}

			if (localGenderTypeCode == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"GenderTypeCode cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localGenderTypeCode);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localGenderTypeCode) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static GenderTypeCode fromValue(java.lang.String value)
					throws java.lang.IllegalArgumentException {
				GenderTypeCode enumeration = (GenderTypeCode)

				_table_.get(value);

				if ((enumeration == null)
						&& !((value == null) || (value.equals("")))) {
					throw new java.lang.IllegalArgumentException();
				}
				return enumeration;
			}

			public static GenderTypeCode fromString(java.lang.String value,
					java.lang.String namespaceURI)
					throws java.lang.IllegalArgumentException {
				try {

					return fromValue(org.apache.axis2.databinding.utils.ConverterUtil
							.convertToString(value));

				} catch (java.lang.Exception e) {
					throw new java.lang.IllegalArgumentException();
				}
			}

			public static GenderTypeCode fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return GenderTypeCode.Factory.fromString(content,
							namespaceUri);
				} else {
					return GenderTypeCode.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GenderTypeCode parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				GenderTypeCode object = null;
				// initialize a hash map to keep values
				java.util.Map attributeMap = new java.util.HashMap();
				java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							nillableValue = reader
									.getAttributeValue(
											"http://www.w3.org/2001/XMLSchema-instance",
											"nil");
							if ("true".equals(nillableValue)
									|| "1".equals(nillableValue)) {
								throw new org.apache.axis2.databinding.ADBException(
										"The element: " + "GenderTypeCode"
												+ "  cannot be null");
							}

							java.lang.String content = reader.getElementText();

							if (content.indexOf(":") > 0) {
								// this seems to be a Qname so find the
								// namespace and send
								prefix = content.substring(0,
										content.indexOf(":"));
								namespaceuri = reader.getNamespaceURI(prefix);
								object = GenderTypeCode.Factory.fromString(
										content, namespaceuri);
							} else {
								// this seems to be not a qname send and empty
								// namespace incase of it is
								// check is done in fromString method
								object = GenderTypeCode.Factory.fromString(
										content, "");
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddrLine1_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AddrLine1_type0", "ns1");

		/**
		 * field for AddrLine1_type0
		 */

		protected java.lang.String localAddrLine1_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAddrLine1_type0() {
			return localAddrLine1_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AddrLine1_type0
		 */
		public void setAddrLine1_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 220)) {
				this.localAddrLine1_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localAddrLine1_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AddrLine1_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AddrLine1_type0", xmlWriter);
				}
			}

			if (localAddrLine1_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AddrLine1_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAddrLine1_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAddrLine1_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AddrLine1_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				AddrLine1_type0 returnValue = new AddrLine1_type0();

				returnValue
						.setAddrLine1_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static AddrLine1_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AddrLine1_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return AddrLine1_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AddrLine1_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AddrLine1_type0 object = new AddrLine1_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "AddrLine1_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setAddrLine1_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ReportFormatOptions implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"ReportFormatOptions", "ns1");

		/**
		 * field for ReportFormatOptions
		 */

		protected java.lang.String localReportFormatOptions;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected ReportFormatOptions(java.lang.String value,
				boolean isRegisterValue) {
			localReportFormatOptions = value;
			if (isRegisterValue) {

				_table_.put(localReportFormatOptions, this);

			}

		}

		public static final java.lang.String _XML = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("XML");

		public static final ReportFormatOptions XML = new ReportFormatOptions(
				_XML, true);

		public java.lang.String getValue() {
			return localReportFormatOptions;
		}

		public boolean equals(java.lang.Object obj) {
			return (obj == this);
		}

		public int hashCode() {
			return toString().hashCode();
		}

		public java.lang.String toString() {

			return localReportFormatOptions.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":ReportFormatOptions",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ReportFormatOptions", xmlWriter);
				}
			}

			if (localReportFormatOptions == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"ReportFormatOptions cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localReportFormatOptions);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReportFormatOptions) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static ReportFormatOptions fromValue(java.lang.String value)
					throws java.lang.IllegalArgumentException {
				ReportFormatOptions enumeration = (ReportFormatOptions)

				_table_.get(value);

				if ((enumeration == null)
						&& !((value == null) || (value.equals("")))) {
					throw new java.lang.IllegalArgumentException();
				}
				return enumeration;
			}

			public static ReportFormatOptions fromString(
					java.lang.String value, java.lang.String namespaceURI)
					throws java.lang.IllegalArgumentException {
				try {

					return fromValue(org.apache.axis2.databinding.utils.ConverterUtil
							.convertToString(value));

				} catch (java.lang.Exception e) {
					throw new java.lang.IllegalArgumentException();
				}
			}

			public static ReportFormatOptions fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return ReportFormatOptions.Factory.fromString(content,
							namespaceUri);
				} else {
					return ReportFormatOptions.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ReportFormatOptions parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ReportFormatOptions object = null;
				// initialize a hash map to keep values
				java.util.Map attributeMap = new java.util.HashMap();
				java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							nillableValue = reader
									.getAttributeValue(
											"http://www.w3.org/2001/XMLSchema-instance",
											"nil");
							if ("true".equals(nillableValue)
									|| "1".equals(nillableValue)) {
								throw new org.apache.axis2.databinding.ADBException(
										"The element: " + "ReportFormatOptions"
												+ "  cannot be null");
							}

							java.lang.String content = reader.getElementText();

							if (content.indexOf(":") > 0) {
								// this seems to be a Qname so find the
								// namespace and send
								prefix = content.substring(0,
										content.indexOf(":"));
								namespaceuri = reader.getNamespaceURI(prefix);
								object = ReportFormatOptions.Factory
										.fromString(content, namespaceuri);
							} else {
								// this seems to be not a qname send and empty
								// namespace incase of it is
								// check is done in fromString method
								object = ReportFormatOptions.Factory
										.fromString(content, "");
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AliasNameInfoType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * AliasNameInfoType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AliasName
		 */

		protected java.lang.String localAliasName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAliasNameTracker = false;

		public boolean isAliasNameSpecified() {
			return localAliasNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAliasName() {
			return localAliasName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AliasName
		 */
		public void setAliasName(java.lang.String param) {
			localAliasNameTracker = param != null;

			this.localAliasName = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AliasNameInfoType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AliasNameInfoType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}
			if (localAliasNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AliasName", xmlWriter);

				if (localAliasName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AliasName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAliasName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAliasNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AliasName"));

				if (localAliasName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAliasName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AliasName cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AliasNameInfoType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AliasNameInfoType object = new AliasNameInfoType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"AliasNameInfoType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (AliasNameInfoType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AliasName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AliasName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAliasName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class EmailAddressType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * EmailAddressType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for EmailAddress
		 */

		protected java.lang.String localEmailAddress;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getEmailAddress() {
			return localEmailAddress;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            EmailAddress
		 */
		public void setEmailAddress(java.lang.String param) {

			this.localEmailAddress = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":EmailAddressType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "EmailAddressType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "EmailAddress", xmlWriter);

			if (localEmailAddress == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"EmailAddress cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localEmailAddress);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"EmailAddress"));

			if (localEmailAddress != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localEmailAddress));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"EmailAddress cannot be null!!");
			}

			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static EmailAddressType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				EmailAddressType object = new EmailAddressType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"EmailAddressType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (EmailAddressType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"EmailAddress").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "EmailAddress"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setEmailAddress(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddrLine1_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AddrLine1_type1", "ns1");

		/**
		 * field for AddrLine1_type0
		 */

		protected java.lang.String localAddrLine1_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAddrLine1_type0() {
			return localAddrLine1_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AddrLine1_type0
		 */
		public void setAddrLine1_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 220)) {
				this.localAddrLine1_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localAddrLine1_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AddrLine1_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AddrLine1_type1", xmlWriter);
				}
			}

			if (localAddrLine1_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AddrLine1_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAddrLine1_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAddrLine1_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AddrLine1_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				AddrLine1_type1 returnValue = new AddrLine1_type1();

				returnValue
						.setAddrLine1_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static AddrLine1_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AddrLine1_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return AddrLine1_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AddrLine1_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AddrLine1_type1 object = new AddrLine1_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "AddrLine1_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setAddrLine1_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddressType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * AddressType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Address
		 */

		protected java.lang.String localAddress;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAddressTracker = false;

		public boolean isAddressSpecified() {
			return localAddressTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAddress() {
			return localAddress;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Address
		 */
		public void setAddress(java.lang.String param) {
			localAddressTracker = param != null;

			this.localAddress = param;

		}

		/**
		 * field for State
		 */

		protected java.lang.String localState;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localStateTracker = false;

		public boolean isStateSpecified() {
			return localStateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getState() {
			return localState;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            State
		 */
		public void setState(java.lang.String param) {
			localStateTracker = param != null;

			this.localState = param;

		}

		/**
		 * field for Postal
		 */

		protected int localPostal;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPostalTracker = false;

		public boolean isPostalSpecified() {
			return localPostalTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getPostal() {
			return localPostal;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Postal
		 */
		public void setPostal(int param) {

			// setting primitive attribute tracker to true
			localPostalTracker = param != java.lang.Integer.MIN_VALUE;

			this.localPostal = param;

		}

		/**
		 * field for Type
		 */

		protected java.lang.String localType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTypeTracker = false;

		public boolean isTypeSpecified() {
			return localTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getType() {
			return localType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Type
		 */
		public void setType(java.lang.String param) {
			localTypeTracker = param != null;

			this.localType = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AddressType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AddressType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}
			if (localAddressTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Address", xmlWriter);

				if (localAddress == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Address cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAddress);

				}

				xmlWriter.writeEndElement();
			}
			if (localStateTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "State", xmlWriter);

				if (localState == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"State cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localState);

				}

				xmlWriter.writeEndElement();
			}
			if (localPostalTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Postal", xmlWriter);

				if (localPostal == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"Postal cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPostal));
				}

				xmlWriter.writeEndElement();
			}
			if (localTypeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Type", xmlWriter);

				if (localType == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Type cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localType);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAddressTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Address"));

				if (localAddress != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAddress));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Address cannot be null!!");
				}
			}
			if (localStateTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"State"));

				if (localState != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localState));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"State cannot be null!!");
				}
			}
			if (localPostalTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Postal"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localPostal));
			}
			if (localTypeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Type"));

				if (localType != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localType));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Type cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AddressType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AddressType object = new AddressType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"AddressType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (AddressType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Address").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Address"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAddress(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"State").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "State"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setState(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Postal").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Postal"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPostal(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setPostal(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Type").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Type"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setType(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class OtherKeyIndType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * OtherKeyIndType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AgeOfOldestTrade
		 */

		protected java.lang.String localAgeOfOldestTrade;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAgeOfOldestTradeTracker = false;

		public boolean isAgeOfOldestTradeSpecified() {
			return localAgeOfOldestTradeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAgeOfOldestTrade() {
			return localAgeOfOldestTrade;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AgeOfOldestTrade
		 */
		public void setAgeOfOldestTrade(java.lang.String param) {
			localAgeOfOldestTradeTracker = param != null;

			this.localAgeOfOldestTrade = param;

		}

		/**
		 * field for NumberOfOpenTrades
		 */

		protected java.lang.String localNumberOfOpenTrades;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumberOfOpenTrades() {
			return localNumberOfOpenTrades;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NumberOfOpenTrades
		 */
		public void setNumberOfOpenTrades(java.lang.String param) {

			this.localNumberOfOpenTrades = param;

		}

		/**
		 * field for AllLinesEVERWritten
		 */

		protected java.lang.String localAllLinesEVERWritten;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAllLinesEVERWrittenTracker = false;

		public boolean isAllLinesEVERWrittenSpecified() {
			return localAllLinesEVERWrittenTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAllLinesEVERWritten() {
			return localAllLinesEVERWritten;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AllLinesEVERWritten
		 */
		public void setAllLinesEVERWritten(java.lang.String param) {
			localAllLinesEVERWrittenTracker = param != null;

			this.localAllLinesEVERWritten = param;

		}

		/**
		 * field for AllLinesEVERWrittenIn9Months
		 */

		protected java.lang.String localAllLinesEVERWrittenIn9Months;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAllLinesEVERWrittenIn9MonthsTracker = false;

		public boolean isAllLinesEVERWrittenIn9MonthsSpecified() {
			return localAllLinesEVERWrittenIn9MonthsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAllLinesEVERWrittenIn9Months() {
			return localAllLinesEVERWrittenIn9Months;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AllLinesEVERWrittenIn9Months
		 */
		public void setAllLinesEVERWrittenIn9Months(java.lang.String param) {
			localAllLinesEVERWrittenIn9MonthsTracker = param != null;

			this.localAllLinesEVERWrittenIn9Months = param;

		}

		/**
		 * field for AllLinesEVERWrittenIn6Months
		 */

		protected java.lang.String localAllLinesEVERWrittenIn6Months;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAllLinesEVERWrittenIn6MonthsTracker = false;

		public boolean isAllLinesEVERWrittenIn6MonthsSpecified() {
			return localAllLinesEVERWrittenIn6MonthsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAllLinesEVERWrittenIn6Months() {
			return localAllLinesEVERWrittenIn6Months;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AllLinesEVERWrittenIn6Months
		 */
		public void setAllLinesEVERWrittenIn6Months(java.lang.String param) {
			localAllLinesEVERWrittenIn6MonthsTracker = param != null;

			this.localAllLinesEVERWrittenIn6Months = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":OtherKeyIndType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "OtherKeyIndType", xmlWriter);
				}

			}
			if (localAgeOfOldestTradeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AgeOfOldestTrade",
						xmlWriter);

				if (localAgeOfOldestTrade == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AgeOfOldestTrade cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAgeOfOldestTrade);

				}

				xmlWriter.writeEndElement();
			}
			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "NumberOfOpenTrades", xmlWriter);

			if (localNumberOfOpenTrades == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"NumberOfOpenTrades cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localNumberOfOpenTrades);

			}

			xmlWriter.writeEndElement();
			if (localAllLinesEVERWrittenTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AllLinesEVERWritten",
						xmlWriter);

				if (localAllLinesEVERWritten == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AllLinesEVERWritten cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAllLinesEVERWritten);

				}

				xmlWriter.writeEndElement();
			}
			if (localAllLinesEVERWrittenIn9MonthsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace,
						"AllLinesEVERWrittenIn9Months", xmlWriter);

				if (localAllLinesEVERWrittenIn9Months == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AllLinesEVERWrittenIn9Months cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(localAllLinesEVERWrittenIn9Months);

				}

				xmlWriter.writeEndElement();
			}
			if (localAllLinesEVERWrittenIn6MonthsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace,
						"AllLinesEVERWrittenIn6Months", xmlWriter);

				if (localAllLinesEVERWrittenIn6Months == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AllLinesEVERWrittenIn6Months cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(localAllLinesEVERWrittenIn6Months);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAgeOfOldestTradeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AgeOfOldestTrade"));

				if (localAgeOfOldestTrade != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAgeOfOldestTrade));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AgeOfOldestTrade cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"NumberOfOpenTrades"));

			if (localNumberOfOpenTrades != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNumberOfOpenTrades));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"NumberOfOpenTrades cannot be null!!");
			}
			if (localAllLinesEVERWrittenTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AllLinesEVERWritten"));

				if (localAllLinesEVERWritten != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAllLinesEVERWritten));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AllLinesEVERWritten cannot be null!!");
				}
			}
			if (localAllLinesEVERWrittenIn9MonthsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AllLinesEVERWrittenIn9Months"));

				if (localAllLinesEVERWrittenIn9Months != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAllLinesEVERWrittenIn9Months));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AllLinesEVERWrittenIn9Months cannot be null!!");
				}
			}
			if (localAllLinesEVERWrittenIn6MonthsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AllLinesEVERWrittenIn6Months"));

				if (localAllLinesEVERWrittenIn6Months != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAllLinesEVERWrittenIn6Months));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AllLinesEVERWrittenIn6Months cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static OtherKeyIndType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				OtherKeyIndType object = new OtherKeyIndType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"OtherKeyIndType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (OtherKeyIndType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AgeOfOldestTrade")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AgeOfOldestTrade"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAgeOfOldestTrade(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NumberOfOpenTrades").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NumberOfOpenTrades"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNumberOfOpenTrades(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AllLinesEVERWritten").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AllLinesEVERWritten"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAllLinesEVERWritten(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AllLinesEVERWrittenIn9Months")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: "
											+ "AllLinesEVERWrittenIn9Months"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAllLinesEVERWrittenIn9Months(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AllLinesEVERWrittenIn6Months")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: "
											+ "AllLinesEVERWrittenIn6Months"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAllLinesEVERWrittenIn6Months(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddressLine_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AddressLine_type1", "ns1");

		/**
		 * field for AddressLine_type0
		 */

		protected java.lang.String localAddressLine_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAddressLine_type0() {
			return localAddressLine_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AddressLine_type0
		 */
		public void setAddressLine_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 220)) {
				this.localAddressLine_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localAddressLine_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AddressLine_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AddressLine_type1", xmlWriter);
				}
			}

			if (localAddressLine_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AddressLine_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAddressLine_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAddressLine_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AddressLine_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				AddressLine_type1 returnValue = new AddressLine_type1();

				returnValue
						.setAddressLine_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static AddressLine_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AddressLine_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return AddressLine_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AddressLine_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AddressLine_type1 object = new AddressLine_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "AddressLine_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setAddressLine_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class IDType implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * IDType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for IdNumber
		 */

		protected java.lang.String localIdNumber;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getIdNumber() {
			return localIdNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            IdNumber
		 */
		public void setIdNumber(java.lang.String param) {

			this.localIdNumber = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":IDType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "IDType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "IdNumber", xmlWriter);

			if (localIdNumber == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"IdNumber cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localIdNumber);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"IdNumber"));

			if (localIdNumber != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localIdNumber));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"IdNumber cannot be null!!");
			}

			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static IDType parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				IDType object = new IDType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"IDType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (IDType) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"IdNumber").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "IdNumber"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setIdNumber(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ConsumerDisputes implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"ConsumerDisputes", "ns1");

		/**
		 * field for ConsumerDisputes
		 */

		protected ConsumerDisputesType localConsumerDisputes;

		/**
		 * Auto generated getter method
		 * 
		 * @return ConsumerDisputesType
		 */
		public ConsumerDisputesType getConsumerDisputes() {
			return localConsumerDisputes;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ConsumerDisputes
		 */
		public void setConsumerDisputes(ConsumerDisputesType param) {

			this.localConsumerDisputes = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			if (localConsumerDisputes == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ConsumerDisputes cannot be null!");
			}
			localConsumerDisputes.serialize(MY_QNAME, xmlWriter);

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return localConsumerDisputes.getPullParser(MY_QNAME);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ConsumerDisputes parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ConsumerDisputes object = new ConsumerDisputes();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"ConsumerDisputes").equals(reader
											.getName())) {

								object.setConsumerDisputes(ConsumerDisputesType.Factory
										.parse(reader));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MobilePhone_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"MobilePhone_type1", "ns1");

		/**
		 * field for MobilePhone_type1
		 */

		protected java.lang.String localMobilePhone_type1;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMobilePhone_type1() {
			return localMobilePhone_type1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MobilePhone_type1
		 */
		public void setMobilePhone_type1(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 20)) {
				this.localMobilePhone_type1 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localMobilePhone_type1.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":MobilePhone_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "MobilePhone_type1", xmlWriter);
				}
			}

			if (localMobilePhone_type1 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"MobilePhone_type1 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localMobilePhone_type1);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMobilePhone_type1) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static MobilePhone_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				MobilePhone_type1 returnValue = new MobilePhone_type1();

				returnValue
						.setMobilePhone_type1(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static MobilePhone_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return MobilePhone_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return MobilePhone_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static MobilePhone_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				MobilePhone_type1 object = new MobilePhone_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "MobilePhone_type1"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setMobilePhone_type1(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MobilePhone_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"MobilePhone_type0", "ns1");

		/**
		 * field for MobilePhone_type0
		 */

		protected java.lang.String localMobilePhone_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMobilePhone_type0() {
			return localMobilePhone_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MobilePhone_type0
		 */
		public void setMobilePhone_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 20)) {
				this.localMobilePhone_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localMobilePhone_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":MobilePhone_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "MobilePhone_type0", xmlWriter);
				}
			}

			if (localMobilePhone_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"MobilePhone_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localMobilePhone_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMobilePhone_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static MobilePhone_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				MobilePhone_type0 returnValue = new MobilePhone_type0();

				returnValue
						.setMobilePhone_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static MobilePhone_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return MobilePhone_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return MobilePhone_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static MobilePhone_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				MobilePhone_type0 object = new MobilePhone_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "MobilePhone_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setMobilePhone_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Locality2_type3 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Locality2_type3", "ns1");

		/**
		 * field for Locality2_type2
		 */

		protected java.lang.String localLocality2_type2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLocality2_type2() {
			return localLocality2_type2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality2_type2
		 */
		public void setLocality2_type2(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localLocality2_type2 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localLocality2_type2.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Locality2_type3",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Locality2_type3", xmlWriter);
				}
			}

			if (localLocality2_type2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Locality2_type2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLocality2_type2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLocality2_type2) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Locality2_type3 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Locality2_type3 returnValue = new Locality2_type3();

				returnValue
						.setLocality2_type2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Locality2_type3 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Locality2_type3.Factory.fromString(content,
							namespaceUri);
				} else {
					return Locality2_type3.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Locality2_type3 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Locality2_type3 object = new Locality2_type3();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Locality2_type2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLocality2_type2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PhoneType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * PhoneType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for CountryCode
		 */

		protected java.lang.String localCountryCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCountryCodeTracker = false;

		public boolean isCountryCodeSpecified() {
			return localCountryCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCountryCode() {
			return localCountryCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CountryCode
		 */
		public void setCountryCode(java.lang.String param) {
			localCountryCodeTracker = param != null;

			this.localCountryCode = param;

		}

		/**
		 * field for AreaCode
		 */

		protected java.lang.String localAreaCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAreaCodeTracker = false;

		public boolean isAreaCodeSpecified() {
			return localAreaCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAreaCode() {
			return localAreaCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AreaCode
		 */
		public void setAreaCode(java.lang.String param) {
			localAreaCodeTracker = param != null;

			this.localAreaCode = param;

		}

		/**
		 * field for Number
		 */

		protected java.lang.String localNumber;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumber() {
			return localNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Number
		 */
		public void setNumber(java.lang.String param) {

			this.localNumber = param;

		}

		/**
		 * field for PhoneNumberExtension
		 */

		protected java.lang.String localPhoneNumberExtension;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPhoneNumberExtensionTracker = false;

		public boolean isPhoneNumberExtensionSpecified() {
			return localPhoneNumberExtensionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPhoneNumberExtension() {
			return localPhoneNumberExtension;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PhoneNumberExtension
		 */
		public void setPhoneNumberExtension(java.lang.String param) {
			localPhoneNumberExtensionTracker = param != null;

			this.localPhoneNumberExtension = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 * field for TypeCode This was an Attribute!
		 */

		protected PhoneTypeCode localTypeCode;

		/**
		 * Auto generated getter method
		 * 
		 * @return PhoneTypeCode
		 */
		public PhoneTypeCode getTypeCode() {
			return localTypeCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TypeCode
		 */
		public void setTypeCode(PhoneTypeCode param) {

			this.localTypeCode = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":PhoneType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "PhoneType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}

			if (localTypeCode != null) {
				writeAttribute("", "typeCode", localTypeCode.toString(),
						xmlWriter);
			}
			if (localCountryCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CountryCode", xmlWriter);

				if (localCountryCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CountryCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localCountryCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localAreaCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AreaCode", xmlWriter);

				if (localAreaCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AreaCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAreaCode);

				}

				xmlWriter.writeEndElement();
			}
			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "Number", xmlWriter);

			if (localNumber == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"Number cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localNumber);

			}

			xmlWriter.writeEndElement();
			if (localPhoneNumberExtensionTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "PhoneNumberExtension",
						xmlWriter);

				if (localPhoneNumberExtension == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"PhoneNumberExtension cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPhoneNumberExtension);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localCountryCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CountryCode"));

				if (localCountryCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCountryCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CountryCode cannot be null!!");
				}
			}
			if (localAreaCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AreaCode"));

				if (localAreaCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAreaCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AreaCode cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"Number"));

			if (localNumber != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNumber));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"Number cannot be null!!");
			}
			if (localPhoneNumberExtensionTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PhoneNumberExtension"));

				if (localPhoneNumberExtension != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPhoneNumberExtension));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"PhoneNumberExtension cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			attribList.add(new javax.xml.namespace.QName("", "typeCode"));

			attribList.add(localTypeCode.toString());

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static PhoneType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				PhoneType object = new PhoneType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"PhoneType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (PhoneType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					// handle attribute "typeCode"
					java.lang.String tempAttribTypeCode =

					reader.getAttributeValue(null, "typeCode");

					if (tempAttribTypeCode != null) {
						java.lang.String content = tempAttribTypeCode;

						object.setTypeCode(PhoneTypeCode.Factory.fromString(
								reader, tempAttribTypeCode));

					} else {

					}
					handledAttributes.add("typeCode");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CountryCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CountryCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCountryCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AreaCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AreaCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAreaCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Number").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Number"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNumber(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PhoneNumberExtension").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "PhoneNumberExtension"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPhoneNumberExtension(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Locality2_type2 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Locality2_type2", "ns1");

		/**
		 * field for Locality2_type2
		 */

		protected java.lang.String localLocality2_type2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLocality2_type2() {
			return localLocality2_type2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality2_type2
		 */
		public void setLocality2_type2(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localLocality2_type2 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localLocality2_type2.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Locality2_type2",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Locality2_type2", xmlWriter);
				}
			}

			if (localLocality2_type2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Locality2_type2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLocality2_type2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLocality2_type2) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Locality2_type2 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Locality2_type2 returnValue = new Locality2_type2();

				returnValue
						.setLocality2_type2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Locality2_type2 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Locality2_type2.Factory.fromString(content,
							namespaceUri);
				} else {
					return Locality2_type2.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Locality2_type2 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Locality2_type2 object = new Locality2_type2();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Locality2_type2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLocality2_type2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PANId_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"PANId_type0", "ns1");

		/**
		 * field for PANId_type0
		 */

		protected java.lang.String localPANId_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPANId_type0() {
			return localPANId_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PANId_type0
		 */
		public void setPANId_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param)
					.matches(
							"([a-zA-Z]{3}[ABCFHJLPRabcfhjlpr]{1}[a-zA-Z]{1}[0-9]{4}[a-zA-Z])+")) {
				this.localPANId_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localPANId_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":PANId_type0", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "PANId_type0", xmlWriter);
				}
			}

			if (localPANId_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"PANId_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localPANId_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPANId_type0) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static PANId_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				PANId_type0 returnValue = new PANId_type0();

				returnValue
						.setPANId_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static PANId_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return PANId_type0.Factory
							.fromString(content, namespaceUri);
				} else {
					return PANId_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static PANId_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				PANId_type0 object = new PANId_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "PANId_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setPANId_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddressCodeType implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AddressCodeType", "ns1");

		/**
		 * field for AddressCodeType
		 */

		protected java.lang.String localAddressCodeType;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected AddressCodeType(java.lang.String value,
				boolean isRegisterValue) {
			localAddressCodeType = value;
			if (isRegisterValue) {

				_table_.put(localAddressCodeType, this);

			}

		}

		public static final java.lang.String _P = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("P");

		public static final java.lang.String _C = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("C");

		public static final java.lang.String _O = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("O");

		public static final java.lang.String _X = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("X");

		public static final AddressCodeType P = new AddressCodeType(_P, true);

		public static final AddressCodeType C = new AddressCodeType(_C, true);

		public static final AddressCodeType O = new AddressCodeType(_O, true);

		public static final AddressCodeType X = new AddressCodeType(_X, true);

		public java.lang.String getValue() {
			return localAddressCodeType;
		}

		public boolean equals(java.lang.Object obj) {
			return (obj == this);
		}

		public int hashCode() {
			return toString().hashCode();
		}

		public java.lang.String toString() {

			return localAddressCodeType.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AddressCodeType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AddressCodeType", xmlWriter);
				}
			}

			if (localAddressCodeType == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AddressCodeType cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAddressCodeType);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAddressCodeType) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AddressCodeType fromValue(java.lang.String value)
					throws java.lang.IllegalArgumentException {
				AddressCodeType enumeration = (AddressCodeType)

				_table_.get(value);

				if ((enumeration == null)
						&& !((value == null) || (value.equals("")))) {
					throw new java.lang.IllegalArgumentException();
				}
				return enumeration;
			}

			public static AddressCodeType fromString(java.lang.String value,
					java.lang.String namespaceURI)
					throws java.lang.IllegalArgumentException {
				try {

					return fromValue(org.apache.axis2.databinding.utils.ConverterUtil
							.convertToString(value));

				} catch (java.lang.Exception e) {
					throw new java.lang.IllegalArgumentException();
				}
			}

			public static AddressCodeType fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AddressCodeType.Factory.fromString(content,
							namespaceUri);
				} else {
					return AddressCodeType.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AddressCodeType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AddressCodeType object = null;
				// initialize a hash map to keep values
				java.util.Map attributeMap = new java.util.HashMap();
				java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							nillableValue = reader
									.getAttributeValue(
											"http://www.w3.org/2001/XMLSchema-instance",
											"nil");
							if ("true".equals(nillableValue)
									|| "1".equals(nillableValue)) {
								throw new org.apache.axis2.databinding.ADBException(
										"The element: " + "AddressCodeType"
												+ "  cannot be null");
							}

							java.lang.String content = reader.getElementText();

							if (content.indexOf(":") > 0) {
								// this seems to be a Qname so find the
								// namespace and send
								prefix = content.substring(0,
										content.indexOf(":"));
								namespaceuri = reader.getNamespaceURI(prefix);
								object = AddressCodeType.Factory.fromString(
										content, namespaceuri);
							} else {
								// this seems to be not a qname send and empty
								// namespace incase of it is
								// check is done in fromString method
								object = AddressCodeType.Factory.fromString(
										content, "");
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AddressLine_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AddressLine_type0", "ns1");

		/**
		 * field for AddressLine_type0
		 */

		protected java.lang.String localAddressLine_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAddressLine_type0() {
			return localAddressLine_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AddressLine_type0
		 */
		public void setAddressLine_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 220)) {
				this.localAddressLine_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localAddressLine_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AddressLine_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AddressLine_type0", xmlWriter);
				}
			}

			if (localAddressLine_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AddressLine_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAddressLine_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAddressLine_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AddressLine_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				AddressLine_type0 returnValue = new AddressLine_type0();

				returnValue
						.setAddressLine_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static AddressLine_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AddressLine_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return AddressLine_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AddressLine_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AddressLine_type0 object = new AddressLine_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "AddressLine_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setAddressLine_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryRequestType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * InquiryRequestType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for RequestHeader
		 */

		protected RequestHeaderType localRequestHeader;

		/**
		 * Auto generated getter method
		 * 
		 * @return RequestHeaderType
		 */
		public RequestHeaderType getRequestHeader() {
			return localRequestHeader;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RequestHeader
		 */
		public void setRequestHeader(RequestHeaderType param) {

			this.localRequestHeader = param;

		}

		/**
		 * field for RequestAccountDetails
		 */

		protected AccountInputType localRequestAccountDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRequestAccountDetailsTracker = false;

		public boolean isRequestAccountDetailsSpecified() {
			return localRequestAccountDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountInputType
		 */
		public AccountInputType getRequestAccountDetails() {
			return localRequestAccountDetails;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RequestAccountDetails
		 */
		public void setRequestAccountDetails(AccountInputType param) {
			localRequestAccountDetailsTracker = param != null;

			this.localRequestAccountDetails = param;

		}

		/**
		 * field for InquiryCommonAccountDetails
		 */

		protected InquiryCommonAccountDetailsType localInquiryCommonAccountDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInquiryCommonAccountDetailsTracker = false;

		public boolean isInquiryCommonAccountDetailsSpecified() {
			return localInquiryCommonAccountDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return InquiryCommonAccountDetailsType
		 */
		public InquiryCommonAccountDetailsType getInquiryCommonAccountDetails() {
			return localInquiryCommonAccountDetails;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryCommonAccountDetails
		 */
		public void setInquiryCommonAccountDetails(
				InquiryCommonAccountDetailsType param) {
			localInquiryCommonAccountDetailsTracker = param != null;

			this.localInquiryCommonAccountDetails = param;

		}

		/**
		 * field for RequestBody
		 */

		protected RequestBodyType localRequestBody;

		/**
		 * Auto generated getter method
		 * 
		 * @return RequestBodyType
		 */
		public RequestBodyType getRequestBody() {
			return localRequestBody;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RequestBody
		 */
		public void setRequestBody(RequestBodyType param) {

			this.localRequestBody = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":InquiryRequestType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "InquiryRequestType", xmlWriter);
				}

			}

			if (localRequestHeader == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"RequestHeader cannot be null!!");
			}
			localRequestHeader.serialize(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"RequestHeader"), xmlWriter);
			if (localRequestAccountDetailsTracker) {
				if (localRequestAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"RequestAccountDetails cannot be null!!");
				}
				localRequestAccountDetails
						.serialize(
								new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"RequestAccountDetails"), xmlWriter);
			}
			if (localInquiryCommonAccountDetailsTracker) {
				if (localInquiryCommonAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"InquiryCommonAccountDetails cannot be null!!");
				}
				localInquiryCommonAccountDetails
						.serialize(
								new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"InquiryCommonAccountDetails"),
								xmlWriter);
			}
			if (localRequestBody == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"RequestBody cannot be null!!");
			}
			localRequestBody.serialize(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"RequestBody"), xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"RequestHeader"));

			if (localRequestHeader == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"RequestHeader cannot be null!!");
			}
			elementList.add(localRequestHeader);
			if (localRequestAccountDetailsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"RequestAccountDetails"));

				if (localRequestAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"RequestAccountDetails cannot be null!!");
				}
				elementList.add(localRequestAccountDetails);
			}
			if (localInquiryCommonAccountDetailsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"InquiryCommonAccountDetails"));

				if (localInquiryCommonAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"InquiryCommonAccountDetails cannot be null!!");
				}
				elementList.add(localInquiryCommonAccountDetails);
			}
			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"RequestBody"));

			if (localRequestBody == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"RequestBody cannot be null!!");
			}
			elementList.add(localRequestBody);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryRequestType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryRequestType object = new InquiryRequestType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"InquiryRequestType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (InquiryRequestType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RequestHeader").equals(reader.getName())) {

						object.setRequestHeader(RequestHeaderType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RequestAccountDetails").equals(reader
									.getName())) {

						object.setRequestAccountDetails(AccountInputType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InquiryCommonAccountDetails")
									.equals(reader.getName())) {

						object.setInquiryCommonAccountDetails(InquiryCommonAccountDetailsType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RequestBody").equals(reader.getName())) {

						object.setRequestBody(RequestBodyType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Locality2_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Locality2_type1", "ns1");

		/**
		 * field for Locality2_type0
		 */

		protected java.lang.String localLocality2_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLocality2_type0() {
			return localLocality2_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality2_type0
		 */
		public void setLocality2_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localLocality2_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localLocality2_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Locality2_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Locality2_type1", xmlWriter);
				}
			}

			if (localLocality2_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Locality2_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLocality2_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLocality2_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Locality2_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Locality2_type1 returnValue = new Locality2_type1();

				returnValue
						.setLocality2_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Locality2_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Locality2_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return Locality2_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Locality2_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Locality2_type1 object = new Locality2_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Locality2_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLocality2_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryCommonInputPhoneType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * InquiryCommonInputPhoneType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for InquiryPhone This was an Array!
		 */

		protected InquiryPhoneType[] localInquiryPhone;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInquiryPhoneTracker = false;

		public boolean isInquiryPhoneSpecified() {
			return localInquiryPhoneTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return InquiryPhoneType[]
		 */
		public InquiryPhoneType[] getInquiryPhone() {
			return localInquiryPhone;
		}

		/**
		 * validate the array for InquiryPhone
		 */
		protected void validateInquiryPhone(InquiryPhoneType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryPhone
		 */
		public void setInquiryPhone(InquiryPhoneType[] param) {

			validateInquiryPhone(param);

			localInquiryPhoneTracker = param != null;

			this.localInquiryPhone = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            InquiryPhoneType
		 */
		public void addInquiryPhone(InquiryPhoneType param) {
			if (localInquiryPhone == null) {
				localInquiryPhone = new InquiryPhoneType[] {};
			}

			// update the setting tracker
			localInquiryPhoneTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localInquiryPhone);
			list.add(param);
			this.localInquiryPhone = (InquiryPhoneType[]) list
					.toArray(new InquiryPhoneType[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":InquiryCommonInputPhoneType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "InquiryCommonInputPhoneType", xmlWriter);
				}

			}
			if (localInquiryPhoneTracker) {
				if (localInquiryPhone != null) {
					for (int i = 0; i < localInquiryPhone.length; i++) {
						if (localInquiryPhone[i] != null) {
							localInquiryPhone[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"InquiryPhone"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"InquiryPhone cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localInquiryPhoneTracker) {
				if (localInquiryPhone != null) {
					for (int i = 0; i < localInquiryPhone.length; i++) {

						if (localInquiryPhone[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"InquiryPhone"));
							elementList.add(localInquiryPhone[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"InquiryPhone cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryCommonInputPhoneType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryCommonInputPhoneType object = new InquiryCommonInputPhoneType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"InquiryCommonInputPhoneType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (InquiryCommonInputPhoneType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InquiryPhone").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(InquiryPhoneType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"InquiryPhone")
										.equals(reader.getName())) {
									list1.add(InquiryPhoneType.Factory
											.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setInquiryPhone((InquiryPhoneType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(InquiryPhoneType.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Locality2_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Locality2_type0", "ns1");

		/**
		 * field for Locality2_type0
		 */

		protected java.lang.String localLocality2_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLocality2_type0() {
			return localLocality2_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality2_type0
		 */
		public void setLocality2_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localLocality2_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localLocality2_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Locality2_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Locality2_type0", xmlWriter);
				}
			}

			if (localLocality2_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Locality2_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLocality2_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLocality2_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Locality2_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Locality2_type0 returnValue = new Locality2_type0();

				returnValue
						.setLocality2_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Locality2_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Locality2_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return Locality2_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Locality2_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Locality2_type0 object = new Locality2_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Locality2_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLocality2_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MFIAddlAdrsDetailsType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * MFIAddlAdrsDetailsType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for MFIAddressline
		 */

		protected java.lang.String localMFIAddressline;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIAddresslineTracker = false;

		public boolean isMFIAddresslineSpecified() {
			return localMFIAddresslineTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIAddressline() {
			return localMFIAddressline;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIAddressline
		 */
		public void setMFIAddressline(java.lang.String param) {
			localMFIAddresslineTracker = param != null;

			this.localMFIAddressline = param;

		}

		/**
		 * field for MFIState
		 */

		protected java.lang.String localMFIState;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIStateTracker = false;

		public boolean isMFIStateSpecified() {
			return localMFIStateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIState() {
			return localMFIState;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIState
		 */
		public void setMFIState(java.lang.String param) {
			localMFIStateTracker = param != null;

			this.localMFIState = param;

		}

		/**
		 * field for MFIPostalPIN
		 */

		protected java.lang.String localMFIPostalPIN;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIPostalPINTracker = false;

		public boolean isMFIPostalPINSpecified() {
			return localMFIPostalPINTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIPostalPIN() {
			return localMFIPostalPIN;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIPostalPIN
		 */
		public void setMFIPostalPIN(java.lang.String param) {
			localMFIPostalPINTracker = param != null;

			this.localMFIPostalPIN = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type",
							namespacePrefix + ":MFIAddlAdrsDetailsType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "MFIAddlAdrsDetailsType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}
			if (localMFIAddresslineTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIAddressline", xmlWriter);

				if (localMFIAddressline == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIAddressline cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIAddressline);

				}

				xmlWriter.writeEndElement();
			}
			if (localMFIStateTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIState", xmlWriter);

				if (localMFIState == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIState cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIState);

				}

				xmlWriter.writeEndElement();
			}
			if (localMFIPostalPINTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIPostalPIN", xmlWriter);

				if (localMFIPostalPIN == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIPostalPIN cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIPostalPIN);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localMFIAddresslineTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIAddressline"));

				if (localMFIAddressline != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIAddressline));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIAddressline cannot be null!!");
				}
			}
			if (localMFIStateTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIState"));

				if (localMFIState != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIState));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIState cannot be null!!");
				}
			}
			if (localMFIPostalPINTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIPostalPIN"));

				if (localMFIPostalPIN != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIPostalPIN));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIPostalPIN cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static MFIAddlAdrsDetailsType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				MFIAddlAdrsDetailsType object = new MFIAddlAdrsDetailsType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"MFIAddlAdrsDetailsType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (MFIAddlAdrsDetailsType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIAddressline").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIAddressline"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIAddressline(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIState").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIState"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIState(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIPostalPIN").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIPostalPIN"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIPostalPIN(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryResponseHeaderType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * InquiryResponseHeaderType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for CustomerCode
		 */

		protected java.lang.String localCustomerCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCustomerCodeTracker = false;

		public boolean isCustomerCodeSpecified() {
			return localCustomerCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCustomerCode() {
			return localCustomerCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CustomerCode
		 */
		public void setCustomerCode(java.lang.String param) {
			localCustomerCodeTracker = param != null;

			this.localCustomerCode = param;

		}

		/**
		 * field for CustomerName
		 */

		protected java.lang.String localCustomerName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCustomerNameTracker = false;

		public boolean isCustomerNameSpecified() {
			return localCustomerNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCustomerName() {
			return localCustomerName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CustomerName
		 */
		public void setCustomerName(java.lang.String param) {
			localCustomerNameTracker = param != null;

			this.localCustomerName = param;

		}

		/**
		 * field for ClientID
		 */

		protected java.lang.String localClientID;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getClientID() {
			return localClientID;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ClientID
		 */
		public void setClientID(java.lang.String param) {

			this.localClientID = param;

		}

		/**
		 * field for CustRefField
		 */

		protected java.lang.String localCustRefField;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCustRefFieldTracker = false;

		public boolean isCustRefFieldSpecified() {
			return localCustRefFieldTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCustRefField() {
			return localCustRefField;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CustRefField
		 */
		public void setCustRefField(java.lang.String param) {
			localCustRefFieldTracker = param != null;

			this.localCustRefField = param;

		}

		/**
		 * field for ReportOrderNO
		 */

		protected java.lang.String localReportOrderNO;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localReportOrderNOTracker = false;

		public boolean isReportOrderNOSpecified() {
			return localReportOrderNOTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getReportOrderNO() {
			return localReportOrderNO;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportOrderNO
		 */
		public void setReportOrderNO(java.lang.String param) {
			localReportOrderNOTracker = param != null;

			this.localReportOrderNO = param;

		}

		/**
		 * field for ProductCode
		 */

		protected java.lang.String localProductCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localProductCodeTracker = false;

		public boolean isProductCodeSpecified() {
			return localProductCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getProductCode() {
			return localProductCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ProductCode
		 */
		public void setProductCode(java.lang.String param) {
			localProductCodeTracker = param != null;

			this.localProductCode = param;

		}

		/**
		 * field for ProductVersion
		 */

		protected java.lang.String localProductVersion;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localProductVersionTracker = false;

		public boolean isProductVersionSpecified() {
			return localProductVersionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getProductVersion() {
			return localProductVersion;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ProductVersion
		 */
		public void setProductVersion(java.lang.String param) {
			localProductVersionTracker = param != null;

			this.localProductVersion = param;

		}

		/**
		 * field for SuccessCode
		 */

		protected java.lang.String localSuccessCode;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getSuccessCode() {
			return localSuccessCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SuccessCode
		 */
		public void setSuccessCode(java.lang.String param) {

			this.localSuccessCode = param;

		}

		/**
		 * field for MatchType
		 */

		protected java.lang.String localMatchType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMatchTypeTracker = false;

		public boolean isMatchTypeSpecified() {
			return localMatchTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMatchType() {
			return localMatchType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MatchType
		 */
		public void setMatchType(java.lang.String param) {
			localMatchTypeTracker = param != null;

			this.localMatchType = param;

		}

		/**
		 * field for Date
		 */

		protected java.lang.String localDate;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateTracker = false;

		public boolean isDateSpecified() {
			return localDateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDate() {
			return localDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Date
		 */
		public void setDate(java.lang.String param) {
			localDateTracker = param != null;

			this.localDate = param;

		}

		/**
		 * field for Time
		 */

		protected java.lang.String localTime;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTimeTracker = false;

		public boolean isTimeSpecified() {
			return localTimeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTime() {
			return localTime;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Time
		 */
		public void setTime(java.lang.String param) {
			localTimeTracker = param != null;

			this.localTime = param;

		}

		/**
		 * field for HitCode
		 */

		protected java.lang.String localHitCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localHitCodeTracker = false;

		public boolean isHitCodeSpecified() {
			return localHitCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getHitCode() {
			return localHitCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HitCode
		 */
		public void setHitCode(java.lang.String param) {
			localHitCodeTracker = param != null;

			this.localHitCode = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":InquiryResponseHeaderType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "InquiryResponseHeaderType", xmlWriter);
				}

			}
			if (localCustomerCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CustomerCode", xmlWriter);

				if (localCustomerCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CustomerCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localCustomerCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localCustomerNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CustomerName", xmlWriter);

				if (localCustomerName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CustomerName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localCustomerName);

				}

				xmlWriter.writeEndElement();
			}
			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "ClientID", xmlWriter);

			if (localClientID == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"ClientID cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localClientID);

			}

			xmlWriter.writeEndElement();
			if (localCustRefFieldTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CustRefField", xmlWriter);

				if (localCustRefField == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CustRefField cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localCustRefField);

				}

				xmlWriter.writeEndElement();
			}
			if (localReportOrderNOTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "ReportOrderNO", xmlWriter);

				if (localReportOrderNO == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"ReportOrderNO cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReportOrderNO);

				}

				xmlWriter.writeEndElement();
			}
			if (localProductCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "ProductCode", xmlWriter);

				if (localProductCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"ProductCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localProductCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localProductVersionTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "ProductVersion", xmlWriter);

				if (localProductVersion == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"ProductVersion cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localProductVersion);

				}

				xmlWriter.writeEndElement();
			}
			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "SuccessCode", xmlWriter);

			if (localSuccessCode == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"SuccessCode cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localSuccessCode);

			}

			xmlWriter.writeEndElement();
			if (localMatchTypeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MatchType", xmlWriter);

				if (localMatchType == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MatchType cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMatchType);

				}

				xmlWriter.writeEndElement();
			}
			if (localDateTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Date", xmlWriter);

				if (localDate == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Date cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localDate);

				}

				xmlWriter.writeEndElement();
			}
			if (localTimeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Time", xmlWriter);

				if (localTime == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Time cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localTime);

				}

				xmlWriter.writeEndElement();
			}
			if (localHitCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "HitCode", xmlWriter);

				if (localHitCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"HitCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localHitCode);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localCustomerCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CustomerCode"));

				if (localCustomerCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCustomerCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CustomerCode cannot be null!!");
				}
			}
			if (localCustomerNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CustomerName"));

				if (localCustomerName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCustomerName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CustomerName cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"ClientID"));

			if (localClientID != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localClientID));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"ClientID cannot be null!!");
			}
			if (localCustRefFieldTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CustRefField"));

				if (localCustRefField != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCustRefField));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CustRefField cannot be null!!");
				}
			}
			if (localReportOrderNOTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ReportOrderNO"));

				if (localReportOrderNO != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReportOrderNO));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"ReportOrderNO cannot be null!!");
				}
			}
			if (localProductCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ProductCode"));

				if (localProductCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localProductCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"ProductCode cannot be null!!");
				}
			}
			if (localProductVersionTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ProductVersion"));

				if (localProductVersion != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localProductVersion));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"ProductVersion cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"SuccessCode"));

			if (localSuccessCode != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSuccessCode));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"SuccessCode cannot be null!!");
			}
			if (localMatchTypeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MatchType"));

				if (localMatchType != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMatchType));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MatchType cannot be null!!");
				}
			}
			if (localDateTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Date"));

				if (localDate != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDate));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Date cannot be null!!");
				}
			}
			if (localTimeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Time"));

				if (localTime != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTime));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Time cannot be null!!");
				}
			}
			if (localHitCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"HitCode"));

				if (localHitCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localHitCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"HitCode cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryResponseHeaderType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryResponseHeaderType object = new InquiryResponseHeaderType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"InquiryResponseHeaderType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (InquiryResponseHeaderType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CustomerCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CustomerCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCustomerCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CustomerName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CustomerName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCustomerName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ClientID").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ClientID"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setClientID(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CustRefField").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CustRefField"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCustRefField(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ReportOrderNO").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ReportOrderNO"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReportOrderNO(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ProductCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ProductCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setProductCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ProductVersion").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ProductVersion"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setProductVersion(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"SuccessCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "SuccessCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSuccessCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MatchType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MatchType"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMatchType(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Date").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Date"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Time").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Time"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTime(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"HitCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "HitCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setHitCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class NameTypeSequence_type0 implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * NameTypeSequence_type0 Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for FirstName
		 */

		protected java.lang.String localFirstName;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFirstName() {
			return localFirstName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FirstName
		 */
		public void setFirstName(java.lang.String param) {

			this.localFirstName = param;

		}

		/**
		 * field for MiddleName
		 */

		protected java.lang.String localMiddleName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMiddleNameTracker = false;

		public boolean isMiddleNameSpecified() {
			return localMiddleNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMiddleName() {
			return localMiddleName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MiddleName
		 */
		public void setMiddleName(java.lang.String param) {
			localMiddleNameTracker = param != null;

			this.localMiddleName = param;

		}

		/**
		 * field for AdditionalMiddleName
		 */

		protected java.lang.String localAdditionalMiddleName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAdditionalMiddleNameTracker = false;

		public boolean isAdditionalMiddleNameSpecified() {
			return localAdditionalMiddleNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAdditionalMiddleName() {
			return localAdditionalMiddleName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalMiddleName
		 */
		public void setAdditionalMiddleName(java.lang.String param) {
			localAdditionalMiddleNameTracker = param != null;

			this.localAdditionalMiddleName = param;

		}

		/**
		 * field for LastName
		 */

		protected java.lang.String localLastName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLastNameTracker = false;

		public boolean isLastNameSpecified() {
			return localLastNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLastName() {
			return localLastName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastName
		 */
		public void setLastName(java.lang.String param) {
			localLastNameTracker = param != null;

			this.localLastName = param;

		}

		/**
		 * field for Suffix
		 */

		protected java.lang.String localSuffix;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSuffixTracker = false;

		public boolean isSuffixSpecified() {
			return localSuffixTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getSuffix() {
			return localSuffix;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Suffix
		 */
		public void setSuffix(java.lang.String param) {
			localSuffixTracker = param != null;

			this.localSuffix = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type",
							namespacePrefix + ":NameTypeSequence_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "NameTypeSequence_type0", xmlWriter);
				}

			}

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "FirstName", xmlWriter);

			if (localFirstName == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"FirstName cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localFirstName);

			}

			xmlWriter.writeEndElement();
			if (localMiddleNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MiddleName", xmlWriter);

				if (localMiddleName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MiddleName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMiddleName);

				}

				xmlWriter.writeEndElement();
			}
			if (localAdditionalMiddleNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AdditionalMiddleName",
						xmlWriter);

				if (localAdditionalMiddleName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalMiddleName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAdditionalMiddleName);

				}

				xmlWriter.writeEndElement();
			}
			if (localLastNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "LastName", xmlWriter);

				if (localLastName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"LastName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localLastName);

				}

				xmlWriter.writeEndElement();
			}
			if (localSuffixTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Suffix", xmlWriter);

				if (localSuffix == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Suffix cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localSuffix);

				}

				xmlWriter.writeEndElement();
			}

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"FirstName"));

			if (localFirstName != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localFirstName));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"FirstName cannot be null!!");
			}
			if (localMiddleNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MiddleName"));

				if (localMiddleName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMiddleName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MiddleName cannot be null!!");
				}
			}
			if (localAdditionalMiddleNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AdditionalMiddleName"));

				if (localAdditionalMiddleName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAdditionalMiddleName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalMiddleName cannot be null!!");
				}
			}
			if (localLastNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"LastName"));

				if (localLastName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLastName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"LastName cannot be null!!");
				}
			}
			if (localSuffixTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Suffix"));

				if (localSuffix != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSuffix));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Suffix cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static NameTypeSequence_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				NameTypeSequence_type0 object = new NameTypeSequence_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"FirstName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "FirstName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setFirstName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MiddleName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MiddleName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMiddleName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AdditionalMiddleName").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AdditionalMiddleName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAdditionalMiddleName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"LastName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "LastName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setLastName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Suffix").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Suffix"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSuffix(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryPurposeOptions implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"InquiryPurposeOptions", "ns1");

		/**
		 * field for InquiryPurposeOptions
		 */

		protected java.lang.String localInquiryPurposeOptions;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected InquiryPurposeOptions(java.lang.String value,
				boolean isRegisterValue) {
			localInquiryPurposeOptions = value;
			if (isRegisterValue) {

				_table_.put(localInquiryPurposeOptions, this);

			}

		}

		public static final java.lang.String _value1 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("01");

		public static final java.lang.String _value2 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("02");

		public static final java.lang.String _value3 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("03");

		public static final java.lang.String _value4 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("04");

		public static final java.lang.String _value5 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("06");

		public static final java.lang.String _value6 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("05");

		public static final java.lang.String _value7 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("07");

		public static final java.lang.String _value8 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("08");

		public static final java.lang.String _value9 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("11");

		public static final java.lang.String _value10 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("12");

		public static final java.lang.String _value11 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("13");

		public static final java.lang.String _value12 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("14");

		public static final java.lang.String _value13 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("15");

		public static final java.lang.String _value14 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("16");

		public static final java.lang.String _value15 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("3A");

		public static final java.lang.String _value16 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("10");

		public static final java.lang.String _value17 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("32");

		public static final java.lang.String _value18 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("33");

		public static final java.lang.String _value19 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("35");

		public static final java.lang.String _value20 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("34");

		public static final java.lang.String _value21 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("09");

		public static final java.lang.String _value22 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("00");

		public static final java.lang.String _value23 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("0E");

		public static final java.lang.String _value24 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("1E");

		public static final java.lang.String _value25 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("2E");

		public static final java.lang.String _value26 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("3E");

		public static final java.lang.String _value27 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("1G");

		public static final java.lang.String _value28 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("51");

		public static final java.lang.String _value29 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("52");

		public static final java.lang.String _value30 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("V1");

		public static final java.lang.String _value31 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("17");

		public static final java.lang.String _value32 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("18");

		public static final java.lang.String _value33 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("19");

		public static final java.lang.String _value34 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("20");

		public static final java.lang.String _value35 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("53");

		public static final java.lang.String _value36 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("54");

		public static final java.lang.String _value37 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("55");

		public static final java.lang.String _value38 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("56");

		public static final java.lang.String _value39 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("57");

		public static final java.lang.String _value40 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("58");

		public static final java.lang.String _value41 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("59");

		public static final java.lang.String _value42 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("60");

		public static final java.lang.String _value43 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("31");

		public static final java.lang.String _value44 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("8A");

		public static final InquiryPurposeOptions value1 = new InquiryPurposeOptions(
				_value1, true);

		public static final InquiryPurposeOptions value2 = new InquiryPurposeOptions(
				_value2, true);

		public static final InquiryPurposeOptions value3 = new InquiryPurposeOptions(
				_value3, true);

		public static final InquiryPurposeOptions value4 = new InquiryPurposeOptions(
				_value4, true);

		public static final InquiryPurposeOptions value5 = new InquiryPurposeOptions(
				_value5, true);

		public static final InquiryPurposeOptions value6 = new InquiryPurposeOptions(
				_value6, true);

		public static final InquiryPurposeOptions value7 = new InquiryPurposeOptions(
				_value7, true);

		public static final InquiryPurposeOptions value8 = new InquiryPurposeOptions(
				_value8, true);

		public static final InquiryPurposeOptions value9 = new InquiryPurposeOptions(
				_value9, true);

		public static final InquiryPurposeOptions value10 = new InquiryPurposeOptions(
				_value10, true);

		public static final InquiryPurposeOptions value11 = new InquiryPurposeOptions(
				_value11, true);

		public static final InquiryPurposeOptions value12 = new InquiryPurposeOptions(
				_value12, true);

		public static final InquiryPurposeOptions value13 = new InquiryPurposeOptions(
				_value13, true);

		public static final InquiryPurposeOptions value14 = new InquiryPurposeOptions(
				_value14, true);

		public static final InquiryPurposeOptions value15 = new InquiryPurposeOptions(
				_value15, true);

		public static final InquiryPurposeOptions value16 = new InquiryPurposeOptions(
				_value16, true);

		public static final InquiryPurposeOptions value17 = new InquiryPurposeOptions(
				_value17, true);

		public static final InquiryPurposeOptions value18 = new InquiryPurposeOptions(
				_value18, true);

		public static final InquiryPurposeOptions value19 = new InquiryPurposeOptions(
				_value19, true);

		public static final InquiryPurposeOptions value20 = new InquiryPurposeOptions(
				_value20, true);

		public static final InquiryPurposeOptions value21 = new InquiryPurposeOptions(
				_value21, true);

		public static final InquiryPurposeOptions value22 = new InquiryPurposeOptions(
				_value22, true);

		public static final InquiryPurposeOptions value23 = new InquiryPurposeOptions(
				_value23, true);

		public static final InquiryPurposeOptions value24 = new InquiryPurposeOptions(
				_value24, true);

		public static final InquiryPurposeOptions value25 = new InquiryPurposeOptions(
				_value25, true);

		public static final InquiryPurposeOptions value26 = new InquiryPurposeOptions(
				_value26, true);

		public static final InquiryPurposeOptions value27 = new InquiryPurposeOptions(
				_value27, true);

		public static final InquiryPurposeOptions value28 = new InquiryPurposeOptions(
				_value28, true);

		public static final InquiryPurposeOptions value29 = new InquiryPurposeOptions(
				_value29, true);

		public static final InquiryPurposeOptions value30 = new InquiryPurposeOptions(
				_value30, true);

		public static final InquiryPurposeOptions value31 = new InquiryPurposeOptions(
				_value31, true);

		public static final InquiryPurposeOptions value32 = new InquiryPurposeOptions(
				_value32, true);

		public static final InquiryPurposeOptions value33 = new InquiryPurposeOptions(
				_value33, true);

		public static final InquiryPurposeOptions value34 = new InquiryPurposeOptions(
				_value34, true);

		public static final InquiryPurposeOptions value35 = new InquiryPurposeOptions(
				_value35, true);

		public static final InquiryPurposeOptions value36 = new InquiryPurposeOptions(
				_value36, true);

		public static final InquiryPurposeOptions value37 = new InquiryPurposeOptions(
				_value37, true);

		public static final InquiryPurposeOptions value38 = new InquiryPurposeOptions(
				_value38, true);

		public static final InquiryPurposeOptions value39 = new InquiryPurposeOptions(
				_value39, true);

		public static final InquiryPurposeOptions value40 = new InquiryPurposeOptions(
				_value40, true);

		public static final InquiryPurposeOptions value41 = new InquiryPurposeOptions(
				_value41, true);

		public static final InquiryPurposeOptions value42 = new InquiryPurposeOptions(
				_value42, true);

		public static final InquiryPurposeOptions value43 = new InquiryPurposeOptions(
				_value43, true);

		public static final InquiryPurposeOptions value44 = new InquiryPurposeOptions(
				_value44, true);

		public java.lang.String getValue() {
			return localInquiryPurposeOptions;
		}

		public boolean equals(java.lang.Object obj) {
			return (obj == this);
		}

		public int hashCode() {
			return toString().hashCode();
		}

		public java.lang.String toString() {

			return localInquiryPurposeOptions.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":InquiryPurposeOptions",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "InquiryPurposeOptions", xmlWriter);
				}
			}

			if (localInquiryPurposeOptions == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"InquiryPurposeOptions cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localInquiryPurposeOptions);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localInquiryPurposeOptions) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static InquiryPurposeOptions fromValue(java.lang.String value)
					throws java.lang.IllegalArgumentException {
				InquiryPurposeOptions enumeration = (InquiryPurposeOptions)

				_table_.get(value);

				if ((enumeration == null)
						&& !((value == null) || (value.equals("")))) {
					throw new java.lang.IllegalArgumentException();
				}
				return enumeration;
			}

			public static InquiryPurposeOptions fromString(
					java.lang.String value, java.lang.String namespaceURI)
					throws java.lang.IllegalArgumentException {
				try {

					return fromValue(org.apache.axis2.databinding.utils.ConverterUtil
							.convertToString(value));

				} catch (java.lang.Exception e) {
					throw new java.lang.IllegalArgumentException();
				}
			}

			public static InquiryPurposeOptions fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return InquiryPurposeOptions.Factory.fromString(content,
							namespaceUri);
				} else {
					return InquiryPurposeOptions.Factory
							.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryPurposeOptions parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryPurposeOptions object = null;
				// initialize a hash map to keep values
				java.util.Map attributeMap = new java.util.HashMap();
				java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							nillableValue = reader
									.getAttributeValue(
											"http://www.w3.org/2001/XMLSchema-instance",
											"nil");
							if ("true".equals(nillableValue)
									|| "1".equals(nillableValue)) {
								throw new org.apache.axis2.databinding.ADBException(
										"The element: "
												+ "InquiryPurposeOptions"
												+ "  cannot be null");
							}

							java.lang.String content = reader.getElementText();

							if (content.indexOf(":") > 0) {
								// this seems to be a Qname so find the
								// namespace and send
								prefix = content.substring(0,
										content.indexOf(":"));
								namespaceuri = reader.getNamespaceURI(prefix);
								object = InquiryPurposeOptions.Factory
										.fromString(content, namespaceuri);
							} else {
								// this seems to be not a qname send and empty
								// namespace incase of it is
								// check is done in fromString method
								object = InquiryPurposeOptions.Factory
										.fromString(content, "");
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PANId_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"PANId_type1", "ns1");

		/**
		 * field for PANId_type1
		 */

		protected java.lang.String localPANId_type1;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPANId_type1() {
			return localPANId_type1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PANId_type1
		 */
		public void setPANId_type1(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param)
					.matches(
							"([a-zA-Z]{3}[ABCFHJLPRabcfhjlpr]{1}[a-zA-Z]{1}[0-9]{4}[a-zA-Z])+")) {
				this.localPANId_type1 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localPANId_type1.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":PANId_type1", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "PANId_type1", xmlWriter);
				}
			}

			if (localPANId_type1 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"PANId_type1 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localPANId_type1);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPANId_type1) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static PANId_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				PANId_type1 returnValue = new PANId_type1();

				returnValue
						.setPANId_type1(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static PANId_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return PANId_type1.Factory
							.fromString(content, namespaceUri);
				} else {
					return PANId_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static PANId_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				PANId_type1 object = new PANId_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "PANId_type1"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setPANId_type1(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryResponseType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * InquiryResponseType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for InquiryResponseHeader
		 */

		protected InquiryResponseHeaderType localInquiryResponseHeader;

		/**
		 * Auto generated getter method
		 * 
		 * @return InquiryResponseHeaderType
		 */
		public InquiryResponseHeaderType getInquiryResponseHeader() {
			return localInquiryResponseHeader;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryResponseHeader
		 */
		public void setInquiryResponseHeader(InquiryResponseHeaderType param) {

			this.localInquiryResponseHeader = param;

		}

		/**
		 * field for InquiryRequestInfo
		 */

		protected RequestBodyType localInquiryRequestInfo;

		/**
		 * Auto generated getter method
		 * 
		 * @return RequestBodyType
		 */
		public RequestBodyType getInquiryRequestInfo() {
			return localInquiryRequestInfo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryRequestInfo
		 */
		public void setInquiryRequestInfo(RequestBodyType param) {

			this.localInquiryRequestInfo = param;

		}

		/**
		 * field for ReportData
		 */

		protected ReportType localReportData;

		/**
		 * Auto generated getter method
		 * 
		 * @return ReportType
		 */
		public ReportType getReportData() {
			return localReportData;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportData
		 */
		public void setReportData(ReportType param) {

			this.localReportData = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":InquiryResponseType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "InquiryResponseType", xmlWriter);
				}

			}

			if (localInquiryResponseHeader == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"InquiryResponseHeader cannot be null!!");
			}
			localInquiryResponseHeader.serialize(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"InquiryResponseHeader"), xmlWriter);

			if (localInquiryRequestInfo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"InquiryRequestInfo cannot be null!!");
			}
			localInquiryRequestInfo.serialize(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"InquiryRequestInfo"), xmlWriter);

			if (localReportData == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ReportData cannot be null!!");
			}
			localReportData.serialize(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"ReportData"), xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"InquiryResponseHeader"));

			if (localInquiryResponseHeader == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"InquiryResponseHeader cannot be null!!");
			}
			elementList.add(localInquiryResponseHeader);

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"InquiryRequestInfo"));

			if (localInquiryRequestInfo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"InquiryRequestInfo cannot be null!!");
			}
			elementList.add(localInquiryRequestInfo);

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"ReportData"));

			if (localReportData == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ReportData cannot be null!!");
			}
			elementList.add(localReportData);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryResponseType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryResponseType object = new InquiryResponseType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"InquiryResponseType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (InquiryResponseType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InquiryResponseHeader").equals(reader
									.getName())) {

						object.setInquiryResponseHeader(InquiryResponseHeaderType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InquiryRequestInfo").equals(reader
									.getName())) {

						object.setInquiryRequestInfo(RequestBodyType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ReportData").equals(reader.getName())) {

						object.setReportData(ReportType.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryResponse implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"InquiryResponse", "ns1");

		/**
		 * field for InquiryResponse
		 */

		protected InquiryResponseType localInquiryResponse;

		/**
		 * Auto generated getter method
		 * 
		 * @return InquiryResponseType
		 */
		public InquiryResponseType getInquiryResponse() {
			return localInquiryResponse;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryResponse
		 */
		public void setInquiryResponse(InquiryResponseType param) {

			this.localInquiryResponse = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			if (localInquiryResponse == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"InquiryResponse cannot be null!");
			}
			localInquiryResponse.serialize(MY_QNAME, xmlWriter);

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return localInquiryResponse.getPullParser(MY_QNAME);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryResponse parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryResponse object = new InquiryResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"InquiryResponse").equals(reader
											.getName())) {

								object.setInquiryResponse(InquiryResponseType.Factory
										.parse(reader));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class NameType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * NameType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * Whenever a new property is set ensure all others are unset There can
		 * be only one choice and the last one wins
		 */
		private void clearAllSettingTrackers() {

			localFullNameTracker = false;

			localNameTypeSequence_type0Tracker = false;

		}

		/**
		 * field for FullName
		 */

		protected java.lang.String localFullName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localFullNameTracker = false;

		public boolean isFullNameSpecified() {
			return localFullNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFullName() {
			return localFullName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FullName
		 */
		public void setFullName(java.lang.String param) {

			clearAllSettingTrackers();
			localFullNameTracker = param != null;

			this.localFullName = param;

		}

		/**
		 * field for NameTypeSequence_type0
		 */

		protected NameTypeSequence_type0 localNameTypeSequence_type0;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNameTypeSequence_type0Tracker = false;

		public boolean isNameTypeSequence_type0Specified() {
			return localNameTypeSequence_type0Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return NameTypeSequence_type0
		 */
		public NameTypeSequence_type0 getNameTypeSequence_type0() {
			return localNameTypeSequence_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NameTypeSequence_type0
		 */
		public void setNameTypeSequence_type0(NameTypeSequence_type0 param) {

			clearAllSettingTrackers();
			localNameTypeSequence_type0Tracker = param != null;

			this.localNameTypeSequence_type0 = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":NameType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "NameType", xmlWriter);
				}

			}
			if (localFullNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "FullName", xmlWriter);

				if (localFullName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"FullName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localFullName);

				}

				xmlWriter.writeEndElement();
			}
			if (localNameTypeSequence_type0Tracker) {
				if (localNameTypeSequence_type0 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"NameTypeSequence_type0 cannot be null!!");
				}
				localNameTypeSequence_type0.serialize(null, xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localFullNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"FullName"));

				if (localFullName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localFullName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"FullName cannot be null!!");
				}
			}
			if (localNameTypeSequence_type0Tracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NameTypeSequence_type0"));

				if (localNameTypeSequence_type0 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"NameTypeSequence_type0 cannot be null!!");
				}
				elementList.add(localNameTypeSequence_type0);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static NameType parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				NameType object = new NameType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"NameType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (NameType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"FullName")
											.equals(reader.getName())) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "FullName"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setFullName(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

								reader.next();

							} // End of if for expected property start element

							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();

							try {

								if (reader.isStartElement()) {

									object.setNameTypeSequence_type0(NameTypeSequence_type0.Factory
											.parse(reader));

								} // End of if for expected property start
									// element

							} catch (java.lang.Exception e) {
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryCommonInputAddressType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * InquiryCommonInputAddressType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for InquiryAddress This was an Array!
		 */

		protected InquiryAddressType[] localInquiryAddress;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInquiryAddressTracker = false;

		public boolean isInquiryAddressSpecified() {
			return localInquiryAddressTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return InquiryAddressType[]
		 */
		public InquiryAddressType[] getInquiryAddress() {
			return localInquiryAddress;
		}

		/**
		 * validate the array for InquiryAddress
		 */
		protected void validateInquiryAddress(InquiryAddressType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryAddress
		 */
		public void setInquiryAddress(InquiryAddressType[] param) {

			validateInquiryAddress(param);

			localInquiryAddressTracker = param != null;

			this.localInquiryAddress = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            InquiryAddressType
		 */
		public void addInquiryAddress(InquiryAddressType param) {
			if (localInquiryAddress == null) {
				localInquiryAddress = new InquiryAddressType[] {};
			}

			// update the setting tracker
			localInquiryAddressTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localInquiryAddress);
			list.add(param);
			this.localInquiryAddress = (InquiryAddressType[]) list
					.toArray(new InquiryAddressType[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":InquiryCommonInputAddressType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "InquiryCommonInputAddressType", xmlWriter);
				}

			}
			if (localInquiryAddressTracker) {
				if (localInquiryAddress != null) {
					for (int i = 0; i < localInquiryAddress.length; i++) {
						if (localInquiryAddress[i] != null) {
							localInquiryAddress[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"InquiryAddress"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"InquiryAddress cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localInquiryAddressTracker) {
				if (localInquiryAddress != null) {
					for (int i = 0; i < localInquiryAddress.length; i++) {

						if (localInquiryAddress[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"InquiryAddress"));
							elementList.add(localInquiryAddress[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"InquiryAddress cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryCommonInputAddressType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryCommonInputAddressType object = new InquiryCommonInputAddressType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"InquiryCommonInputAddressType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (InquiryCommonInputAddressType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InquiryAddress").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(InquiryAddressType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"InquiryAddress").equals(reader
										.getName())) {
									list1.add(InquiryAddressType.Factory
											.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setInquiryAddress((InquiryAddressType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(InquiryAddressType.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class NationalIdCard_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"NationalIdCard_type1", "ns1");

		/**
		 * field for NationalIdCard_type0
		 */

		protected java.lang.String localNationalIdCard_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNationalIdCard_type0() {
			return localNationalIdCard_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NationalIdCard_type0
		 */
		public void setNationalIdCard_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localNationalIdCard_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localNationalIdCard_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":NationalIdCard_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "NationalIdCard_type1", xmlWriter);
				}
			}

			if (localNationalIdCard_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"NationalIdCard_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNationalIdCard_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNationalIdCard_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static NationalIdCard_type1 fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				NationalIdCard_type1 returnValue = new NationalIdCard_type1();

				returnValue
						.setNationalIdCard_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static NationalIdCard_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return NationalIdCard_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return NationalIdCard_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static NationalIdCard_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				NationalIdCard_type1 object = new NationalIdCard_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "NationalIdCard_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNationalIdCard_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class NationalIdCard_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"NationalIdCard_type0", "ns1");

		/**
		 * field for NationalIdCard_type0
		 */

		protected java.lang.String localNationalIdCard_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNationalIdCard_type0() {
			return localNationalIdCard_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NationalIdCard_type0
		 */
		public void setNationalIdCard_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localNationalIdCard_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localNationalIdCard_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":NationalIdCard_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "NationalIdCard_type0", xmlWriter);
				}
			}

			if (localNationalIdCard_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"NationalIdCard_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNationalIdCard_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNationalIdCard_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static NationalIdCard_type0 fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				NationalIdCard_type0 returnValue = new NationalIdCard_type0();

				returnValue
						.setNationalIdCard_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static NationalIdCard_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return NationalIdCard_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return NationalIdCard_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static NationalIdCard_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				NationalIdCard_type0 object = new NationalIdCard_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "NationalIdCard_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNationalIdCard_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ScoreType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * ScoreType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Name
		 */

		protected java.lang.String localName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNameTracker = false;

		public boolean isNameSpecified() {
			return localNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getName() {
			return localName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name
		 */
		public void setName(java.lang.String param) {
			localNameTracker = param != null;

			this.localName = param;

		}

		/**
		 * field for Description
		 */

		protected java.lang.String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDescriptionTracker = false;

		public boolean isDescriptionSpecified() {
			return localDescriptionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDescription() {
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(java.lang.String param) {
			localDescriptionTracker = param != null;

			this.localDescription = param;

		}

		/**
		 * field for Value
		 */

		protected java.lang.String localValue;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localValueTracker = false;

		public boolean isValueSpecified() {
			return localValueTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getValue() {
			return localValue;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Value
		 */
		public void setValue(java.lang.String param) {
			localValueTracker = param != null;

			this.localValue = param;

		}

		/**
		 * field for ReasonCode
		 */

		protected java.lang.String localReasonCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localReasonCodeTracker = false;

		public boolean isReasonCodeSpecified() {
			return localReasonCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getReasonCode() {
			return localReasonCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReasonCode
		 */
		public void setReasonCode(java.lang.String param) {
			localReasonCodeTracker = param != null;

			this.localReasonCode = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":ScoreType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ScoreType", xmlWriter);
				}

			}
			if (localNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Name", xmlWriter);

				if (localName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Name cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localName);

				}

				xmlWriter.writeEndElement();
			}
			if (localDescriptionTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Description", xmlWriter);

				if (localDescription == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Description cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			if (localValueTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Value", xmlWriter);

				if (localValue == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Value cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localValue);

				}

				xmlWriter.writeEndElement();
			}
			if (localReasonCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "ReasonCode", xmlWriter);

				if (localReasonCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"ReasonCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReasonCode);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Name"));

				if (localName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Name cannot be null!!");
				}
			}
			if (localDescriptionTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Description"));

				if (localDescription != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDescription));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Description cannot be null!!");
				}
			}
			if (localValueTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Value"));

				if (localValue != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localValue));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Value cannot be null!!");
				}
			}
			if (localReasonCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ReasonCode"));

				if (localReasonCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReasonCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"ReasonCode cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ScoreType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ScoreType object = new ScoreType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"ScoreType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (ScoreType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Name").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Name"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Description").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Description"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Value").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Value"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setValue(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ReasonCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ReasonCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReasonCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryPhoneType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * InquiryPhoneType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for CountryCode
		 */

		protected java.lang.String localCountryCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCountryCodeTracker = false;

		public boolean isCountryCodeSpecified() {
			return localCountryCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCountryCode() {
			return localCountryCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CountryCode
		 */
		public void setCountryCode(java.lang.String param) {
			localCountryCodeTracker = param != null;

			this.localCountryCode = param;

		}

		/**
		 * field for AreaCode
		 */

		protected java.lang.String localAreaCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAreaCodeTracker = false;

		public boolean isAreaCodeSpecified() {
			return localAreaCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAreaCode() {
			return localAreaCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AreaCode
		 */
		public void setAreaCode(java.lang.String param) {
			localAreaCodeTracker = param != null;

			this.localAreaCode = param;

		}

		/**
		 * field for Number
		 */

		protected java.lang.String localNumber;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNumberTracker = false;

		public boolean isNumberSpecified() {
			return localNumberTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumber() {
			return localNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Number
		 */
		public void setNumber(java.lang.String param) {
			localNumberTracker = param != null;

			this.localNumber = param;

		}

		/**
		 * field for PhoneNumberExtension
		 */

		protected java.lang.String localPhoneNumberExtension;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPhoneNumberExtensionTracker = false;

		public boolean isPhoneNumberExtensionSpecified() {
			return localPhoneNumberExtensionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPhoneNumberExtension() {
			return localPhoneNumberExtension;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PhoneNumberExtension
		 */
		public void setPhoneNumberExtension(java.lang.String param) {
			localPhoneNumberExtensionTracker = param != null;

			this.localPhoneNumberExtension = param;

		}

		/**
		 * field for PhoneType
		 */

		protected PhoneTypeCode localPhoneType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPhoneTypeTracker = false;

		public boolean isPhoneTypeSpecified() {
			return localPhoneTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return PhoneTypeCode
		 */
		public PhoneTypeCode getPhoneType() {
			return localPhoneType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PhoneType
		 */
		public void setPhoneType(PhoneTypeCode param) {
			localPhoneTypeTracker = param != null;

			this.localPhoneType = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":InquiryPhoneType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "InquiryPhoneType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}
			if (localCountryCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CountryCode", xmlWriter);

				if (localCountryCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CountryCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localCountryCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localAreaCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AreaCode", xmlWriter);

				if (localAreaCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AreaCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAreaCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localNumberTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Number", xmlWriter);

				if (localNumber == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Number cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localNumber);

				}

				xmlWriter.writeEndElement();
			}
			if (localPhoneNumberExtensionTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "PhoneNumberExtension",
						xmlWriter);

				if (localPhoneNumberExtension == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"PhoneNumberExtension cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPhoneNumberExtension);

				}

				xmlWriter.writeEndElement();
			}
			if (localPhoneTypeTracker) {
				if (localPhoneType == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"PhoneType cannot be null!!");
				}
				localPhoneType.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PhoneType"), xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localCountryCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CountryCode"));

				if (localCountryCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCountryCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CountryCode cannot be null!!");
				}
			}
			if (localAreaCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AreaCode"));

				if (localAreaCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAreaCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AreaCode cannot be null!!");
				}
			}
			if (localNumberTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Number"));

				if (localNumber != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumber));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Number cannot be null!!");
				}
			}
			if (localPhoneNumberExtensionTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PhoneNumberExtension"));

				if (localPhoneNumberExtension != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPhoneNumberExtension));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"PhoneNumberExtension cannot be null!!");
				}
			}
			if (localPhoneTypeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PhoneType"));

				if (localPhoneType == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"PhoneType cannot be null!!");
				}
				elementList.add(localPhoneType);
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryPhoneType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryPhoneType object = new InquiryPhoneType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"InquiryPhoneType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (InquiryPhoneType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CountryCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CountryCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCountryCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AreaCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AreaCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAreaCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Number").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Number"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNumber(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PhoneNumberExtension").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "PhoneNumberExtension"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPhoneNumberExtension(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PhoneType").equals(reader.getName())) {

						object.setPhoneType(PhoneTypeCode.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryRequest implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"InquiryRequest", "ns1");

		/**
		 * field for InquiryRequest
		 */

		protected InquiryRequestType localInquiryRequest;

		/**
		 * Auto generated getter method
		 * 
		 * @return InquiryRequestType
		 */
		public InquiryRequestType getInquiryRequest() {
			return localInquiryRequest;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryRequest
		 */
		public void setInquiryRequest(InquiryRequestType param) {

			this.localInquiryRequest = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			if (localInquiryRequest == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"InquiryRequest cannot be null!");
			}
			localInquiryRequest.serialize(MY_QNAME, xmlWriter);

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return localInquiryRequest.getPullParser(MY_QNAME);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryRequest parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryRequest object = new InquiryRequest();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"InquiryRequest").equals(reader
											.getName())) {

								object.setInquiryRequest(InquiryRequestType.Factory
										.parse(reader));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AdditionalNameTypeDetails implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * AdditionalNameTypeDetails Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AdditionalName
		 */

		protected AdditionalName_type1 localAdditionalName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAdditionalNameTracker = false;

		public boolean isAdditionalNameSpecified() {
			return localAdditionalNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AdditionalName_type1
		 */
		public AdditionalName_type1 getAdditionalName() {
			return localAdditionalName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalName
		 */
		public void setAdditionalName(AdditionalName_type1 param) {
			localAdditionalNameTracker = param != null;

			this.localAdditionalName = param;

		}

		/**
		 * field for AdditionalNameType
		 */

		protected AdditionalNameValType localAdditionalNameType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAdditionalNameTypeTracker = false;

		public boolean isAdditionalNameTypeSpecified() {
			return localAdditionalNameTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AdditionalNameValType
		 */
		public AdditionalNameValType getAdditionalNameType() {
			return localAdditionalNameType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalNameType
		 */
		public void setAdditionalNameType(AdditionalNameValType param) {
			localAdditionalNameTypeTracker = param != null;

			this.localAdditionalNameType = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":AdditionalNameTypeDetails", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AdditionalNameTypeDetails", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}
			if (localAdditionalNameTracker) {
				if (localAdditionalName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalName cannot be null!!");
				}
				localAdditionalName.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AdditionalName"), xmlWriter);
			}
			if (localAdditionalNameTypeTracker) {
				if (localAdditionalNameType == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalNameType cannot be null!!");
				}
				localAdditionalNameType
						.serialize(
								new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"AdditionalNameType"), xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAdditionalNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AdditionalName"));

				if (localAdditionalName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalName cannot be null!!");
				}
				elementList.add(localAdditionalName);
			}
			if (localAdditionalNameTypeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AdditionalNameType"));

				if (localAdditionalNameType == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalNameType cannot be null!!");
				}
				elementList.add(localAdditionalNameType);
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AdditionalNameTypeDetails parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AdditionalNameTypeDetails object = new AdditionalNameTypeDetails();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"AdditionalNameTypeDetails".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (AdditionalNameTypeDetails) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AdditionalName").equals(reader.getName())) {

						object.setAdditionalName(AdditionalName_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AdditionalNameType").equals(reader
									.getName())) {

						object.setAdditionalNameType(AdditionalNameValType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class EmployerDetailsType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * EmployerDetailsType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for EmployerName
		 */

		protected java.lang.String localEmployerName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localEmployerNameTracker = false;

		public boolean isEmployerNameSpecified() {
			return localEmployerNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getEmployerName() {
			return localEmployerName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            EmployerName
		 */
		public void setEmployerName(java.lang.String param) {
			localEmployerNameTracker = param != null;

			this.localEmployerName = param;

		}

		/**
		 * field for Position
		 */

		protected java.lang.String localPosition;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPositionTracker = false;

		public boolean isPositionSpecified() {
			return localPositionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPosition() {
			return localPosition;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Position
		 */
		public void setPosition(java.lang.String param) {
			localPositionTracker = param != null;

			this.localPosition = param;

		}

		/**
		 * field for Phone
		 */

		protected PhoneType localPhone;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPhoneTracker = false;

		public boolean isPhoneSpecified() {
			return localPhoneTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return PhoneType
		 */
		public PhoneType getPhone() {
			return localPhone;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Phone
		 */
		public void setPhone(PhoneType param) {
			localPhoneTracker = param != null;

			this.localPhone = param;

		}

		/**
		 * field for Address
		 */

		protected AddressType localAddress;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAddressTracker = false;

		public boolean isAddressSpecified() {
			return localAddressTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AddressType
		 */
		public AddressType getAddress() {
			return localAddress;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Address
		 */
		public void setAddress(AddressType param) {
			localAddressTracker = param != null;

			this.localAddress = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":EmployerDetailsType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "EmployerDetailsType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}
			if (localEmployerNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "EmployerName", xmlWriter);

				if (localEmployerName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"EmployerName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localEmployerName);

				}

				xmlWriter.writeEndElement();
			}
			if (localPositionTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Position", xmlWriter);

				if (localPosition == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Position cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPosition);

				}

				xmlWriter.writeEndElement();
			}
			if (localPhoneTracker) {
				if (localPhone == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Phone cannot be null!!");
				}
				localPhone.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Phone"), xmlWriter);
			}
			if (localAddressTracker) {
				if (localAddress == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Address cannot be null!!");
				}
				localAddress.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Address"), xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localEmployerNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"EmployerName"));

				if (localEmployerName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localEmployerName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"EmployerName cannot be null!!");
				}
			}
			if (localPositionTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Position"));

				if (localPosition != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPosition));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Position cannot be null!!");
				}
			}
			if (localPhoneTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Phone"));

				if (localPhone == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Phone cannot be null!!");
				}
				elementList.add(localPhone);
			}
			if (localAddressTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Address"));

				if (localAddress == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Address cannot be null!!");
				}
				elementList.add(localAddress);
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static EmployerDetailsType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				EmployerDetailsType object = new EmployerDetailsType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"EmployerDetailsType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (EmployerDetailsType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"EmployerName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "EmployerName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setEmployerName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Position").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Position"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPosition(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Phone").equals(reader.getName())) {

						object.setPhone(PhoneType.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Address").equals(reader.getName())) {

						object.setAddress(AddressType.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VoterId_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"VoterId_type1", "ns1");

		/**
		 * field for VoterId_type1
		 */

		protected java.lang.String localVoterId_type1;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getVoterId_type1() {
			return localVoterId_type1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VoterId_type1
		 */
		public void setVoterId_type1(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches(
							"([a-zA-Z]{2}[0-9a-zA-Z])\\d+")) {
				this.localVoterId_type1 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localVoterId_type1.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":VoterId_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "VoterId_type1", xmlWriter);
				}
			}

			if (localVoterId_type1 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"VoterId_type1 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localVoterId_type1);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localVoterId_type1) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static VoterId_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				VoterId_type1 returnValue = new VoterId_type1();

				returnValue
						.setVoterId_type1(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static VoterId_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return VoterId_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return VoterId_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static VoterId_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				VoterId_type1 object = new VoterId_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "VoterId_type1"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setVoterId_type1(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class IncomeDetailsType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * IncomeDetailsType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Occupation
		 */

		protected java.lang.String localOccupation;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localOccupationTracker = false;

		public boolean isOccupationSpecified() {
			return localOccupationTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getOccupation() {
			return localOccupation;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Occupation
		 */
		public void setOccupation(java.lang.String param) {
			localOccupationTracker = param != null;

			this.localOccupation = param;

		}

		/**
		 * field for MonthlyIncome
		 */

		protected java.lang.String localMonthlyIncome;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMonthlyIncomeTracker = false;

		public boolean isMonthlyIncomeSpecified() {
			return localMonthlyIncomeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMonthlyIncome() {
			return localMonthlyIncome;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MonthlyIncome
		 */
		public void setMonthlyIncome(java.lang.String param) {
			localMonthlyIncomeTracker = param != null;

			this.localMonthlyIncome = param;

		}

		/**
		 * field for MonthlyExpense
		 */

		protected java.lang.String localMonthlyExpense;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMonthlyExpenseTracker = false;

		public boolean isMonthlyExpenseSpecified() {
			return localMonthlyExpenseTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMonthlyExpense() {
			return localMonthlyExpense;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MonthlyExpense
		 */
		public void setMonthlyExpense(java.lang.String param) {
			localMonthlyExpenseTracker = param != null;

			this.localMonthlyExpense = param;

		}

		/**
		 * field for PovertyIndex
		 */

		protected java.lang.String localPovertyIndex;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPovertyIndexTracker = false;

		public boolean isPovertyIndexSpecified() {
			return localPovertyIndexTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPovertyIndex() {
			return localPovertyIndex;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PovertyIndex
		 */
		public void setPovertyIndex(java.lang.String param) {
			localPovertyIndexTracker = param != null;

			this.localPovertyIndex = param;

		}

		/**
		 * field for AssetOwnership
		 */

		protected java.lang.String localAssetOwnership;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAssetOwnershipTracker = false;

		public boolean isAssetOwnershipSpecified() {
			return localAssetOwnershipTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAssetOwnership() {
			return localAssetOwnership;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AssetOwnership
		 */
		public void setAssetOwnership(java.lang.String param) {
			localAssetOwnershipTracker = param != null;

			this.localAssetOwnership = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":IncomeDetailsType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "IncomeDetailsType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}
			if (localOccupationTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Occupation", xmlWriter);

				if (localOccupation == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Occupation cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localOccupation);

				}

				xmlWriter.writeEndElement();
			}
			if (localMonthlyIncomeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MonthlyIncome", xmlWriter);

				if (localMonthlyIncome == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MonthlyIncome cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMonthlyIncome);

				}

				xmlWriter.writeEndElement();
			}
			if (localMonthlyExpenseTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MonthlyExpense", xmlWriter);

				if (localMonthlyExpense == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MonthlyExpense cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMonthlyExpense);

				}

				xmlWriter.writeEndElement();
			}
			if (localPovertyIndexTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "PovertyIndex", xmlWriter);

				if (localPovertyIndex == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"PovertyIndex cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPovertyIndex);

				}

				xmlWriter.writeEndElement();
			}
			if (localAssetOwnershipTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AssetOwnership", xmlWriter);

				if (localAssetOwnership == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AssetOwnership cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAssetOwnership);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localOccupationTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Occupation"));

				if (localOccupation != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localOccupation));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Occupation cannot be null!!");
				}
			}
			if (localMonthlyIncomeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MonthlyIncome"));

				if (localMonthlyIncome != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMonthlyIncome));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MonthlyIncome cannot be null!!");
				}
			}
			if (localMonthlyExpenseTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MonthlyExpense"));

				if (localMonthlyExpense != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMonthlyExpense));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MonthlyExpense cannot be null!!");
				}
			}
			if (localPovertyIndexTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PovertyIndex"));

				if (localPovertyIndex != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPovertyIndex));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"PovertyIndex cannot be null!!");
				}
			}
			if (localAssetOwnershipTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AssetOwnership"));

				if (localAssetOwnership != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAssetOwnership));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AssetOwnership cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static IncomeDetailsType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				IncomeDetailsType object = new IncomeDetailsType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"IncomeDetailsType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (IncomeDetailsType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Occupation").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Occupation"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setOccupation(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MonthlyIncome").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MonthlyIncome"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMonthlyIncome(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MonthlyExpense").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MonthlyExpense"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMonthlyExpense(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PovertyIndex").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "PovertyIndex"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPovertyIndex(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AssetOwnership").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AssetOwnership"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAssetOwnership(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VoterId_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"VoterId_type0", "ns1");

		/**
		 * field for VoterId_type0
		 */

		protected java.lang.String localVoterId_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getVoterId_type0() {
			return localVoterId_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VoterId_type0
		 */
		public void setVoterId_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches(
							"([a-zA-Z]{2}[0-9a-zA-Z])\\d+")) {
				this.localVoterId_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localVoterId_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":VoterId_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "VoterId_type0", xmlWriter);
				}
			}

			if (localVoterId_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"VoterId_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localVoterId_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localVoterId_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static VoterId_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				VoterId_type0 returnValue = new VoterId_type0();

				returnValue
						.setVoterId_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static VoterId_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return VoterId_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return VoterId_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static VoterId_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				VoterId_type0 object = new VoterId_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "VoterId_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setVoterId_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryCommonAccountDetailsType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * InquiryCommonAccountDetailsType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for InquiryAccount This was an Array!
		 */

		protected AccountInputType[] localInquiryAccount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInquiryAccountTracker = false;

		public boolean isInquiryAccountSpecified() {
			return localInquiryAccountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountInputType[]
		 */
		public AccountInputType[] getInquiryAccount() {
			return localInquiryAccount;
		}

		/**
		 * validate the array for InquiryAccount
		 */
		protected void validateInquiryAccount(AccountInputType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryAccount
		 */
		public void setInquiryAccount(AccountInputType[] param) {

			validateInquiryAccount(param);

			localInquiryAccountTracker = param != null;

			this.localInquiryAccount = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            AccountInputType
		 */
		public void addInquiryAccount(AccountInputType param) {
			if (localInquiryAccount == null) {
				localInquiryAccount = new AccountInputType[] {};
			}

			// update the setting tracker
			localInquiryAccountTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localInquiryAccount);
			list.add(param);
			this.localInquiryAccount = (AccountInputType[]) list
					.toArray(new AccountInputType[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":InquiryCommonAccountDetailsType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "InquiryCommonAccountDetailsType",
							xmlWriter);
				}

			}
			if (localInquiryAccountTracker) {
				if (localInquiryAccount != null) {
					for (int i = 0; i < localInquiryAccount.length; i++) {
						if (localInquiryAccount[i] != null) {
							localInquiryAccount[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"InquiryAccount"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"InquiryAccount cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localInquiryAccountTracker) {
				if (localInquiryAccount != null) {
					for (int i = 0; i < localInquiryAccount.length; i++) {

						if (localInquiryAccount[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"InquiryAccount"));
							elementList.add(localInquiryAccount[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"InquiryAccount cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryCommonAccountDetailsType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryCommonAccountDetailsType object = new InquiryCommonAccountDetailsType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"InquiryCommonAccountDetailsType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (InquiryCommonAccountDetailsType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InquiryAccount").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(AccountInputType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"InquiryAccount").equals(reader
										.getName())) {
									list1.add(AccountInputType.Factory
											.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setInquiryAccount((AccountInputType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(AccountInputType.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PersonalInfoType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * PersonalInfoType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Name
		 */

		protected NameType localName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNameTracker = false;

		public boolean isNameSpecified() {
			return localNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return NameType
		 */
		public NameType getName() {
			return localName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name
		 */
		public void setName(NameType param) {
			localNameTracker = param != null;

			this.localName = param;

		}

		/**
		 * field for PreviousName This was an Array!
		 */

		protected NameType[] localPreviousName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPreviousNameTracker = false;

		public boolean isPreviousNameSpecified() {
			return localPreviousNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return NameType[]
		 */
		public NameType[] getPreviousName() {
			return localPreviousName;
		}

		/**
		 * validate the array for PreviousName
		 */
		protected void validatePreviousName(NameType[] param) {

			if ((param != null) && (param.length > 10)) {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PreviousName
		 */
		public void setPreviousName(NameType[] param) {

			validatePreviousName(param);

			localPreviousNameTracker = param != null;

			this.localPreviousName = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            NameType
		 */
		public void addPreviousName(NameType param) {
			if (localPreviousName == null) {
				localPreviousName = new NameType[] {};
			}

			// update the setting tracker
			localPreviousNameTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localPreviousName);
			list.add(param);
			this.localPreviousName = (NameType[]) list
					.toArray(new NameType[list.size()]);

		}

		/**
		 * field for AliasNameInfo
		 */

		protected AliasNameInfoType localAliasNameInfo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAliasNameInfoTracker = false;

		public boolean isAliasNameInfoSpecified() {
			return localAliasNameInfoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AliasNameInfoType
		 */
		public AliasNameInfoType getAliasNameInfo() {
			return localAliasNameInfo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AliasNameInfo
		 */
		public void setAliasNameInfo(AliasNameInfoType param) {
			localAliasNameInfoTracker = param != null;

			this.localAliasNameInfo = param;

		}

		/**
		 * field for DateOfBirth
		 */

		protected java.util.Date localDateOfBirth;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateOfBirthTracker = false;

		public boolean isDateOfBirthSpecified() {
			return localDateOfBirthTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDateOfBirth() {
			return localDateOfBirth;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DateOfBirth
		 */
		public void setDateOfBirth(java.util.Date param) {
			localDateOfBirthTracker = param != null;

			this.localDateOfBirth = param;

		}

		/**
		 * field for Gender
		 */

		protected GenderTypeCode localGender;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localGenderTracker = false;

		public boolean isGenderSpecified() {
			return localGenderTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return GenderTypeCode
		 */
		public GenderTypeCode getGender() {
			return localGender;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Gender
		 */
		public void setGender(GenderTypeCode param) {
			localGenderTracker = param != null;

			this.localGender = param;

		}

		/**
		 * field for Age
		 */

		protected AgeInfo localAge;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAgeTracker = false;

		public boolean isAgeSpecified() {
			return localAgeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AgeInfo
		 */
		public AgeInfo getAge() {
			return localAge;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Age
		 */
		public void setAge(AgeInfo param) {
			localAgeTracker = param != null;

			this.localAge = param;

		}

		/**
		 * field for PlaceOfBirthInfo
		 */

		protected PlaceOfBirthInfoType localPlaceOfBirthInfo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPlaceOfBirthInfoTracker = false;

		public boolean isPlaceOfBirthInfoSpecified() {
			return localPlaceOfBirthInfoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return PlaceOfBirthInfoType
		 */
		public PlaceOfBirthInfoType getPlaceOfBirthInfo() {
			return localPlaceOfBirthInfo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PlaceOfBirthInfo
		 */
		public void setPlaceOfBirthInfo(PlaceOfBirthInfoType param) {
			localPlaceOfBirthInfoTracker = param != null;

			this.localPlaceOfBirthInfo = param;

		}

		/**
		 * field for TotalIncome
		 */

		protected java.lang.String localTotalIncome;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTotalIncomeTracker = false;

		public boolean isTotalIncomeSpecified() {
			return localTotalIncomeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTotalIncome() {
			return localTotalIncome;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TotalIncome
		 */
		public void setTotalIncome(java.lang.String param) {
			localTotalIncomeTracker = param != null;

			this.localTotalIncome = param;

		}

		/**
		 * field for Occupation
		 */

		protected java.lang.String localOccupation;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localOccupationTracker = false;

		public boolean isOccupationSpecified() {
			return localOccupationTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getOccupation() {
			return localOccupation;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Occupation
		 */
		public void setOccupation(java.lang.String param) {
			localOccupationTracker = param != null;

			this.localOccupation = param;

		}

		/**
		 * field for MaritalStatus
		 */

		protected MaritalStatusOptions localMaritalStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMaritalStatusTracker = false;

		public boolean isMaritalStatusSpecified() {
			return localMaritalStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return MaritalStatusOptions
		 */
		public MaritalStatusOptions getMaritalStatus() {
			return localMaritalStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MaritalStatus
		 */
		public void setMaritalStatus(MaritalStatusOptions param) {
			localMaritalStatusTracker = param != null;

			this.localMaritalStatus = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":PersonalInfoType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "PersonalInfoType", xmlWriter);
				}

			}
			if (localNameTracker) {
				if (localName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Name cannot be null!!");
				}
				localName.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Name"), xmlWriter);
			}
			if (localPreviousNameTracker) {
				if (localPreviousName != null) {
					for (int i = 0; i < localPreviousName.length; i++) {
						if (localPreviousName[i] != null) {
							localPreviousName[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"PreviousName"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PreviousName cannot be null!!");

				}
			}
			if (localAliasNameInfoTracker) {
				if (localAliasNameInfo == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AliasNameInfo cannot be null!!");
				}
				localAliasNameInfo.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AliasNameInfo"), xmlWriter);
			}
			if (localDateOfBirthTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DateOfBirth", xmlWriter);

				if (localDateOfBirth == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DateOfBirth cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateOfBirth));

				}

				xmlWriter.writeEndElement();
			}
			if (localGenderTracker) {
				if (localGender == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Gender cannot be null!!");
				}
				localGender.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Gender"), xmlWriter);
			}
			if (localAgeTracker) {
				if (localAge == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Age cannot be null!!");
				}
				localAge.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Age"), xmlWriter);
			}
			if (localPlaceOfBirthInfoTracker) {
				if (localPlaceOfBirthInfo == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"PlaceOfBirthInfo cannot be null!!");
				}
				localPlaceOfBirthInfo.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PlaceOfBirthInfo"), xmlWriter);
			}
			if (localTotalIncomeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TotalIncome", xmlWriter);

				if (localTotalIncome == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TotalIncome cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localTotalIncome);

				}

				xmlWriter.writeEndElement();
			}
			if (localOccupationTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Occupation", xmlWriter);

				if (localOccupation == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Occupation cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localOccupation);

				}

				xmlWriter.writeEndElement();
			}
			if (localMaritalStatusTracker) {
				if (localMaritalStatus == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MaritalStatus cannot be null!!");
				}
				localMaritalStatus.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MaritalStatus"), xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Name"));

				if (localName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Name cannot be null!!");
				}
				elementList.add(localName);
			}
			if (localPreviousNameTracker) {
				if (localPreviousName != null) {
					for (int i = 0; i < localPreviousName.length; i++) {

						if (localPreviousName[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"PreviousName"));
							elementList.add(localPreviousName[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PreviousName cannot be null!!");

				}

			}
			if (localAliasNameInfoTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AliasNameInfo"));

				if (localAliasNameInfo == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AliasNameInfo cannot be null!!");
				}
				elementList.add(localAliasNameInfo);
			}
			if (localDateOfBirthTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DateOfBirth"));

				if (localDateOfBirth != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateOfBirth));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DateOfBirth cannot be null!!");
				}
			}
			if (localGenderTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Gender"));

				if (localGender == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Gender cannot be null!!");
				}
				elementList.add(localGender);
			}
			if (localAgeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Age"));

				if (localAge == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Age cannot be null!!");
				}
				elementList.add(localAge);
			}
			if (localPlaceOfBirthInfoTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PlaceOfBirthInfo"));

				if (localPlaceOfBirthInfo == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"PlaceOfBirthInfo cannot be null!!");
				}
				elementList.add(localPlaceOfBirthInfo);
			}
			if (localTotalIncomeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TotalIncome"));

				if (localTotalIncome != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalIncome));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TotalIncome cannot be null!!");
				}
			}
			if (localOccupationTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Occupation"));

				if (localOccupation != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localOccupation));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Occupation cannot be null!!");
				}
			}
			if (localMaritalStatusTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MaritalStatus"));

				if (localMaritalStatus == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MaritalStatus cannot be null!!");
				}
				elementList.add(localMaritalStatus);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static PersonalInfoType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				PersonalInfoType object = new PersonalInfoType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"PersonalInfoType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (PersonalInfoType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list2 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Name").equals(reader.getName())) {

						object.setName(NameType.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PreviousName").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list2.add(NameType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone2 = false;
						while (!loopDone2) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone2 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"PreviousName")
										.equals(reader.getName())) {
									list2.add(NameType.Factory.parse(reader));

								} else {
									loopDone2 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setPreviousName((NameType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(NameType.class, list2));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AliasNameInfo").equals(reader.getName())) {

						object.setAliasNameInfo(AliasNameInfoType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DateOfBirth").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DateOfBirth"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDateOfBirth(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Gender").equals(reader.getName())) {

						object.setGender(GenderTypeCode.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Age").equals(reader.getName())) {

						object.setAge(AgeInfo.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PlaceOfBirthInfo")
									.equals(reader.getName())) {

						object.setPlaceOfBirthInfo(PlaceOfBirthInfoType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TotalIncome").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TotalIncome"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTotalIncome(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Occupation").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Occupation"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setOccupation(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MaritalStatus").equals(reader.getName())) {

						object.setMaritalStatus(MaritalStatusOptions.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AccountHistoryType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * AccountHistoryType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Month This was an Array!
		 */

		protected MonthlyDetailType[] localMonth;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMonthTracker = false;

		public boolean isMonthSpecified() {
			return localMonthTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return MonthlyDetailType[]
		 */
		public MonthlyDetailType[] getMonth() {
			return localMonth;
		}

		/**
		 * validate the array for Month
		 */
		protected void validateMonth(MonthlyDetailType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Month
		 */
		public void setMonth(MonthlyDetailType[] param) {

			validateMonth(param);

			localMonthTracker = param != null;

			this.localMonth = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            MonthlyDetailType
		 */
		public void addMonth(MonthlyDetailType param) {
			if (localMonth == null) {
				localMonth = new MonthlyDetailType[] {};
			}

			// update the setting tracker
			localMonthTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localMonth);
			list.add(param);
			this.localMonth = (MonthlyDetailType[]) list
					.toArray(new MonthlyDetailType[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AccountHistoryType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AccountHistoryType", xmlWriter);
				}

			}
			if (localMonthTracker) {
				if (localMonth != null) {
					for (int i = 0; i < localMonth.length; i++) {
						if (localMonth[i] != null) {
							localMonth[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"Month"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"Month cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localMonthTracker) {
				if (localMonth != null) {
					for (int i = 0; i < localMonth.length; i++) {

						if (localMonth[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"Month"));
							elementList.add(localMonth[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"Month cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AccountHistoryType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AccountHistoryType object = new AccountHistoryType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"AccountHistoryType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (AccountHistoryType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Month").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(MonthlyDetailType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"Month").equals(reader.getName())) {
									list1.add(MonthlyDetailType.Factory
											.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setMonth((MonthlyDetailType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(MonthlyDetailType.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ScoringElementType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * ScoringElementType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Code
		 */

		protected java.lang.String localCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCodeTracker = false;

		public boolean isCodeSpecified() {
			return localCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCode() {
			return localCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Code
		 */
		public void setCode(java.lang.String param) {
			localCodeTracker = param != null;

			this.localCode = param;

		}

		/**
		 * field for Description
		 */

		protected java.lang.String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDescriptionTracker = false;

		public boolean isDescriptionSpecified() {
			return localDescriptionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDescription() {
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(java.lang.String param) {
			localDescriptionTracker = param != null;

			this.localDescription = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for Type This was an Attribute!
		 */

		protected java.lang.String localType;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getType() {
			return localType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Type
		 */
		public void setType(java.lang.String param) {

			this.localType = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":ScoringElementType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ScoringElementType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localType != null) {

				writeAttribute("", "type",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localType), xmlWriter);

			}
			if (localCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Code", xmlWriter);

				if (localCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Code cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localDescriptionTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Description", xmlWriter);

				if (localDescription == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Description cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Code"));

				if (localCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Code cannot be null!!");
				}
			}
			if (localDescriptionTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Description"));

				if (localDescription != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDescription));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Description cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "type"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localType));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ScoringElementType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ScoringElementType object = new ScoringElementType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"ScoringElementType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (ScoringElementType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "type"
					java.lang.String tempAttribType =

					reader.getAttributeValue(null, "type");

					if (tempAttribType != null) {
						java.lang.String content = tempAttribType;

						object.setType(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(tempAttribType));

					} else {

					}
					handledAttributes.add("type");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Code").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Code"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Description").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Description"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AgeInfo implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * AgeInfo Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Age
		 */

		protected java.lang.String localAge;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAge() {
			return localAge;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Age
		 */
		public void setAge(java.lang.String param) {

			this.localAge = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AgeInfo", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AgeInfo", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "Age", xmlWriter);

			if (localAge == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"Age cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localAge);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0", "Age"));

			if (localAge != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localAge));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"Age cannot be null!!");
			}

			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AgeInfo parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AgeInfo object = new AgeInfo();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"AgeInfo".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (AgeInfo) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Age").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Age"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAge(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class IDAndContactType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * IDAndContactType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for PersonalInfo
		 */

		protected PersonalInfoType localPersonalInfo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPersonalInfoTracker = false;

		public boolean isPersonalInfoSpecified() {
			return localPersonalInfoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return PersonalInfoType
		 */
		public PersonalInfoType getPersonalInfo() {
			return localPersonalInfo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PersonalInfo
		 */
		public void setPersonalInfo(PersonalInfoType param) {
			localPersonalInfoTracker = param != null;

			this.localPersonalInfo = param;

		}

		/**
		 * field for IdentityInfo
		 */

		protected IdentificationType localIdentityInfo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localIdentityInfoTracker = false;

		public boolean isIdentityInfoSpecified() {
			return localIdentityInfoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IdentificationType
		 */
		public IdentificationType getIdentityInfo() {
			return localIdentityInfo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            IdentityInfo
		 */
		public void setIdentityInfo(IdentificationType param) {
			localIdentityInfoTracker = param != null;

			this.localIdentityInfo = param;

		}

		/**
		 * field for AddressInfo This was an Array!
		 */

		protected AddressType[] localAddressInfo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAddressInfoTracker = false;

		public boolean isAddressInfoSpecified() {
			return localAddressInfoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AddressType[]
		 */
		public AddressType[] getAddressInfo() {
			return localAddressInfo;
		}

		/**
		 * validate the array for AddressInfo
		 */
		protected void validateAddressInfo(AddressType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AddressInfo
		 */
		public void setAddressInfo(AddressType[] param) {

			validateAddressInfo(param);

			localAddressInfoTracker = param != null;

			this.localAddressInfo = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            AddressType
		 */
		public void addAddressInfo(AddressType param) {
			if (localAddressInfo == null) {
				localAddressInfo = new AddressType[] {};
			}

			// update the setting tracker
			localAddressInfoTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localAddressInfo);
			list.add(param);
			this.localAddressInfo = (AddressType[]) list
					.toArray(new AddressType[list.size()]);

		}

		/**
		 * field for FamilyDetails
		 */

		protected FamilyInfo localFamilyDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localFamilyDetailsTracker = false;

		public boolean isFamilyDetailsSpecified() {
			return localFamilyDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return FamilyInfo
		 */
		public FamilyInfo getFamilyDetails() {
			return localFamilyDetails;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FamilyDetails
		 */
		public void setFamilyDetails(FamilyInfo param) {
			localFamilyDetailsTracker = param != null;

			this.localFamilyDetails = param;

		}

		/**
		 * field for PhoneInfo This was an Array!
		 */

		protected PhoneType[] localPhoneInfo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPhoneInfoTracker = false;

		public boolean isPhoneInfoSpecified() {
			return localPhoneInfoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return PhoneType[]
		 */
		public PhoneType[] getPhoneInfo() {
			return localPhoneInfo;
		}

		/**
		 * validate the array for PhoneInfo
		 */
		protected void validatePhoneInfo(PhoneType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PhoneInfo
		 */
		public void setPhoneInfo(PhoneType[] param) {

			validatePhoneInfo(param);

			localPhoneInfoTracker = param != null;

			this.localPhoneInfo = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            PhoneType
		 */
		public void addPhoneInfo(PhoneType param) {
			if (localPhoneInfo == null) {
				localPhoneInfo = new PhoneType[] {};
			}

			// update the setting tracker
			localPhoneInfoTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localPhoneInfo);
			list.add(param);
			this.localPhoneInfo = (PhoneType[]) list.toArray(new PhoneType[list
					.size()]);

		}

		/**
		 * field for EmailAddressInfo This was an Array!
		 */

		protected EmailAddressType[] localEmailAddressInfo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localEmailAddressInfoTracker = false;

		public boolean isEmailAddressInfoSpecified() {
			return localEmailAddressInfoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return EmailAddressType[]
		 */
		public EmailAddressType[] getEmailAddressInfo() {
			return localEmailAddressInfo;
		}

		/**
		 * validate the array for EmailAddressInfo
		 */
		protected void validateEmailAddressInfo(EmailAddressType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            EmailAddressInfo
		 */
		public void setEmailAddressInfo(EmailAddressType[] param) {

			validateEmailAddressInfo(param);

			localEmailAddressInfoTracker = param != null;

			this.localEmailAddressInfo = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            EmailAddressType
		 */
		public void addEmailAddressInfo(EmailAddressType param) {
			if (localEmailAddressInfo == null) {
				localEmailAddressInfo = new EmailAddressType[] {};
			}

			// update the setting tracker
			localEmailAddressInfoTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localEmailAddressInfo);
			list.add(param);
			this.localEmailAddressInfo = (EmailAddressType[]) list
					.toArray(new EmailAddressType[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":IDAndContactType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "IDAndContactType", xmlWriter);
				}

			}
			if (localPersonalInfoTracker) {
				if (localPersonalInfo == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"PersonalInfo cannot be null!!");
				}
				localPersonalInfo.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PersonalInfo"), xmlWriter);
			}
			if (localIdentityInfoTracker) {
				if (localIdentityInfo == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"IdentityInfo cannot be null!!");
				}
				localIdentityInfo.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"IdentityInfo"), xmlWriter);
			}
			if (localAddressInfoTracker) {
				if (localAddressInfo != null) {
					for (int i = 0; i < localAddressInfo.length; i++) {
						if (localAddressInfo[i] != null) {
							localAddressInfo[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"AddressInfo"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"AddressInfo cannot be null!!");

				}
			}
			if (localFamilyDetailsTracker) {
				if (localFamilyDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"FamilyDetails cannot be null!!");
				}
				localFamilyDetails.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"FamilyDetails"), xmlWriter);
			}
			if (localPhoneInfoTracker) {
				if (localPhoneInfo != null) {
					for (int i = 0; i < localPhoneInfo.length; i++) {
						if (localPhoneInfo[i] != null) {
							localPhoneInfo[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"PhoneInfo"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PhoneInfo cannot be null!!");

				}
			}
			if (localEmailAddressInfoTracker) {
				if (localEmailAddressInfo != null) {
					for (int i = 0; i < localEmailAddressInfo.length; i++) {
						if (localEmailAddressInfo[i] != null) {
							localEmailAddressInfo[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"EmailAddressInfo"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"EmailAddressInfo cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPersonalInfoTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PersonalInfo"));

				if (localPersonalInfo == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"PersonalInfo cannot be null!!");
				}
				elementList.add(localPersonalInfo);
			}
			if (localIdentityInfoTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"IdentityInfo"));

				if (localIdentityInfo == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"IdentityInfo cannot be null!!");
				}
				elementList.add(localIdentityInfo);
			}
			if (localAddressInfoTracker) {
				if (localAddressInfo != null) {
					for (int i = 0; i < localAddressInfo.length; i++) {

						if (localAddressInfo[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"AddressInfo"));
							elementList.add(localAddressInfo[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"AddressInfo cannot be null!!");

				}

			}
			if (localFamilyDetailsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"FamilyDetails"));

				if (localFamilyDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"FamilyDetails cannot be null!!");
				}
				elementList.add(localFamilyDetails);
			}
			if (localPhoneInfoTracker) {
				if (localPhoneInfo != null) {
					for (int i = 0; i < localPhoneInfo.length; i++) {

						if (localPhoneInfo[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"PhoneInfo"));
							elementList.add(localPhoneInfo[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PhoneInfo cannot be null!!");

				}

			}
			if (localEmailAddressInfoTracker) {
				if (localEmailAddressInfo != null) {
					for (int i = 0; i < localEmailAddressInfo.length; i++) {

						if (localEmailAddressInfo[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"EmailAddressInfo"));
							elementList.add(localEmailAddressInfo[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"EmailAddressInfo cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static IDAndContactType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				IDAndContactType object = new IDAndContactType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"IDAndContactType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (IDAndContactType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list3 = new java.util.ArrayList();

					java.util.ArrayList list5 = new java.util.ArrayList();

					java.util.ArrayList list6 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PersonalInfo").equals(reader.getName())) {

						object.setPersonalInfo(PersonalInfoType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"IdentityInfo").equals(reader.getName())) {

						object.setIdentityInfo(IdentificationType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AddressInfo").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list3.add(AddressType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone3 = false;
						while (!loopDone3) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone3 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"AddressInfo").equals(reader.getName())) {
									list3.add(AddressType.Factory.parse(reader));

								} else {
									loopDone3 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setAddressInfo((AddressType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(AddressType.class, list3));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"FamilyDetails").equals(reader.getName())) {

						object.setFamilyDetails(FamilyInfo.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PhoneInfo").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list5.add(PhoneType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone5 = false;
						while (!loopDone5) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone5 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"PhoneInfo").equals(reader.getName())) {
									list5.add(PhoneType.Factory.parse(reader));

								} else {
									loopDone5 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setPhoneInfo((PhoneType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(PhoneType.class, list5));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"EmailAddressInfo")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list6.add(EmailAddressType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone6 = false;
						while (!loopDone6) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone6 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"EmailAddressInfo").equals(reader
										.getName())) {
									list6.add(EmailAddressType.Factory
											.parse(reader));

								} else {
									loopDone6 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setEmailAddressInfo((EmailAddressType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(EmailAddressType.class, list6));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AccountType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * AccountType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AdditionalMFIDetails
		 */

		protected AdditionalMFIDetailsType localAdditionalMFIDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAdditionalMFIDetailsTracker = false;

		public boolean isAdditionalMFIDetailsSpecified() {
			return localAdditionalMFIDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AdditionalMFIDetailsType
		 */
		public AdditionalMFIDetailsType getAdditionalMFIDetails() {
			return localAdditionalMFIDetails;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalMFIDetails
		 */
		public void setAdditionalMFIDetails(AdditionalMFIDetailsType param) {
			localAdditionalMFIDetailsTracker = param != null;

			this.localAdditionalMFIDetails = param;

		}

		/**
		 * field for ClientName
		 */

		protected java.lang.String localClientName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localClientNameTracker = false;

		public boolean isClientNameSpecified() {
			return localClientNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getClientName() {
			return localClientName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ClientName
		 */
		public void setClientName(java.lang.String param) {
			localClientNameTracker = param != null;

			this.localClientName = param;

		}

		/**
		 * field for AccountNumber
		 */

		protected java.lang.String localAccountNumber;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountNumberTracker = false;

		public boolean isAccountNumberSpecified() {
			return localAccountNumberTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAccountNumber() {
			return localAccountNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountNumber
		 */
		public void setAccountNumber(java.lang.String param) {
			localAccountNumberTracker = param != null;

			this.localAccountNumber = param;

		}

		/**
		 * field for CurrentBalance
		 */

		protected java.math.BigDecimal localCurrentBalance;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCurrentBalanceTracker = false;

		public boolean isCurrentBalanceSpecified() {
			return localCurrentBalanceTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getCurrentBalance() {
			return localCurrentBalance;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CurrentBalance
		 */
		public void setCurrentBalance(java.math.BigDecimal param) {
			localCurrentBalanceTracker = param != null;

			this.localCurrentBalance = param;

		}

		/**
		 * field for Institution
		 */

		protected java.lang.String localInstitution;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInstitutionTracker = false;

		public boolean isInstitutionSpecified() {
			return localInstitutionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getInstitution() {
			return localInstitution;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Institution
		 */
		public void setInstitution(java.lang.String param) {
			localInstitutionTracker = param != null;

			this.localInstitution = param;

		}

		/**
		 * field for AccountType
		 */

		protected java.lang.String localAccountType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountTypeTracker = false;

		public boolean isAccountTypeSpecified() {
			return localAccountTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAccountType() {
			return localAccountType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountType
		 */
		public void setAccountType(java.lang.String param) {
			localAccountTypeTracker = param != null;

			this.localAccountType = param;

		}

		/**
		 * field for OwnershipType
		 */

		protected java.lang.String localOwnershipType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localOwnershipTypeTracker = false;

		public boolean isOwnershipTypeSpecified() {
			return localOwnershipTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getOwnershipType() {
			return localOwnershipType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            OwnershipType
		 */
		public void setOwnershipType(java.lang.String param) {
			localOwnershipTypeTracker = param != null;

			this.localOwnershipType = param;

		}

		/**
		 * field for Balance
		 */

		protected java.math.BigDecimal localBalance;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localBalanceTracker = false;

		public boolean isBalanceSpecified() {
			return localBalanceTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getBalance() {
			return localBalance;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Balance
		 */
		public void setBalance(java.math.BigDecimal param) {
			localBalanceTracker = param != null;

			this.localBalance = param;

		}

		/**
		 * field for PastDueAmount
		 */

		protected java.math.BigDecimal localPastDueAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPastDueAmountTracker = false;

		public boolean isPastDueAmountSpecified() {
			return localPastDueAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getPastDueAmount() {
			return localPastDueAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PastDueAmount
		 */
		public void setPastDueAmount(java.math.BigDecimal param) {
			localPastDueAmountTracker = param != null;

			this.localPastDueAmount = param;

		}

		/**
		 * field for DatePastDue
		 */

		protected java.lang.String localDatePastDue;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDatePastDueTracker = false;

		public boolean isDatePastDueSpecified() {
			return localDatePastDueTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDatePastDue() {
			return localDatePastDue;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DatePastDue
		 */
		public void setDatePastDue(java.lang.String param) {
			localDatePastDueTracker = param != null;

			this.localDatePastDue = param;

		}

		/**
		 * field for DisbursedAmount
		 */

		protected java.math.BigDecimal localDisbursedAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDisbursedAmountTracker = false;

		public boolean isDisbursedAmountSpecified() {
			return localDisbursedAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getDisbursedAmount() {
			return localDisbursedAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DisbursedAmount
		 */
		public void setDisbursedAmount(java.math.BigDecimal param) {
			localDisbursedAmountTracker = param != null;

			this.localDisbursedAmount = param;

		}

		/**
		 * field for LoanCategory
		 */

		protected java.lang.String localLoanCategory;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLoanCategoryTracker = false;

		public boolean isLoanCategorySpecified() {
			return localLoanCategoryTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLoanCategory() {
			return localLoanCategory;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LoanCategory
		 */
		public void setLoanCategory(java.lang.String param) {
			localLoanCategoryTracker = param != null;

			this.localLoanCategory = param;

		}

		/**
		 * field for LoanPurpose
		 */

		protected java.lang.String localLoanPurpose;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLoanPurposeTracker = false;

		public boolean isLoanPurposeSpecified() {
			return localLoanPurposeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLoanPurpose() {
			return localLoanPurpose;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LoanPurpose
		 */
		public void setLoanPurpose(java.lang.String param) {
			localLoanPurposeTracker = param != null;

			this.localLoanPurpose = param;

		}

		/**
		 * field for LastPayment
		 */

		protected java.math.BigDecimal localLastPayment;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLastPaymentTracker = false;

		public boolean isLastPaymentSpecified() {
			return localLastPaymentTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getLastPayment() {
			return localLastPayment;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastPayment
		 */
		public void setLastPayment(java.math.BigDecimal param) {
			localLastPaymentTracker = param != null;

			this.localLastPayment = param;

		}

		/**
		 * field for WriteOffAmount
		 */

		protected java.math.BigDecimal localWriteOffAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localWriteOffAmountTracker = false;

		public boolean isWriteOffAmountSpecified() {
			return localWriteOffAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getWriteOffAmount() {
			return localWriteOffAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WriteOffAmount
		 */
		public void setWriteOffAmount(java.math.BigDecimal param) {
			localWriteOffAmountTracker = param != null;

			this.localWriteOffAmount = param;

		}

		/**
		 * field for Open
		 */

		protected java.lang.String localOpen;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localOpenTracker = false;

		public boolean isOpenSpecified() {
			return localOpenTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getOpen() {
			return localOpen;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Open
		 */
		public void setOpen(java.lang.String param) {
			localOpenTracker = param != null;

			this.localOpen = param;

		}

		/**
		 * field for SanctionAmount
		 */

		protected java.math.BigDecimal localSanctionAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSanctionAmountTracker = false;

		public boolean isSanctionAmountSpecified() {
			return localSanctionAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getSanctionAmount() {
			return localSanctionAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SanctionAmount
		 */
		public void setSanctionAmount(java.math.BigDecimal param) {
			localSanctionAmountTracker = param != null;

			this.localSanctionAmount = param;

		}

		/**
		 * field for HighCredit
		 */

		protected java.math.BigDecimal localHighCredit;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localHighCreditTracker = false;

		public boolean isHighCreditSpecified() {
			return localHighCreditTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getHighCredit() {
			return localHighCredit;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HighCredit
		 */
		public void setHighCredit(java.math.BigDecimal param) {
			localHighCreditTracker = param != null;

			this.localHighCredit = param;

		}

		/**
		 * field for LastPaymentDate
		 */

		protected java.util.Date localLastPaymentDate;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLastPaymentDateTracker = false;

		public boolean isLastPaymentDateSpecified() {
			return localLastPaymentDateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getLastPaymentDate() {
			return localLastPaymentDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastPaymentDate
		 */
		public void setLastPaymentDate(java.util.Date param) {
			localLastPaymentDateTracker = param != null;

			this.localLastPaymentDate = param;

		}

		/**
		 * field for DateReported
		 */

		protected java.util.Date localDateReported;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateReportedTracker = false;

		public boolean isDateReportedSpecified() {
			return localDateReportedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDateReported() {
			return localDateReported;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DateReported
		 */
		public void setDateReported(java.util.Date param) {
			localDateReportedTracker = param != null;

			this.localDateReported = param;

		}

		/**
		 * field for DateOpened
		 */

		protected java.util.Date localDateOpened;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateOpenedTracker = false;

		public boolean isDateOpenedSpecified() {
			return localDateOpenedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDateOpened() {
			return localDateOpened;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DateOpened
		 */
		public void setDateOpened(java.util.Date param) {
			localDateOpenedTracker = param != null;

			this.localDateOpened = param;

		}

		/**
		 * field for DateClosed
		 */

		protected java.util.Date localDateClosed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateClosedTracker = false;

		public boolean isDateClosedSpecified() {
			return localDateClosedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDateClosed() {
			return localDateClosed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DateClosed
		 */
		public void setDateClosed(java.util.Date param) {
			localDateClosedTracker = param != null;

			this.localDateClosed = param;

		}

		/**
		 * field for Reason
		 */

		protected java.lang.String localReason;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localReasonTracker = false;

		public boolean isReasonSpecified() {
			return localReasonTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getReason() {
			return localReason;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Reason
		 */
		public void setReason(java.lang.String param) {
			localReasonTracker = param != null;

			this.localReason = param;

		}

		/**
		 * field for DateWrittenOff
		 */

		protected java.util.Date localDateWrittenOff;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateWrittenOffTracker = false;

		public boolean isDateWrittenOffSpecified() {
			return localDateWrittenOffTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDateWrittenOff() {
			return localDateWrittenOff;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DateWrittenOff
		 */
		public void setDateWrittenOff(java.util.Date param) {
			localDateWrittenOffTracker = param != null;

			this.localDateWrittenOff = param;

		}

		/**
		 * field for LoanCycleID
		 */

		protected java.lang.String localLoanCycleID;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLoanCycleIDTracker = false;

		public boolean isLoanCycleIDSpecified() {
			return localLoanCycleIDTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLoanCycleID() {
			return localLoanCycleID;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LoanCycleID
		 */
		public void setLoanCycleID(java.lang.String param) {
			localLoanCycleIDTracker = param != null;

			this.localLoanCycleID = param;

		}

		/**
		 * field for DateSanctioned
		 */

		protected java.util.Date localDateSanctioned;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateSanctionedTracker = false;

		public boolean isDateSanctionedSpecified() {
			return localDateSanctionedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDateSanctioned() {
			return localDateSanctioned;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DateSanctioned
		 */
		public void setDateSanctioned(java.util.Date param) {
			localDateSanctionedTracker = param != null;

			this.localDateSanctioned = param;

		}

		/**
		 * field for DateApplied
		 */

		protected java.util.Date localDateApplied;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateAppliedTracker = false;

		public boolean isDateAppliedSpecified() {
			return localDateAppliedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDateApplied() {
			return localDateApplied;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DateApplied
		 */
		public void setDateApplied(java.util.Date param) {
			localDateAppliedTracker = param != null;

			this.localDateApplied = param;

		}

		/**
		 * field for InterestRate
		 */

		protected java.lang.String localInterestRate;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInterestRateTracker = false;

		public boolean isInterestRateSpecified() {
			return localInterestRateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getInterestRate() {
			return localInterestRate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InterestRate
		 */
		public void setInterestRate(java.lang.String param) {
			localInterestRateTracker = param != null;

			this.localInterestRate = param;

		}

		/**
		 * field for AppliedAmount
		 */

		protected java.math.BigDecimal localAppliedAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAppliedAmountTracker = false;

		public boolean isAppliedAmountSpecified() {
			return localAppliedAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getAppliedAmount() {
			return localAppliedAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AppliedAmount
		 */
		public void setAppliedAmount(java.math.BigDecimal param) {
			localAppliedAmountTracker = param != null;

			this.localAppliedAmount = param;

		}

		/**
		 * field for NoOfInstallments
		 */

		protected int localNoOfInstallments;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNoOfInstallmentsTracker = false;

		public boolean isNoOfInstallmentsSpecified() {
			return localNoOfInstallmentsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNoOfInstallments() {
			return localNoOfInstallments;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NoOfInstallments
		 */
		public void setNoOfInstallments(int param) {

			// setting primitive attribute tracker to true
			localNoOfInstallmentsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNoOfInstallments = param;

		}

		/**
		 * field for RepaymentTenure
		 */

		protected java.lang.String localRepaymentTenure;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRepaymentTenureTracker = false;

		public boolean isRepaymentTenureSpecified() {
			return localRepaymentTenureTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRepaymentTenure() {
			return localRepaymentTenure;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RepaymentTenure
		 */
		public void setRepaymentTenure(java.lang.String param) {
			localRepaymentTenureTracker = param != null;

			this.localRepaymentTenure = param;

		}

		/**
		 * field for DisputeCode
		 */

		protected java.lang.String localDisputeCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDisputeCodeTracker = false;

		public boolean isDisputeCodeSpecified() {
			return localDisputeCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDisputeCode() {
			return localDisputeCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DisputeCode
		 */
		public void setDisputeCode(java.lang.String param) {
			localDisputeCodeTracker = param != null;

			this.localDisputeCode = param;

		}

		/**
		 * field for InstallmentAmount
		 */

		protected java.math.BigDecimal localInstallmentAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInstallmentAmountTracker = false;

		public boolean isInstallmentAmountSpecified() {
			return localInstallmentAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getInstallmentAmount() {
			return localInstallmentAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InstallmentAmount
		 */
		public void setInstallmentAmount(java.math.BigDecimal param) {
			localInstallmentAmountTracker = param != null;

			this.localInstallmentAmount = param;

		}

		/**
		 * field for KeyPerson
		 */

		protected RelationInfoType localKeyPerson;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localKeyPersonTracker = false;

		public boolean isKeyPersonSpecified() {
			return localKeyPersonTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return RelationInfoType
		 */
		public RelationInfoType getKeyPerson() {
			return localKeyPerson;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            KeyPerson
		 */
		public void setKeyPerson(RelationInfoType param) {
			localKeyPersonTracker = param != null;

			this.localKeyPerson = param;

		}

		/**
		 * field for Nominee
		 */

		protected RelationInfoType localNominee;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNomineeTracker = false;

		public boolean isNomineeSpecified() {
			return localNomineeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return RelationInfoType
		 */
		public RelationInfoType getNominee() {
			return localNominee;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Nominee
		 */
		public void setNominee(RelationInfoType param) {
			localNomineeTracker = param != null;

			this.localNominee = param;

		}

		/**
		 * field for TermFrequency
		 */

		protected java.lang.String localTermFrequency;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTermFrequencyTracker = false;

		public boolean isTermFrequencySpecified() {
			return localTermFrequencyTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTermFrequency() {
			return localTermFrequency;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TermFrequency
		 */
		public void setTermFrequency(java.lang.String param) {
			localTermFrequencyTracker = param != null;

			this.localTermFrequency = param;

		}

		/**
		 * field for CreditLimit
		 */

		protected java.math.BigDecimal localCreditLimit;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCreditLimitTracker = false;

		public boolean isCreditLimitSpecified() {
			return localCreditLimitTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getCreditLimit() {
			return localCreditLimit;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CreditLimit
		 */
		public void setCreditLimit(java.math.BigDecimal param) {
			localCreditLimitTracker = param != null;

			this.localCreditLimit = param;

		}

		/**
		 * field for CollateralValue
		 */

		protected java.lang.String localCollateralValue;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCollateralValueTracker = false;

		public boolean isCollateralValueSpecified() {
			return localCollateralValueTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCollateralValue() {
			return localCollateralValue;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CollateralValue
		 */
		public void setCollateralValue(java.lang.String param) {
			localCollateralValueTracker = param != null;

			this.localCollateralValue = param;

		}

		/**
		 * field for CollateralType
		 */

		protected java.lang.String localCollateralType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCollateralTypeTracker = false;

		public boolean isCollateralTypeSpecified() {
			return localCollateralTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCollateralType() {
			return localCollateralType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CollateralType
		 */
		public void setCollateralType(java.lang.String param) {
			localCollateralTypeTracker = param != null;

			this.localCollateralType = param;

		}

		/**
		 * field for AccountStatus
		 */

		protected java.lang.String localAccountStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountStatusTracker = false;

		public boolean isAccountStatusSpecified() {
			return localAccountStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAccountStatus() {
			return localAccountStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountStatus
		 */
		public void setAccountStatus(java.lang.String param) {
			localAccountStatusTracker = param != null;

			this.localAccountStatus = param;

		}

		/**
		 * field for AssetClassification
		 */

		protected java.lang.String localAssetClassification;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAssetClassificationTracker = false;

		public boolean isAssetClassificationSpecified() {
			return localAssetClassificationTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAssetClassification() {
			return localAssetClassification;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AssetClassification
		 */
		public void setAssetClassification(java.lang.String param) {
			localAssetClassificationTracker = param != null;

			this.localAssetClassification = param;

		}

		/**
		 * field for SuitFiledStatus
		 */

		protected java.lang.String localSuitFiledStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSuitFiledStatusTracker = false;

		public boolean isSuitFiledStatusSpecified() {
			return localSuitFiledStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getSuitFiledStatus() {
			return localSuitFiledStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SuitFiledStatus
		 */
		public void setSuitFiledStatus(java.lang.String param) {
			localSuitFiledStatusTracker = param != null;

			this.localSuitFiledStatus = param;

		}

		/**
		 * field for History48Months
		 */

		protected AccountHistoryType localHistory48Months;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localHistory48MonthsTracker = false;

		public boolean isHistory48MonthsSpecified() {
			return localHistory48MonthsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountHistoryType
		 */
		public AccountHistoryType getHistory48Months() {
			return localHistory48Months;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            History48Months
		 */
		public void setHistory48Months(AccountHistoryType param) {
			localHistory48MonthsTracker = param != null;

			this.localHistory48Months = param;

		}

		/**
		 * field for History24Months
		 */

		protected AccountHistoryType localHistory24Months;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localHistory24MonthsTracker = false;

		public boolean isHistory24MonthsSpecified() {
			return localHistory24MonthsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountHistoryType
		 */
		public AccountHistoryType getHistory24Months() {
			return localHistory24Months;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            History24Months
		 */
		public void setHistory24Months(AccountHistoryType param) {
			localHistory24MonthsTracker = param != null;

			this.localHistory24Months = param;

		}

		/**
		 * field for BranchIDMFI
		 */

		protected java.lang.String localBranchIDMFI;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localBranchIDMFITracker = false;

		public boolean isBranchIDMFISpecified() {
			return localBranchIDMFITracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getBranchIDMFI() {
			return localBranchIDMFI;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            BranchIDMFI
		 */
		public void setBranchIDMFI(java.lang.String param) {
			localBranchIDMFITracker = param != null;

			this.localBranchIDMFI = param;

		}

		/**
		 * field for KendraIDMFI
		 */

		protected java.lang.String localKendraIDMFI;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localKendraIDMFITracker = false;

		public boolean isKendraIDMFISpecified() {
			return localKendraIDMFITracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getKendraIDMFI() {
			return localKendraIDMFI;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            KendraIDMFI
		 */
		public void setKendraIDMFI(java.lang.String param) {
			localKendraIDMFITracker = param != null;

			this.localKendraIDMFI = param;

		}

		/**
		 * field for DaysPastDue
		 */

		protected int localDaysPastDue;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDaysPastDueTracker = false;

		public boolean isDaysPastDueSpecified() {
			return localDaysPastDueTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getDaysPastDue() {
			return localDaysPastDue;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DaysPastDue
		 */
		public void setDaysPastDue(int param) {

			// setting primitive attribute tracker to true
			localDaysPastDueTracker = param != java.lang.Integer.MIN_VALUE;

			this.localDaysPastDue = param;

		}

		/**
		 * field for TypeOfInsurance
		 */

		protected java.lang.String localTypeOfInsurance;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTypeOfInsuranceTracker = false;

		public boolean isTypeOfInsuranceSpecified() {
			return localTypeOfInsuranceTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTypeOfInsurance() {
			return localTypeOfInsurance;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TypeOfInsurance
		 */
		public void setTypeOfInsurance(java.lang.String param) {
			localTypeOfInsuranceTracker = param != null;

			this.localTypeOfInsurance = param;

		}

		/**
		 * field for InsurancePolicyAmount
		 */

		protected java.math.BigDecimal localInsurancePolicyAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInsurancePolicyAmountTracker = false;

		public boolean isInsurancePolicyAmountSpecified() {
			return localInsurancePolicyAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getInsurancePolicyAmount() {
			return localInsurancePolicyAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InsurancePolicyAmount
		 */
		public void setInsurancePolicyAmount(java.math.BigDecimal param) {
			localInsurancePolicyAmountTracker = param != null;

			this.localInsurancePolicyAmount = param;

		}

		/**
		 * field for NumberOfMeetingsHeld
		 */

		protected int localNumberOfMeetingsHeld;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNumberOfMeetingsHeldTracker = false;

		public boolean isNumberOfMeetingsHeldSpecified() {
			return localNumberOfMeetingsHeldTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNumberOfMeetingsHeld() {
			return localNumberOfMeetingsHeld;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NumberOfMeetingsHeld
		 */
		public void setNumberOfMeetingsHeld(int param) {

			// setting primitive attribute tracker to true
			localNumberOfMeetingsHeldTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNumberOfMeetingsHeld = param;

		}

		/**
		 * field for NumberOfMeetingsMissed
		 */

		protected int localNumberOfMeetingsMissed;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNumberOfMeetingsMissedTracker = false;

		public boolean isNumberOfMeetingsMissedSpecified() {
			return localNumberOfMeetingsMissedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNumberOfMeetingsMissed() {
			return localNumberOfMeetingsMissed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NumberOfMeetingsMissed
		 */
		public void setNumberOfMeetingsMissed(int param) {

			// setting primitive attribute tracker to true
			localNumberOfMeetingsMissedTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNumberOfMeetingsMissed = param;

		}

		/**
		 * field for TypeCode This was an Attribute!
		 */

		protected java.lang.String localTypeCode;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTypeCode() {
			return localTypeCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TypeCode
		 */
		public void setTypeCode(java.lang.String param) {

			this.localTypeCode = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for Id This was an Attribute!
		 */

		protected int localId;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getId() {
			return localId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Id
		 */
		public void setId(int param) {

			this.localId = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AccountType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AccountType", xmlWriter);
				}

			}

			if (localTypeCode != null) {

				writeAttribute("", "typeCode",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localTypeCode), xmlWriter);

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localId != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "id",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localId), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}
			if (localAdditionalMFIDetailsTracker) {
				if (localAdditionalMFIDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalMFIDetails cannot be null!!");
				}
				localAdditionalMFIDetails
						.serialize(
								new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"AdditionalMFIDetails"), xmlWriter);
			}
			if (localClientNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "ClientName", xmlWriter);

				if (localClientName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"ClientName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localClientName);

				}

				xmlWriter.writeEndElement();
			}
			if (localAccountNumberTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AccountNumber", xmlWriter);

				if (localAccountNumber == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AccountNumber cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAccountNumber);

				}

				xmlWriter.writeEndElement();
			}
			if (localCurrentBalanceTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CurrentBalance", xmlWriter);

				if (localCurrentBalance == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CurrentBalance cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCurrentBalance));

				}

				xmlWriter.writeEndElement();
			}
			if (localInstitutionTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Institution", xmlWriter);

				if (localInstitution == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Institution cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localInstitution);

				}

				xmlWriter.writeEndElement();
			}
			if (localAccountTypeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AccountType", xmlWriter);

				if (localAccountType == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AccountType cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAccountType);

				}

				xmlWriter.writeEndElement();
			}
			if (localOwnershipTypeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "OwnershipType", xmlWriter);

				if (localOwnershipType == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"OwnershipType cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localOwnershipType);

				}

				xmlWriter.writeEndElement();
			}
			if (localBalanceTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Balance", xmlWriter);

				if (localBalance == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Balance cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localBalance));

				}

				xmlWriter.writeEndElement();
			}
			if (localPastDueAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "PastDueAmount", xmlWriter);

				if (localPastDueAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"PastDueAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPastDueAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localDatePastDueTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DatePastDue", xmlWriter);

				if (localDatePastDue == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DatePastDue cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localDatePastDue);

				}

				xmlWriter.writeEndElement();
			}
			if (localDisbursedAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DisbursedAmount", xmlWriter);

				if (localDisbursedAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DisbursedAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDisbursedAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localLoanCategoryTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "LoanCategory", xmlWriter);

				if (localLoanCategory == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"LoanCategory cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localLoanCategory);

				}

				xmlWriter.writeEndElement();
			}
			if (localLoanPurposeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "LoanPurpose", xmlWriter);

				if (localLoanPurpose == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"LoanPurpose cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localLoanPurpose);

				}

				xmlWriter.writeEndElement();
			}
			if (localLastPaymentTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "LastPayment", xmlWriter);

				if (localLastPayment == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"LastPayment cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLastPayment));

				}

				xmlWriter.writeEndElement();
			}
			if (localWriteOffAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "WriteOffAmount", xmlWriter);

				if (localWriteOffAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"WriteOffAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localWriteOffAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localOpenTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Open", xmlWriter);

				if (localOpen == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Open cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localOpen);

				}

				xmlWriter.writeEndElement();
			}
			if (localSanctionAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "SanctionAmount", xmlWriter);

				if (localSanctionAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"SanctionAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSanctionAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localHighCreditTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "HighCredit", xmlWriter);

				if (localHighCredit == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"HighCredit cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localHighCredit));

				}

				xmlWriter.writeEndElement();
			}
			if (localLastPaymentDateTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "LastPaymentDate", xmlWriter);

				if (localLastPaymentDate == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"LastPaymentDate cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLastPaymentDate));

				}

				xmlWriter.writeEndElement();
			}
			if (localDateReportedTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DateReported", xmlWriter);

				if (localDateReported == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DateReported cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateReported));

				}

				xmlWriter.writeEndElement();
			}
			if (localDateOpenedTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DateOpened", xmlWriter);

				if (localDateOpened == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DateOpened cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateOpened));

				}

				xmlWriter.writeEndElement();
			}
			if (localDateClosedTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DateClosed", xmlWriter);

				if (localDateClosed == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DateClosed cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateClosed));

				}

				xmlWriter.writeEndElement();
			}
			if (localReasonTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Reason", xmlWriter);

				if (localReason == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Reason cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReason);

				}

				xmlWriter.writeEndElement();
			}
			if (localDateWrittenOffTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DateWrittenOff", xmlWriter);

				if (localDateWrittenOff == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DateWrittenOff cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateWrittenOff));

				}

				xmlWriter.writeEndElement();
			}
			if (localLoanCycleIDTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "LoanCycleID", xmlWriter);

				if (localLoanCycleID == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"LoanCycleID cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localLoanCycleID);

				}

				xmlWriter.writeEndElement();
			}
			if (localDateSanctionedTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DateSanctioned", xmlWriter);

				if (localDateSanctioned == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DateSanctioned cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateSanctioned));

				}

				xmlWriter.writeEndElement();
			}
			if (localDateAppliedTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DateApplied", xmlWriter);

				if (localDateApplied == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DateApplied cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateApplied));

				}

				xmlWriter.writeEndElement();
			}
			if (localInterestRateTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "InterestRate", xmlWriter);

				if (localInterestRate == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"InterestRate cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localInterestRate);

				}

				xmlWriter.writeEndElement();
			}
			if (localAppliedAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AppliedAmount", xmlWriter);

				if (localAppliedAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AppliedAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAppliedAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localNoOfInstallmentsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "NoOfInstallments",
						xmlWriter);

				if (localNoOfInstallments == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"NoOfInstallments cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNoOfInstallments));
				}

				xmlWriter.writeEndElement();
			}
			if (localRepaymentTenureTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "RepaymentTenure", xmlWriter);

				if (localRepaymentTenure == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"RepaymentTenure cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localRepaymentTenure);

				}

				xmlWriter.writeEndElement();
			}
			if (localDisputeCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DisputeCode", xmlWriter);

				if (localDisputeCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DisputeCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localDisputeCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localInstallmentAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "InstallmentAmount",
						xmlWriter);

				if (localInstallmentAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"InstallmentAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localInstallmentAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localKeyPersonTracker) {
				if (localKeyPerson == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"KeyPerson cannot be null!!");
				}
				localKeyPerson.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"KeyPerson"), xmlWriter);
			}
			if (localNomineeTracker) {
				if (localNominee == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Nominee cannot be null!!");
				}
				localNominee.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Nominee"), xmlWriter);
			}
			if (localTermFrequencyTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TermFrequency", xmlWriter);

				if (localTermFrequency == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TermFrequency cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localTermFrequency);

				}

				xmlWriter.writeEndElement();
			}
			if (localCreditLimitTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CreditLimit", xmlWriter);

				if (localCreditLimit == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CreditLimit cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCreditLimit));

				}

				xmlWriter.writeEndElement();
			}
			if (localCollateralValueTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CollateralValue", xmlWriter);

				if (localCollateralValue == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CollateralValue cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localCollateralValue);

				}

				xmlWriter.writeEndElement();
			}
			if (localCollateralTypeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CollateralType", xmlWriter);

				if (localCollateralType == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CollateralType cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localCollateralType);

				}

				xmlWriter.writeEndElement();
			}
			if (localAccountStatusTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AccountStatus", xmlWriter);

				if (localAccountStatus == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AccountStatus cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAccountStatus);

				}

				xmlWriter.writeEndElement();
			}
			if (localAssetClassificationTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AssetClassification",
						xmlWriter);

				if (localAssetClassification == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AssetClassification cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAssetClassification);

				}

				xmlWriter.writeEndElement();
			}
			if (localSuitFiledStatusTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "SuitFiledStatus", xmlWriter);

				if (localSuitFiledStatus == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"SuitFiledStatus cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localSuitFiledStatus);

				}

				xmlWriter.writeEndElement();
			}
			if (localHistory48MonthsTracker) {
				if (localHistory48Months == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"History48Months cannot be null!!");
				}
				localHistory48Months.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"History48Months"), xmlWriter);
			}
			if (localHistory24MonthsTracker) {
				if (localHistory24Months == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"History24Months cannot be null!!");
				}
				localHistory24Months.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"History24Months"), xmlWriter);
			}
			if (localBranchIDMFITracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "BranchIDMFI", xmlWriter);

				if (localBranchIDMFI == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"BranchIDMFI cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localBranchIDMFI);

				}

				xmlWriter.writeEndElement();
			}
			if (localKendraIDMFITracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "KendraIDMFI", xmlWriter);

				if (localKendraIDMFI == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"KendraIDMFI cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localKendraIDMFI);

				}

				xmlWriter.writeEndElement();
			}
			if (localDaysPastDueTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DaysPastDue", xmlWriter);

				if (localDaysPastDue == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"DaysPastDue cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDaysPastDue));
				}

				xmlWriter.writeEndElement();
			}
			if (localTypeOfInsuranceTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TypeOfInsurance", xmlWriter);

				if (localTypeOfInsurance == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TypeOfInsurance cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localTypeOfInsurance);

				}

				xmlWriter.writeEndElement();
			}
			if (localInsurancePolicyAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "InsurancePolicyAmount",
						xmlWriter);

				if (localInsurancePolicyAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"InsurancePolicyAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localInsurancePolicyAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localNumberOfMeetingsHeldTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "NumberOfMeetingsHeld",
						xmlWriter);

				if (localNumberOfMeetingsHeld == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"NumberOfMeetingsHeld cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumberOfMeetingsHeld));
				}

				xmlWriter.writeEndElement();
			}
			if (localNumberOfMeetingsMissedTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "NumberOfMeetingsMissed",
						xmlWriter);

				if (localNumberOfMeetingsMissed == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"NumberOfMeetingsMissed cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumberOfMeetingsMissed));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAdditionalMFIDetailsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AdditionalMFIDetails"));

				if (localAdditionalMFIDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalMFIDetails cannot be null!!");
				}
				elementList.add(localAdditionalMFIDetails);
			}
			if (localClientNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ClientName"));

				if (localClientName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localClientName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"ClientName cannot be null!!");
				}
			}
			if (localAccountNumberTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountNumber"));

				if (localAccountNumber != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAccountNumber));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AccountNumber cannot be null!!");
				}
			}
			if (localCurrentBalanceTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CurrentBalance"));

				if (localCurrentBalance != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCurrentBalance));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CurrentBalance cannot be null!!");
				}
			}
			if (localInstitutionTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Institution"));

				if (localInstitution != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localInstitution));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Institution cannot be null!!");
				}
			}
			if (localAccountTypeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountType"));

				if (localAccountType != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAccountType));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AccountType cannot be null!!");
				}
			}
			if (localOwnershipTypeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"OwnershipType"));

				if (localOwnershipType != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localOwnershipType));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"OwnershipType cannot be null!!");
				}
			}
			if (localBalanceTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Balance"));

				if (localBalance != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localBalance));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Balance cannot be null!!");
				}
			}
			if (localPastDueAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PastDueAmount"));

				if (localPastDueAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPastDueAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"PastDueAmount cannot be null!!");
				}
			}
			if (localDatePastDueTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DatePastDue"));

				if (localDatePastDue != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDatePastDue));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DatePastDue cannot be null!!");
				}
			}
			if (localDisbursedAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DisbursedAmount"));

				if (localDisbursedAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDisbursedAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DisbursedAmount cannot be null!!");
				}
			}
			if (localLoanCategoryTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"LoanCategory"));

				if (localLoanCategory != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLoanCategory));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"LoanCategory cannot be null!!");
				}
			}
			if (localLoanPurposeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"LoanPurpose"));

				if (localLoanPurpose != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLoanPurpose));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"LoanPurpose cannot be null!!");
				}
			}
			if (localLastPaymentTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"LastPayment"));

				if (localLastPayment != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLastPayment));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"LastPayment cannot be null!!");
				}
			}
			if (localWriteOffAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"WriteOffAmount"));

				if (localWriteOffAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localWriteOffAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"WriteOffAmount cannot be null!!");
				}
			}
			if (localOpenTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Open"));

				if (localOpen != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localOpen));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Open cannot be null!!");
				}
			}
			if (localSanctionAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"SanctionAmount"));

				if (localSanctionAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSanctionAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"SanctionAmount cannot be null!!");
				}
			}
			if (localHighCreditTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"HighCredit"));

				if (localHighCredit != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localHighCredit));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"HighCredit cannot be null!!");
				}
			}
			if (localLastPaymentDateTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"LastPaymentDate"));

				if (localLastPaymentDate != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLastPaymentDate));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"LastPaymentDate cannot be null!!");
				}
			}
			if (localDateReportedTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DateReported"));

				if (localDateReported != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateReported));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DateReported cannot be null!!");
				}
			}
			if (localDateOpenedTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DateOpened"));

				if (localDateOpened != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateOpened));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DateOpened cannot be null!!");
				}
			}
			if (localDateClosedTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DateClosed"));

				if (localDateClosed != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateClosed));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DateClosed cannot be null!!");
				}
			}
			if (localReasonTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Reason"));

				if (localReason != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReason));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Reason cannot be null!!");
				}
			}
			if (localDateWrittenOffTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DateWrittenOff"));

				if (localDateWrittenOff != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateWrittenOff));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DateWrittenOff cannot be null!!");
				}
			}
			if (localLoanCycleIDTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"LoanCycleID"));

				if (localLoanCycleID != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLoanCycleID));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"LoanCycleID cannot be null!!");
				}
			}
			if (localDateSanctionedTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DateSanctioned"));

				if (localDateSanctioned != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateSanctioned));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DateSanctioned cannot be null!!");
				}
			}
			if (localDateAppliedTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DateApplied"));

				if (localDateApplied != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateApplied));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DateApplied cannot be null!!");
				}
			}
			if (localInterestRateTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"InterestRate"));

				if (localInterestRate != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localInterestRate));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"InterestRate cannot be null!!");
				}
			}
			if (localAppliedAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AppliedAmount"));

				if (localAppliedAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAppliedAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AppliedAmount cannot be null!!");
				}
			}
			if (localNoOfInstallmentsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NoOfInstallments"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNoOfInstallments));
			}
			if (localRepaymentTenureTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"RepaymentTenure"));

				if (localRepaymentTenure != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRepaymentTenure));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"RepaymentTenure cannot be null!!");
				}
			}
			if (localDisputeCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DisputeCode"));

				if (localDisputeCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDisputeCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DisputeCode cannot be null!!");
				}
			}
			if (localInstallmentAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"InstallmentAmount"));

				if (localInstallmentAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localInstallmentAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"InstallmentAmount cannot be null!!");
				}
			}
			if (localKeyPersonTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"KeyPerson"));

				if (localKeyPerson == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"KeyPerson cannot be null!!");
				}
				elementList.add(localKeyPerson);
			}
			if (localNomineeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Nominee"));

				if (localNominee == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Nominee cannot be null!!");
				}
				elementList.add(localNominee);
			}
			if (localTermFrequencyTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TermFrequency"));

				if (localTermFrequency != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTermFrequency));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TermFrequency cannot be null!!");
				}
			}
			if (localCreditLimitTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CreditLimit"));

				if (localCreditLimit != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCreditLimit));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CreditLimit cannot be null!!");
				}
			}
			if (localCollateralValueTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CollateralValue"));

				if (localCollateralValue != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCollateralValue));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CollateralValue cannot be null!!");
				}
			}
			if (localCollateralTypeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CollateralType"));

				if (localCollateralType != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCollateralType));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CollateralType cannot be null!!");
				}
			}
			if (localAccountStatusTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountStatus"));

				if (localAccountStatus != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAccountStatus));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AccountStatus cannot be null!!");
				}
			}
			if (localAssetClassificationTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AssetClassification"));

				if (localAssetClassification != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAssetClassification));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AssetClassification cannot be null!!");
				}
			}
			if (localSuitFiledStatusTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"SuitFiledStatus"));

				if (localSuitFiledStatus != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSuitFiledStatus));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"SuitFiledStatus cannot be null!!");
				}
			}
			if (localHistory48MonthsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"History48Months"));

				if (localHistory48Months == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"History48Months cannot be null!!");
				}
				elementList.add(localHistory48Months);
			}
			if (localHistory24MonthsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"History24Months"));

				if (localHistory24Months == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"History24Months cannot be null!!");
				}
				elementList.add(localHistory24Months);
			}
			if (localBranchIDMFITracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"BranchIDMFI"));

				if (localBranchIDMFI != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localBranchIDMFI));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"BranchIDMFI cannot be null!!");
				}
			}
			if (localKendraIDMFITracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"KendraIDMFI"));

				if (localKendraIDMFI != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localKendraIDMFI));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"KendraIDMFI cannot be null!!");
				}
			}
			if (localDaysPastDueTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DaysPastDue"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localDaysPastDue));
			}
			if (localTypeOfInsuranceTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TypeOfInsurance"));

				if (localTypeOfInsurance != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTypeOfInsurance));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TypeOfInsurance cannot be null!!");
				}
			}
			if (localInsurancePolicyAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"InsurancePolicyAmount"));

				if (localInsurancePolicyAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localInsurancePolicyAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"InsurancePolicyAmount cannot be null!!");
				}
			}
			if (localNumberOfMeetingsHeldTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NumberOfMeetingsHeld"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNumberOfMeetingsHeld));
			}
			if (localNumberOfMeetingsMissedTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NumberOfMeetingsMissed"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNumberOfMeetingsMissed));
			}
			attribList.add(new javax.xml.namespace.QName("", "typeCode"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localTypeCode));

			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "id"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localId));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AccountType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AccountType object = new AccountType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"AccountType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (AccountType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "typeCode"
					java.lang.String tempAttribTypeCode =

					reader.getAttributeValue(null, "typeCode");

					if (tempAttribTypeCode != null) {
						java.lang.String content = tempAttribTypeCode;

						object.setTypeCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(tempAttribTypeCode));

					} else {

					}
					handledAttributes.add("typeCode");

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "id"
					java.lang.String tempAttribId =

					reader.getAttributeValue(null, "id");

					if (tempAttribId != null) {
						java.lang.String content = tempAttribId;

						object.setId(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribId));

					} else {

						object.setId(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("id");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AdditionalMFIDetails").equals(reader
									.getName())) {

						object.setAdditionalMFIDetails(AdditionalMFIDetailsType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ClientName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ClientName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setClientName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountNumber").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AccountNumber"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAccountNumber(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CurrentBalance").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CurrentBalance"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCurrentBalance(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Institution").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Institution"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setInstitution(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AccountType"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAccountType(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"OwnershipType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "OwnershipType"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setOwnershipType(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Balance").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Balance"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setBalance(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PastDueAmount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "PastDueAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPastDueAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DatePastDue").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DatePastDue"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDatePastDue(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DisbursedAmount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DisbursedAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDisbursedAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"LoanCategory").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "LoanCategory"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setLoanCategory(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"LoanPurpose").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "LoanPurpose"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setLoanPurpose(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"LastPayment").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "LastPayment"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setLastPayment(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"WriteOffAmount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "WriteOffAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setWriteOffAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Open").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Open"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setOpen(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"SanctionAmount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "SanctionAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSanctionAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"HighCredit").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "HighCredit"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setHighCredit(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"LastPaymentDate").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "LastPaymentDate"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setLastPaymentDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DateReported").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DateReported"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDateReported(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DateOpened").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DateOpened"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDateOpened(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DateClosed").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DateClosed"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDateClosed(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Reason").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Reason"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReason(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DateWrittenOff").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DateWrittenOff"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDateWrittenOff(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"LoanCycleID").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "LoanCycleID"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setLoanCycleID(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DateSanctioned").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DateSanctioned"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDateSanctioned(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DateApplied").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DateApplied"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDateApplied(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InterestRate").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "InterestRate"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setInterestRate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AppliedAmount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AppliedAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAppliedAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NoOfInstallments")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NoOfInstallments"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNoOfInstallments(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNoOfInstallments(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RepaymentTenure").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "RepaymentTenure"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRepaymentTenure(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DisputeCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DisputeCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDisputeCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InstallmentAmount").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "InstallmentAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setInstallmentAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"KeyPerson").equals(reader.getName())) {

						object.setKeyPerson(RelationInfoType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Nominee").equals(reader.getName())) {

						object.setNominee(RelationInfoType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TermFrequency").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TermFrequency"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTermFrequency(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CreditLimit").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CreditLimit"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCreditLimit(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CollateralValue").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CollateralValue"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCollateralValue(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CollateralType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CollateralType"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCollateralType(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountStatus").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AccountStatus"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAccountStatus(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AssetClassification").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AssetClassification"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAssetClassification(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"SuitFiledStatus").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "SuitFiledStatus"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSuitFiledStatus(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"History48Months").equals(reader.getName())) {

						object.setHistory48Months(AccountHistoryType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"History24Months").equals(reader.getName())) {

						object.setHistory24Months(AccountHistoryType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"BranchIDMFI").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "BranchIDMFI"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setBranchIDMFI(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"KendraIDMFI").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "KendraIDMFI"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setKendraIDMFI(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DaysPastDue").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DaysPastDue"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDaysPastDue(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setDaysPastDue(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TypeOfInsurance").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TypeOfInsurance"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTypeOfInsurance(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InsurancePolicyAmount").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "InsurancePolicyAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setInsurancePolicyAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NumberOfMeetingsHeld").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NumberOfMeetingsHeld"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNumberOfMeetingsHeld(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNumberOfMeetingsHeld(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NumberOfMeetingsMissed").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NumberOfMeetingsMissed"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNumberOfMeetingsMissed(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNumberOfMeetingsMissed(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GroupCreditSummaryType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * GroupCreditSummaryType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Institution
		 */

		protected java.lang.String localInstitution;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInstitutionTracker = false;

		public boolean isInstitutionSpecified() {
			return localInstitutionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getInstitution() {
			return localInstitution;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Institution
		 */
		public void setInstitution(java.lang.String param) {
			localInstitutionTracker = param != null;

			this.localInstitution = param;

		}

		/**
		 * field for CurrentBalance
		 */

		protected java.math.BigDecimal localCurrentBalance;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCurrentBalanceTracker = false;

		public boolean isCurrentBalanceSpecified() {
			return localCurrentBalanceTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getCurrentBalance() {
			return localCurrentBalance;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CurrentBalance
		 */
		public void setCurrentBalance(java.math.BigDecimal param) {
			localCurrentBalanceTracker = param != null;

			this.localCurrentBalance = param;

		}

		/**
		 * field for Status
		 */

		protected java.lang.String localStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localStatusTracker = false;

		public boolean isStatusSpecified() {
			return localStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getStatus() {
			return localStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Status
		 */
		public void setStatus(java.lang.String param) {
			localStatusTracker = param != null;

			this.localStatus = param;

		}

		/**
		 * field for DateReported
		 */

		protected java.util.Date localDateReported;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateReportedTracker = false;

		public boolean isDateReportedSpecified() {
			return localDateReportedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDateReported() {
			return localDateReported;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DateReported
		 */
		public void setDateReported(java.util.Date param) {
			localDateReportedTracker = param != null;

			this.localDateReported = param;

		}

		/**
		 * field for NoOfMembers
		 */

		protected int localNoOfMembers;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNoOfMembersTracker = false;

		public boolean isNoOfMembersSpecified() {
			return localNoOfMembersTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNoOfMembers() {
			return localNoOfMembers;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NoOfMembers
		 */
		public void setNoOfMembers(int param) {

			// setting primitive attribute tracker to true
			localNoOfMembersTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNoOfMembers = param;

		}

		/**
		 * field for PastDueAmount
		 */

		protected java.math.BigDecimal localPastDueAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPastDueAmountTracker = false;

		public boolean isPastDueAmountSpecified() {
			return localPastDueAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getPastDueAmount() {
			return localPastDueAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PastDueAmount
		 */
		public void setPastDueAmount(java.math.BigDecimal param) {
			localPastDueAmountTracker = param != null;

			this.localPastDueAmount = param;

		}

		/**
		 * field for SanctionAmount
		 */

		protected java.math.BigDecimal localSanctionAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSanctionAmountTracker = false;

		public boolean isSanctionAmountSpecified() {
			return localSanctionAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getSanctionAmount() {
			return localSanctionAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SanctionAmount
		 */
		public void setSanctionAmount(java.math.BigDecimal param) {
			localSanctionAmountTracker = param != null;

			this.localSanctionAmount = param;

		}

		/**
		 * field for DateOpened
		 */

		protected java.util.Date localDateOpened;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDateOpenedTracker = false;

		public boolean isDateOpenedSpecified() {
			return localDateOpenedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDateOpened() {
			return localDateOpened;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DateOpened
		 */
		public void setDateOpened(java.util.Date param) {
			localDateOpenedTracker = param != null;

			this.localDateOpened = param;

		}

		/**
		 * field for AccountNo
		 */

		protected java.lang.String localAccountNo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountNoTracker = false;

		public boolean isAccountNoSpecified() {
			return localAccountNoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAccountNo() {
			return localAccountNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountNo
		 */
		public void setAccountNo(java.lang.String param) {
			localAccountNoTracker = param != null;

			this.localAccountNo = param;

		}

		/**
		 * field for MembersPastDue
		 */

		protected int localMembersPastDue;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMembersPastDueTracker = false;

		public boolean isMembersPastDueSpecified() {
			return localMembersPastDueTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getMembersPastDue() {
			return localMembersPastDue;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MembersPastDue
		 */
		public void setMembersPastDue(int param) {

			// setting primitive attribute tracker to true
			localMembersPastDueTracker = param != java.lang.Integer.MIN_VALUE;

			this.localMembersPastDue = param;

		}

		/**
		 * field for WriteOffAmount
		 */

		protected java.math.BigDecimal localWriteOffAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localWriteOffAmountTracker = false;

		public boolean isWriteOffAmountSpecified() {
			return localWriteOffAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getWriteOffAmount() {
			return localWriteOffAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WriteOffAmount
		 */
		public void setWriteOffAmount(java.math.BigDecimal param) {
			localWriteOffAmountTracker = param != null;

			this.localWriteOffAmount = param;

		}

		/**
		 * field for WriteOffDate
		 */

		protected java.util.Date localWriteOffDate;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localWriteOffDateTracker = false;

		public boolean isWriteOffDateSpecified() {
			return localWriteOffDateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getWriteOffDate() {
			return localWriteOffDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            WriteOffDate
		 */
		public void setWriteOffDate(java.util.Date param) {
			localWriteOffDateTracker = param != null;

			this.localWriteOffDate = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type",
							namespacePrefix + ":GroupCreditSummaryType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "GroupCreditSummaryType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}
			if (localInstitutionTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Institution", xmlWriter);

				if (localInstitution == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Institution cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localInstitution);

				}

				xmlWriter.writeEndElement();
			}
			if (localCurrentBalanceTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "CurrentBalance", xmlWriter);

				if (localCurrentBalance == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"CurrentBalance cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCurrentBalance));

				}

				xmlWriter.writeEndElement();
			}
			if (localStatusTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Status", xmlWriter);

				if (localStatus == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Status cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localStatus);

				}

				xmlWriter.writeEndElement();
			}
			if (localDateReportedTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DateReported", xmlWriter);

				if (localDateReported == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DateReported cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateReported));

				}

				xmlWriter.writeEndElement();
			}
			if (localNoOfMembersTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "NoOfMembers", xmlWriter);

				if (localNoOfMembers == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"NoOfMembers cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNoOfMembers));
				}

				xmlWriter.writeEndElement();
			}
			if (localPastDueAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "PastDueAmount", xmlWriter);

				if (localPastDueAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"PastDueAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPastDueAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localSanctionAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "SanctionAmount", xmlWriter);

				if (localSanctionAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"SanctionAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSanctionAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localDateOpenedTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "DateOpened", xmlWriter);

				if (localDateOpened == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"DateOpened cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateOpened));

				}

				xmlWriter.writeEndElement();
			}
			if (localAccountNoTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AccountNo", xmlWriter);

				if (localAccountNo == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AccountNo cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAccountNo);

				}

				xmlWriter.writeEndElement();
			}
			if (localMembersPastDueTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MembersPastDue", xmlWriter);

				if (localMembersPastDue == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"MembersPastDue cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMembersPastDue));
				}

				xmlWriter.writeEndElement();
			}
			if (localWriteOffAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "WriteOffAmount", xmlWriter);

				if (localWriteOffAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"WriteOffAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localWriteOffAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localWriteOffDateTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "WriteOffDate", xmlWriter);

				if (localWriteOffDate == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"WriteOffDate cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localWriteOffDate));

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localInstitutionTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Institution"));

				if (localInstitution != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localInstitution));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Institution cannot be null!!");
				}
			}
			if (localCurrentBalanceTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"CurrentBalance"));

				if (localCurrentBalance != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCurrentBalance));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"CurrentBalance cannot be null!!");
				}
			}
			if (localStatusTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Status"));

				if (localStatus != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localStatus));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Status cannot be null!!");
				}
			}
			if (localDateReportedTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DateReported"));

				if (localDateReported != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateReported));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DateReported cannot be null!!");
				}
			}
			if (localNoOfMembersTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NoOfMembers"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNoOfMembers));
			}
			if (localPastDueAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PastDueAmount"));

				if (localPastDueAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPastDueAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"PastDueAmount cannot be null!!");
				}
			}
			if (localSanctionAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"SanctionAmount"));

				if (localSanctionAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSanctionAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"SanctionAmount cannot be null!!");
				}
			}
			if (localDateOpenedTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DateOpened"));

				if (localDateOpened != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDateOpened));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"DateOpened cannot be null!!");
				}
			}
			if (localAccountNoTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountNo"));

				if (localAccountNo != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAccountNo));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AccountNo cannot be null!!");
				}
			}
			if (localMembersPastDueTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MembersPastDue"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localMembersPastDue));
			}
			if (localWriteOffAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"WriteOffAmount"));

				if (localWriteOffAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localWriteOffAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"WriteOffAmount cannot be null!!");
				}
			}
			if (localWriteOffDateTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"WriteOffDate"));

				if (localWriteOffDate != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localWriteOffDate));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"WriteOffDate cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GroupCreditSummaryType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				GroupCreditSummaryType object = new GroupCreditSummaryType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"GroupCreditSummaryType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (GroupCreditSummaryType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Institution").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Institution"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setInstitution(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"CurrentBalance").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "CurrentBalance"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setCurrentBalance(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Status").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Status"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setStatus(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DateReported").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DateReported"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDateReported(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NoOfMembers").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NoOfMembers"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNoOfMembers(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNoOfMembers(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PastDueAmount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "PastDueAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPastDueAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"SanctionAmount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "SanctionAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSanctionAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DateOpened").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DateOpened"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDateOpened(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountNo").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AccountNo"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAccountNo(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MembersPastDue").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MembersPastDue"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMembersPastDue(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setMembersPastDue(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"WriteOffAmount").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "WriteOffAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setWriteOffAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"WriteOffDate").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "WriteOffDate"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setWriteOffDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class StateCodeOptions implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"StateCodeOptions", "ns1");

		/**
		 * field for StateCodeOptions
		 */

		protected java.lang.String localStateCodeOptions;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected StateCodeOptions(java.lang.String value,
				boolean isRegisterValue) {
			localStateCodeOptions = value;
			if (isRegisterValue) {

				_table_.put(localStateCodeOptions, this);

			}

		}

		public static final java.lang.String _AN = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("AN");

		public static final java.lang.String _AP = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("AP");

		public static final java.lang.String _AR = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("AR");

		public static final java.lang.String _AS = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("AS");

		public static final java.lang.String _BR = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("BR");

		public static final java.lang.String _CH = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("CH");

		public static final java.lang.String _CG = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("CG");

		public static final java.lang.String _DN = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("DN");

		public static final java.lang.String _DD = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("DD");

		public static final java.lang.String _DL = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("DL");

		public static final java.lang.String _GA = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("GA");

		public static final java.lang.String _GJ = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("GJ");

		public static final java.lang.String _HR = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("HR");

		public static final java.lang.String _HP = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("HP");

		public static final java.lang.String _JK = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("JK");

		public static final java.lang.String _JH = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("JH");

		public static final java.lang.String _KA = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("KA");

		public static final java.lang.String _KL = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("KL");

		public static final java.lang.String _LD = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("LD");

		public static final java.lang.String _MP = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("MP");

		public static final java.lang.String _MH = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("MH");

		public static final java.lang.String _MN = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("MN");

		public static final java.lang.String _ML = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("ML");

		public static final java.lang.String _MZ = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("MZ");

		public static final java.lang.String _NL = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("NL");

		public static final java.lang.String _OR = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("OR");

		public static final java.lang.String _PY = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("PY");

		public static final java.lang.String _PB = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("PB");

		public static final java.lang.String _RJ = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("RJ");

		public static final java.lang.String _SK = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("SK");

		public static final java.lang.String _TN = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("TN");

		public static final java.lang.String _TR = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("TR");

		public static final java.lang.String _UP = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("UP");

		public static final java.lang.String _UL = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("UL");

		public static final java.lang.String _WB = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("WB");

		public static final java.lang.String _TG = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("TG");

		public static final StateCodeOptions AN = new StateCodeOptions(_AN,
				true);

		public static final StateCodeOptions AP = new StateCodeOptions(_AP,
				true);

		public static final StateCodeOptions AR = new StateCodeOptions(_AR,
				true);

		public static final StateCodeOptions AS = new StateCodeOptions(_AS,
				true);

		public static final StateCodeOptions BR = new StateCodeOptions(_BR,
				true);

		public static final StateCodeOptions CH = new StateCodeOptions(_CH,
				true);

		public static final StateCodeOptions CG = new StateCodeOptions(_CG,
				true);

		public static final StateCodeOptions DN = new StateCodeOptions(_DN,
				true);

		public static final StateCodeOptions DD = new StateCodeOptions(_DD,
				true);

		public static final StateCodeOptions DL = new StateCodeOptions(_DL,
				true);

		public static final StateCodeOptions GA = new StateCodeOptions(_GA,
				true);

		public static final StateCodeOptions GJ = new StateCodeOptions(_GJ,
				true);

		public static final StateCodeOptions HR = new StateCodeOptions(_HR,
				true);

		public static final StateCodeOptions HP = new StateCodeOptions(_HP,
				true);

		public static final StateCodeOptions JK = new StateCodeOptions(_JK,
				true);

		public static final StateCodeOptions JH = new StateCodeOptions(_JH,
				true);

		public static final StateCodeOptions KA = new StateCodeOptions(_KA,
				true);

		public static final StateCodeOptions KL = new StateCodeOptions(_KL,
				true);

		public static final StateCodeOptions LD = new StateCodeOptions(_LD,
				true);

		public static final StateCodeOptions MP = new StateCodeOptions(_MP,
				true);

		public static final StateCodeOptions MH = new StateCodeOptions(_MH,
				true);

		public static final StateCodeOptions MN = new StateCodeOptions(_MN,
				true);

		public static final StateCodeOptions ML = new StateCodeOptions(_ML,
				true);

		public static final StateCodeOptions MZ = new StateCodeOptions(_MZ,
				true);

		public static final StateCodeOptions NL = new StateCodeOptions(_NL,
				true);

		public static final StateCodeOptions OR = new StateCodeOptions(_OR,
				true);

		public static final StateCodeOptions PY = new StateCodeOptions(_PY,
				true);

		public static final StateCodeOptions PB = new StateCodeOptions(_PB,
				true);

		public static final StateCodeOptions RJ = new StateCodeOptions(_RJ,
				true);

		public static final StateCodeOptions SK = new StateCodeOptions(_SK,
				true);

		public static final StateCodeOptions TN = new StateCodeOptions(_TN,
				true);

		public static final StateCodeOptions TR = new StateCodeOptions(_TR,
				true);

		public static final StateCodeOptions UP = new StateCodeOptions(_UP,
				true);

		public static final StateCodeOptions UL = new StateCodeOptions(_UL,
				true);

		public static final StateCodeOptions WB = new StateCodeOptions(_WB,
				true);

		public static final StateCodeOptions TG = new StateCodeOptions(_TG,
				true);

		public java.lang.String getValue() {
			return localStateCodeOptions;
		}

		public boolean equals(java.lang.Object obj) {
			return (obj == this);
		}

		public int hashCode() {
			return toString().hashCode();
		}

		public java.lang.String toString() {

			return localStateCodeOptions.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":StateCodeOptions",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "StateCodeOptions", xmlWriter);
				}
			}

			if (localStateCodeOptions == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"StateCodeOptions cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localStateCodeOptions);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localStateCodeOptions) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static StateCodeOptions fromValue(java.lang.String value)
					throws java.lang.IllegalArgumentException {
				StateCodeOptions enumeration = (StateCodeOptions)

				_table_.get(value);

				if ((enumeration == null)
						&& !((value == null) || (value.equals("")))) {
					throw new java.lang.IllegalArgumentException();
				}
				return enumeration;
			}

			public static StateCodeOptions fromString(java.lang.String value,
					java.lang.String namespaceURI)
					throws java.lang.IllegalArgumentException {
				try {

					return fromValue(org.apache.axis2.databinding.utils.ConverterUtil
							.convertToString(value));

				} catch (java.lang.Exception e) {
					throw new java.lang.IllegalArgumentException();
				}
			}

			public static StateCodeOptions fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return StateCodeOptions.Factory.fromString(content,
							namespaceUri);
				} else {
					return StateCodeOptions.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static StateCodeOptions parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				StateCodeOptions object = null;
				// initialize a hash map to keep values
				java.util.Map attributeMap = new java.util.HashMap();
				java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							nillableValue = reader
									.getAttributeValue(
											"http://www.w3.org/2001/XMLSchema-instance",
											"nil");
							if ("true".equals(nillableValue)
									|| "1".equals(nillableValue)) {
								throw new org.apache.axis2.databinding.ADBException(
										"The element: " + "StateCodeOptions"
												+ "  cannot be null");
							}

							java.lang.String content = reader.getElementText();

							if (content.indexOf(":") > 0) {
								// this seems to be a Qname so find the
								// namespace and send
								prefix = content.substring(0,
										content.indexOf(":"));
								namespaceuri = reader.getNamespaceURI(prefix);
								object = StateCodeOptions.Factory.fromString(
										content, namespaceuri);
							} else {
								// this seems to be not a qname send and empty
								// namespace incase of it is
								// check is done in fromString method
								object = StateCodeOptions.Factory.fromString(
										content, "");
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ConsumerDisputesType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * ConsumerDisputesType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Dispute This was an Array!
		 */

		protected Dispute_type0[] localDispute;

		/**
		 * Auto generated getter method
		 * 
		 * @return Dispute_type0[]
		 */
		public Dispute_type0[] getDispute() {
			return localDispute;
		}

		/**
		 * validate the array for Dispute
		 */
		protected void validateDispute(Dispute_type0[] param) {

			if ((param != null) && (param.length < 1)) {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dispute
		 */
		public void setDispute(Dispute_type0[] param) {

			validateDispute(param);

			this.localDispute = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Dispute_type0
		 */
		public void addDispute(Dispute_type0 param) {
			if (localDispute == null) {
				localDispute = new Dispute_type0[] {};
			}

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localDispute);
			list.add(param);
			this.localDispute = (Dispute_type0[]) list
					.toArray(new Dispute_type0[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":ConsumerDisputesType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ConsumerDisputesType", xmlWriter);
				}

			}

			if (localDispute != null) {
				for (int i = 0; i < localDispute.length; i++) {
					if (localDispute[i] != null) {
						localDispute[i]
								.serialize(
										new javax.xml.namespace.QName(
												"http://services.equifax.com/eport/ws/schemas/1.0",
												"Dispute"), xmlWriter);
					} else {

						throw new org.apache.axis2.databinding.ADBException(
								"Dispute cannot be null!!");

					}

				}
			} else {

				throw new org.apache.axis2.databinding.ADBException(
						"Dispute cannot be null!!");

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localDispute != null) {
				for (int i = 0; i < localDispute.length; i++) {

					if (localDispute[i] != null) {
						elementList
								.add(new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"Dispute"));
						elementList.add(localDispute[i]);
					} else {

						throw new org.apache.axis2.databinding.ADBException(
								"Dispute cannot be null !!");

					}

				}
			} else {

				throw new org.apache.axis2.databinding.ADBException(
						"Dispute cannot be null!!");

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ConsumerDisputesType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ConsumerDisputesType object = new ConsumerDisputesType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"ConsumerDisputesType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (ConsumerDisputesType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Dispute").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Dispute_type0.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"Dispute").equals(reader.getName())) {
									list1.add(Dispute_type0.Factory
											.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setDispute((Dispute_type0[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Dispute_type0.class, list1));

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PhoneTypeCode implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"PhoneTypeCode", "ns1");

		/**
		 * field for PhoneTypeCode
		 */

		protected java.lang.String localPhoneTypeCode;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected PhoneTypeCode(java.lang.String value, boolean isRegisterValue) {
			localPhoneTypeCode = value;
			if (isRegisterValue) {

				_table_.put(localPhoneTypeCode, this);

			}

		}

		public static final java.lang.String _H = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("H");

		public static final java.lang.String _M = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("M");

		public static final java.lang.String _P = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("P");

		public static final java.lang.String _F = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("F");

		public static final java.lang.String _T = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("T");

		public static final java.lang.String _E = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("E");

		public static final java.lang.String _X = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("X");

		public static final PhoneTypeCode H = new PhoneTypeCode(_H, true);

		public static final PhoneTypeCode M = new PhoneTypeCode(_M, true);

		public static final PhoneTypeCode P = new PhoneTypeCode(_P, true);

		public static final PhoneTypeCode F = new PhoneTypeCode(_F, true);

		public static final PhoneTypeCode T = new PhoneTypeCode(_T, true);

		public static final PhoneTypeCode E = new PhoneTypeCode(_E, true);

		public static final PhoneTypeCode X = new PhoneTypeCode(_X, true);

		public java.lang.String getValue() {
			return localPhoneTypeCode;
		}

		public boolean equals(java.lang.Object obj) {
			return (obj == this);
		}

		public int hashCode() {
			return toString().hashCode();
		}

		public java.lang.String toString() {

			return localPhoneTypeCode.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":PhoneTypeCode",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "PhoneTypeCode", xmlWriter);
				}
			}

			if (localPhoneTypeCode == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"PhoneTypeCode cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localPhoneTypeCode);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPhoneTypeCode) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static PhoneTypeCode fromValue(java.lang.String value)
					throws java.lang.IllegalArgumentException {
				PhoneTypeCode enumeration = (PhoneTypeCode)

				_table_.get(value);

				if ((enumeration == null)
						&& !((value == null) || (value.equals("")))) {
					throw new java.lang.IllegalArgumentException();
				}
				return enumeration;
			}

			public static PhoneTypeCode fromString(java.lang.String value,
					java.lang.String namespaceURI)
					throws java.lang.IllegalArgumentException {
				try {

					return fromValue(org.apache.axis2.databinding.utils.ConverterUtil
							.convertToString(value));

				} catch (java.lang.Exception e) {
					throw new java.lang.IllegalArgumentException();
				}
			}

			public static PhoneTypeCode fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return PhoneTypeCode.Factory.fromString(content,
							namespaceUri);
				} else {
					return PhoneTypeCode.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static PhoneTypeCode parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				PhoneTypeCode object = null;
				// initialize a hash map to keep values
				java.util.Map attributeMap = new java.util.HashMap();
				java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							nillableValue = reader
									.getAttributeValue(
											"http://www.w3.org/2001/XMLSchema-instance",
											"nil");
							if ("true".equals(nillableValue)
									|| "1".equals(nillableValue)) {
								throw new org.apache.axis2.databinding.ADBException(
										"The element: " + "PhoneTypeCode"
												+ "  cannot be null");
							}

							java.lang.String content = reader.getElementText();

							if (content.indexOf(":") > 0) {
								// this seems to be a Qname so find the
								// namespace and send
								prefix = content.substring(0,
										content.indexOf(":"));
								namespaceuri = reader.getNamespaceURI(prefix);
								object = PhoneTypeCode.Factory.fromString(
										content, namespaceuri);
							} else {
								// this seems to be not a qname send and empty
								// namespace incase of it is
								// check is done in fromString method
								object = PhoneTypeCode.Factory.fromString(
										content, "");
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Dispute_type0 implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Dispute_type0 Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for DisputeDetails This was an Array!
		 */

		protected DisputeDetailsType[] localDisputeDetails;

		/**
		 * Auto generated getter method
		 * 
		 * @return DisputeDetailsType[]
		 */
		public DisputeDetailsType[] getDisputeDetails() {
			return localDisputeDetails;
		}

		/**
		 * validate the array for DisputeDetails
		 */
		protected void validateDisputeDetails(DisputeDetailsType[] param) {

			if ((param != null) && (param.length < 1)) {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DisputeDetails
		 */
		public void setDisputeDetails(DisputeDetailsType[] param) {

			validateDisputeDetails(param);

			this.localDisputeDetails = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            DisputeDetailsType
		 */
		public void addDisputeDetails(DisputeDetailsType param) {
			if (localDisputeDetails == null) {
				localDisputeDetails = new DisputeDetailsType[] {};
			}

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localDisputeDetails);
			list.add(param);
			this.localDisputeDetails = (DisputeDetailsType[]) list
					.toArray(new DisputeDetailsType[list.size()]);

		}

		/**
		 * field for CreatedDate This was an Attribute!
		 */

		protected java.lang.String localCreatedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCreatedDate() {
			return localCreatedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CreatedDate
		 */
		public void setCreatedDate(java.lang.String param) {

			this.localCreatedDate = param;

		}

		/**
		 * field for Status This was an Attribute!
		 */

		protected java.lang.String localStatus;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getStatus() {
			return localStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Status
		 */
		public void setStatus(java.lang.String param) {

			this.localStatus = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Dispute_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Dispute_type0", xmlWriter);
				}

			}

			if (localCreatedDate != null) {

				writeAttribute("", "createdDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localCreatedDate), xmlWriter);

			}

			if (localStatus != null) {

				writeAttribute("", "status",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localStatus), xmlWriter);

			}

			if (localDisputeDetails != null) {
				for (int i = 0; i < localDisputeDetails.length; i++) {
					if (localDisputeDetails[i] != null) {
						localDisputeDetails[i]
								.serialize(
										new javax.xml.namespace.QName(
												"http://services.equifax.com/eport/ws/schemas/1.0",
												"DisputeDetails"), xmlWriter);
					} else {

						throw new org.apache.axis2.databinding.ADBException(
								"DisputeDetails cannot be null!!");

					}

				}
			} else {

				throw new org.apache.axis2.databinding.ADBException(
						"DisputeDetails cannot be null!!");

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localDisputeDetails != null) {
				for (int i = 0; i < localDisputeDetails.length; i++) {

					if (localDisputeDetails[i] != null) {
						elementList
								.add(new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"DisputeDetails"));
						elementList.add(localDisputeDetails[i]);
					} else {

						throw new org.apache.axis2.databinding.ADBException(
								"DisputeDetails cannot be null !!");

					}

				}
			} else {

				throw new org.apache.axis2.databinding.ADBException(
						"DisputeDetails cannot be null!!");

			}

			attribList.add(new javax.xml.namespace.QName("", "createdDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localCreatedDate));

			attribList.add(new javax.xml.namespace.QName("", "status"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localStatus));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Dispute_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Dispute_type0 object = new Dispute_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Dispute_type0".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Dispute_type0) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "createdDate"
					java.lang.String tempAttribCreatedDate =

					reader.getAttributeValue(null, "createdDate");

					if (tempAttribCreatedDate != null) {
						java.lang.String content = tempAttribCreatedDate;

						object.setCreatedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(tempAttribCreatedDate));

					} else {

					}
					handledAttributes.add("createdDate");

					// handle attribute "status"
					java.lang.String tempAttribStatus =

					reader.getAttributeValue(null, "status");

					if (tempAttribStatus != null) {
						java.lang.String content = tempAttribStatus;

						object.setStatus(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(tempAttribStatus));

					} else {

					}
					handledAttributes.add("status");

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DisputeDetails").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(DisputeDetailsType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"DisputeDetails").equals(reader
										.getName())) {
									list1.add(DisputeDetailsType.Factory
											.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setDisputeDetails((DisputeDetailsType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(DisputeDetailsType.class, list1));

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Response implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * response Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for ReturnCode
		 */

		protected java.lang.String localReturnCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localReturnCodeTracker = false;

		public boolean isReturnCodeSpecified() {
			return localReturnCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getReturnCode() {
			return localReturnCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReturnCode
		 */
		public void setReturnCode(java.lang.String param) {
			localReturnCodeTracker = param != null;

			this.localReturnCode = param;

		}

		/**
		 * field for ReturnCodeDesc
		 */

		protected java.lang.String localReturnCodeDesc;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localReturnCodeDescTracker = false;

		public boolean isReturnCodeDescSpecified() {
			return localReturnCodeDescTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getReturnCodeDesc() {
			return localReturnCodeDesc;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReturnCodeDesc
		 */
		public void setReturnCodeDesc(java.lang.String param) {
			localReturnCodeDescTracker = param != null;

			this.localReturnCodeDesc = param;

		}

		/**
		 * field for RunDateTime
		 */

		protected java.util.Calendar localRunDateTime;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRunDateTimeTracker = false;

		public boolean isRunDateTimeSpecified() {
			return localRunDateTimeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Calendar
		 */
		public java.util.Calendar getRunDateTime() {
			return localRunDateTime;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RunDateTime
		 */
		public void setRunDateTime(java.util.Calendar param) {
			localRunDateTimeTracker = param != null;

			this.localRunDateTime = param;

		}

		/**
		 * field for ErrorRespMessage
		 */

		protected java.lang.String localErrorRespMessage;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localErrorRespMessageTracker = false;

		public boolean isErrorRespMessageSpecified() {
			return localErrorRespMessageTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getErrorRespMessage() {
			return localErrorRespMessage;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ErrorRespMessage
		 */
		public void setErrorRespMessage(java.lang.String param) {
			localErrorRespMessageTracker = param != null;

			this.localErrorRespMessage = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":response", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "response", xmlWriter);
				}

			}
			if (localReturnCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "returnCode", xmlWriter);

				if (localReturnCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"returnCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReturnCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localReturnCodeDescTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "returnCodeDesc", xmlWriter);

				if (localReturnCodeDesc == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"returnCodeDesc cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReturnCodeDesc);

				}

				xmlWriter.writeEndElement();
			}
			if (localRunDateTimeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "runDateTime", xmlWriter);

				if (localRunDateTime == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"runDateTime cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRunDateTime));

				}

				xmlWriter.writeEndElement();
			}
			if (localErrorRespMessageTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "errorRespMessage",
						xmlWriter);

				if (localErrorRespMessage == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"errorRespMessage cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localErrorRespMessage);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localReturnCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"returnCode"));

				if (localReturnCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReturnCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"returnCode cannot be null!!");
				}
			}
			if (localReturnCodeDescTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"returnCodeDesc"));

				if (localReturnCodeDesc != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReturnCodeDesc));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"returnCodeDesc cannot be null!!");
				}
			}
			if (localRunDateTimeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"runDateTime"));

				if (localRunDateTime != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRunDateTime));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"runDateTime cannot be null!!");
				}
			}
			if (localErrorRespMessageTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"errorRespMessage"));

				if (localErrorRespMessage != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localErrorRespMessage));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"errorRespMessage cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Response parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Response object = new Response();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"response".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Response) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"returnCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "returnCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"returnCodeDesc").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "returnCodeDesc"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReturnCodeDesc(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"runDateTime").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "runDateTime"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRunDateTime(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDateTime(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"errorRespMessage")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "errorRespMessage"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setErrorRespMessage(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AccountDetailsType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * AccountDetailsType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Account This was an Array!
		 */

		protected AccountType[] localAccount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountTracker = false;

		public boolean isAccountSpecified() {
			return localAccountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountType[]
		 */
		public AccountType[] getAccount() {
			return localAccount;
		}

		/**
		 * validate the array for Account
		 */
		protected void validateAccount(AccountType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Account
		 */
		public void setAccount(AccountType[] param) {

			validateAccount(param);

			localAccountTracker = param != null;

			this.localAccount = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            AccountType
		 */
		public void addAccount(AccountType param) {
			if (localAccount == null) {
				localAccount = new AccountType[] {};
			}

			// update the setting tracker
			localAccountTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localAccount);
			list.add(param);
			this.localAccount = (AccountType[]) list
					.toArray(new AccountType[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AccountDetailsType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AccountDetailsType", xmlWriter);
				}

			}
			if (localAccountTracker) {
				if (localAccount != null) {
					for (int i = 0; i < localAccount.length; i++) {
						if (localAccount[i] != null) {
							localAccount[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"Account"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"Account cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAccountTracker) {
				if (localAccount != null) {
					for (int i = 0; i < localAccount.length; i++) {

						if (localAccount[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"Account"));
							elementList.add(localAccount[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"Account cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AccountDetailsType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AccountDetailsType object = new AccountDetailsType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"AccountDetailsType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (AccountDetailsType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Account").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(AccountType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"Account").equals(reader.getName())) {
									list1.add(AccountType.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setAccount((AccountType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(AccountType.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Postal_type3 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Postal_type3", "ns1");

		/**
		 * field for Postal_type2
		 */

		protected java.lang.String localPostal_type2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPostal_type2() {
			return localPostal_type2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Postal_type2
		 */
		public void setPostal_type2(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([0-9])*")) {
				this.localPostal_type2 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localPostal_type2.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Postal_type3",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Postal_type3", xmlWriter);
				}
			}

			if (localPostal_type2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Postal_type2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localPostal_type2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPostal_type2) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Postal_type3 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Postal_type3 returnValue = new Postal_type3();

				returnValue
						.setPostal_type2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Postal_type3 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Postal_type3.Factory.fromString(content,
							namespaceUri);
				} else {
					return Postal_type3.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Postal_type3 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Postal_type3 object = new Postal_type3();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Postal_type2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setPostal_type2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Postal_type2 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Postal_type2", "ns1");

		/**
		 * field for Postal_type2
		 */

		protected java.lang.String localPostal_type2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPostal_type2() {
			return localPostal_type2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Postal_type2
		 */
		public void setPostal_type2(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([0-9])*")) {
				this.localPostal_type2 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localPostal_type2.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Postal_type2",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Postal_type2", xmlWriter);
				}
			}

			if (localPostal_type2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Postal_type2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localPostal_type2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPostal_type2) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Postal_type2 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Postal_type2 returnValue = new Postal_type2();

				returnValue
						.setPostal_type2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Postal_type2 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Postal_type2.Factory.fromString(content,
							namespaceUri);
				} else {
					return Postal_type2.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Postal_type2 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Postal_type2 object = new Postal_type2();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Postal_type2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setPostal_type2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class GlossaryInfoType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * GlossaryInfoType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AccountStatus This was an Array!
		 */

		protected AccountStatusType[] localAccountStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountStatusTracker = false;

		public boolean isAccountStatusSpecified() {
			return localAccountStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountStatusType[]
		 */
		public AccountStatusType[] getAccountStatus() {
			return localAccountStatus;
		}

		/**
		 * validate the array for AccountStatus
		 */
		protected void validateAccountStatus(AccountStatusType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountStatus
		 */
		public void setAccountStatus(AccountStatusType[] param) {

			validateAccountStatus(param);

			localAccountStatusTracker = param != null;

			this.localAccountStatus = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            AccountStatusType
		 */
		public void addAccountStatus(AccountStatusType param) {
			if (localAccountStatus == null) {
				localAccountStatus = new AccountStatusType[] {};
			}

			// update the setting tracker
			localAccountStatusTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localAccountStatus);
			list.add(param);
			this.localAccountStatus = (AccountStatusType[]) list
					.toArray(new AccountStatusType[list.size()]);

		}

		/**
		 * field for PaymentHistoryStatus This was an Array!
		 */

		protected AccountStatusType[] localPaymentHistoryStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPaymentHistoryStatusTracker = false;

		public boolean isPaymentHistoryStatusSpecified() {
			return localPaymentHistoryStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountStatusType[]
		 */
		public AccountStatusType[] getPaymentHistoryStatus() {
			return localPaymentHistoryStatus;
		}

		/**
		 * validate the array for PaymentHistoryStatus
		 */
		protected void validatePaymentHistoryStatus(AccountStatusType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PaymentHistoryStatus
		 */
		public void setPaymentHistoryStatus(AccountStatusType[] param) {

			validatePaymentHistoryStatus(param);

			localPaymentHistoryStatusTracker = param != null;

			this.localPaymentHistoryStatus = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            AccountStatusType
		 */
		public void addPaymentHistoryStatus(AccountStatusType param) {
			if (localPaymentHistoryStatus == null) {
				localPaymentHistoryStatus = new AccountStatusType[] {};
			}

			// update the setting tracker
			localPaymentHistoryStatusTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localPaymentHistoryStatus);
			list.add(param);
			this.localPaymentHistoryStatus = (AccountStatusType[]) list
					.toArray(new AccountStatusType[list.size()]);

		}

		/**
		 * field for AssetClassificationStatus This was an Array!
		 */

		protected AccountStatusType[] localAssetClassificationStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAssetClassificationStatusTracker = false;

		public boolean isAssetClassificationStatusSpecified() {
			return localAssetClassificationStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountStatusType[]
		 */
		public AccountStatusType[] getAssetClassificationStatus() {
			return localAssetClassificationStatus;
		}

		/**
		 * validate the array for AssetClassificationStatus
		 */
		protected void validateAssetClassificationStatus(
				AccountStatusType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AssetClassificationStatus
		 */
		public void setAssetClassificationStatus(AccountStatusType[] param) {

			validateAssetClassificationStatus(param);

			localAssetClassificationStatusTracker = param != null;

			this.localAssetClassificationStatus = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            AccountStatusType
		 */
		public void addAssetClassificationStatus(AccountStatusType param) {
			if (localAssetClassificationStatus == null) {
				localAssetClassificationStatus = new AccountStatusType[] {};
			}

			// update the setting tracker
			localAssetClassificationStatusTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localAssetClassificationStatus);
			list.add(param);
			this.localAssetClassificationStatus = (AccountStatusType[]) list
					.toArray(new AccountStatusType[list.size()]);

		}

		/**
		 * field for SuitFiledStatus This was an Array!
		 */

		protected AccountStatusType[] localSuitFiledStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSuitFiledStatusTracker = false;

		public boolean isSuitFiledStatusSpecified() {
			return localSuitFiledStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountStatusType[]
		 */
		public AccountStatusType[] getSuitFiledStatus() {
			return localSuitFiledStatus;
		}

		/**
		 * validate the array for SuitFiledStatus
		 */
		protected void validateSuitFiledStatus(AccountStatusType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SuitFiledStatus
		 */
		public void setSuitFiledStatus(AccountStatusType[] param) {

			validateSuitFiledStatus(param);

			localSuitFiledStatusTracker = param != null;

			this.localSuitFiledStatus = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            AccountStatusType
		 */
		public void addSuitFiledStatus(AccountStatusType param) {
			if (localSuitFiledStatus == null) {
				localSuitFiledStatus = new AccountStatusType[] {};
			}

			// update the setting tracker
			localSuitFiledStatusTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localSuitFiledStatus);
			list.add(param);
			this.localSuitFiledStatus = (AccountStatusType[]) list
					.toArray(new AccountStatusType[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":GlossaryInfoType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "GlossaryInfoType", xmlWriter);
				}

			}
			if (localAccountStatusTracker) {
				if (localAccountStatus != null) {
					for (int i = 0; i < localAccountStatus.length; i++) {
						if (localAccountStatus[i] != null) {
							localAccountStatus[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"AccountStatus"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"AccountStatus cannot be null!!");

				}
			}
			if (localPaymentHistoryStatusTracker) {
				if (localPaymentHistoryStatus != null) {
					for (int i = 0; i < localPaymentHistoryStatus.length; i++) {
						if (localPaymentHistoryStatus[i] != null) {
							localPaymentHistoryStatus[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"PaymentHistoryStatus"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PaymentHistoryStatus cannot be null!!");

				}
			}
			if (localAssetClassificationStatusTracker) {
				if (localAssetClassificationStatus != null) {
					for (int i = 0; i < localAssetClassificationStatus.length; i++) {
						if (localAssetClassificationStatus[i] != null) {
							localAssetClassificationStatus[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"AssetClassificationStatus"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"AssetClassificationStatus cannot be null!!");

				}
			}
			if (localSuitFiledStatusTracker) {
				if (localSuitFiledStatus != null) {
					for (int i = 0; i < localSuitFiledStatus.length; i++) {
						if (localSuitFiledStatus[i] != null) {
							localSuitFiledStatus[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"SuitFiledStatus"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"SuitFiledStatus cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAccountStatusTracker) {
				if (localAccountStatus != null) {
					for (int i = 0; i < localAccountStatus.length; i++) {

						if (localAccountStatus[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"AccountStatus"));
							elementList.add(localAccountStatus[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"AccountStatus cannot be null!!");

				}

			}
			if (localPaymentHistoryStatusTracker) {
				if (localPaymentHistoryStatus != null) {
					for (int i = 0; i < localPaymentHistoryStatus.length; i++) {

						if (localPaymentHistoryStatus[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"PaymentHistoryStatus"));
							elementList.add(localPaymentHistoryStatus[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PaymentHistoryStatus cannot be null!!");

				}

			}
			if (localAssetClassificationStatusTracker) {
				if (localAssetClassificationStatus != null) {
					for (int i = 0; i < localAssetClassificationStatus.length; i++) {

						if (localAssetClassificationStatus[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"AssetClassificationStatus"));
							elementList.add(localAssetClassificationStatus[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"AssetClassificationStatus cannot be null!!");

				}

			}
			if (localSuitFiledStatusTracker) {
				if (localSuitFiledStatus != null) {
					for (int i = 0; i < localSuitFiledStatus.length; i++) {

						if (localSuitFiledStatus[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"SuitFiledStatus"));
							elementList.add(localSuitFiledStatus[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"SuitFiledStatus cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static GlossaryInfoType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				GlossaryInfoType object = new GlossaryInfoType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"GlossaryInfoType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (GlossaryInfoType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					java.util.ArrayList list2 = new java.util.ArrayList();

					java.util.ArrayList list3 = new java.util.ArrayList();

					java.util.ArrayList list4 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountStatus").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(AccountStatusType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"AccountStatus").equals(reader
										.getName())) {
									list1.add(AccountStatusType.Factory
											.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setAccountStatus((AccountStatusType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(AccountStatusType.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PaymentHistoryStatus").equals(reader
									.getName())) {

						// Process the array and step past its final element's
						// end.
						list2.add(AccountStatusType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone2 = false;
						while (!loopDone2) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone2 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"PaymentHistoryStatus").equals(reader
										.getName())) {
									list2.add(AccountStatusType.Factory
											.parse(reader));

								} else {
									loopDone2 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setPaymentHistoryStatus((AccountStatusType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(AccountStatusType.class, list2));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AssetClassificationStatus").equals(reader
									.getName())) {

						// Process the array and step past its final element's
						// end.
						list3.add(AccountStatusType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone3 = false;
						while (!loopDone3) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone3 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"AssetClassificationStatus")
										.equals(reader.getName())) {
									list3.add(AccountStatusType.Factory
											.parse(reader));

								} else {
									loopDone3 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setAssetClassificationStatus((AccountStatusType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(AccountStatusType.class, list3));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"SuitFiledStatus").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list4.add(AccountStatusType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone4 = false;
						while (!loopDone4) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone4 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"SuitFiledStatus").equals(reader
										.getName())) {
									list4.add(AccountStatusType.Factory
											.parse(reader));

								} else {
									loopDone4 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setSuitFiledStatus((AccountStatusType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(AccountStatusType.class, list4));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PassportId_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"PassportId_type1", "ns1");

		/**
		 * field for PassportId_type1
		 */

		protected java.lang.String localPassportId_type1;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPassportId_type1() {
			return localPassportId_type1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PassportId_type1
		 */
		public void setPassportId_type1(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-zA-Z])\\d+")) {
				this.localPassportId_type1 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localPassportId_type1.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":PassportId_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "PassportId_type1", xmlWriter);
				}
			}

			if (localPassportId_type1 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"PassportId_type1 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localPassportId_type1);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPassportId_type1) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static PassportId_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				PassportId_type1 returnValue = new PassportId_type1();

				returnValue
						.setPassportId_type1(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static PassportId_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return PassportId_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return PassportId_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static PassportId_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				PassportId_type1 object = new PassportId_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "PassportId_type1"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setPassportId_type1(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Postal_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Postal_type1", "ns1");

		/**
		 * field for Postal_type0
		 */

		protected java.lang.String localPostal_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPostal_type0() {
			return localPostal_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Postal_type0
		 */
		public void setPostal_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([0-9])*")) {
				this.localPostal_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localPostal_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Postal_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Postal_type1", xmlWriter);
				}
			}

			if (localPostal_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Postal_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localPostal_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPostal_type0) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Postal_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Postal_type1 returnValue = new Postal_type1();

				returnValue
						.setPostal_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Postal_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Postal_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return Postal_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Postal_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Postal_type1 object = new Postal_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Postal_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setPostal_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Postal_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Postal_type0", "ns1");

		/**
		 * field for Postal_type0
		 */

		protected java.lang.String localPostal_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPostal_type0() {
			return localPostal_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Postal_type0
		 */
		public void setPostal_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([0-9])*")) {
				this.localPostal_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localPostal_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Postal_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Postal_type0", xmlWriter);
				}
			}

			if (localPostal_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Postal_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localPostal_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPostal_type0) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Postal_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Postal_type0 returnValue = new Postal_type0();

				returnValue
						.setPostal_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Postal_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Postal_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return Postal_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Postal_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Postal_type0 object = new Postal_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Postal_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setPostal_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PassportId_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"PassportId_type0", "ns1");

		/**
		 * field for PassportId_type0
		 */

		protected java.lang.String localPassportId_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPassportId_type0() {
			return localPassportId_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PassportId_type0
		 */
		public void setPassportId_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-zA-Z])\\d+")) {
				this.localPassportId_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localPassportId_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":PassportId_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "PassportId_type0", xmlWriter);
				}
			}

			if (localPassportId_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"PassportId_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localPassportId_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPassportId_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static PassportId_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				PassportId_type0 returnValue = new PassportId_type0();

				returnValue
						.setPassportId_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static PassportId_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return PassportId_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return PassportId_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static PassportId_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				PassportId_type0 object = new PassportId_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "PassportId_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setPassportId_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class InquiryAddressType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * InquiryAddressType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AddressLine
		 */

		protected AddressLine_type1 localAddressLine;

		/**
		 * Auto generated getter method
		 * 
		 * @return AddressLine_type1
		 */
		public AddressLine_type1 getAddressLine() {
			return localAddressLine;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AddressLine
		 */
		public void setAddressLine(AddressLine_type1 param) {

			this.localAddressLine = param;

		}

		/**
		 * field for Street
		 */

		protected Street_type3 localStreet;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localStreetTracker = false;

		public boolean isStreetSpecified() {
			return localStreetTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Street_type3
		 */
		public Street_type3 getStreet() {
			return localStreet;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Street
		 */
		public void setStreet(Street_type3 param) {
			localStreetTracker = param != null;

			this.localStreet = param;

		}

		/**
		 * field for Locality1
		 */

		protected Locality1_type3 localLocality1;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLocality1Tracker = false;

		public boolean isLocality1Specified() {
			return localLocality1Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Locality1_type3
		 */
		public Locality1_type3 getLocality1() {
			return localLocality1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality1
		 */
		public void setLocality1(Locality1_type3 param) {
			localLocality1Tracker = param != null;

			this.localLocality1 = param;

		}

		/**
		 * field for Locality2
		 */

		protected Locality2_type3 localLocality2;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLocality2Tracker = false;

		public boolean isLocality2Specified() {
			return localLocality2Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Locality2_type3
		 */
		public Locality2_type3 getLocality2() {
			return localLocality2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality2
		 */
		public void setLocality2(Locality2_type3 param) {
			localLocality2Tracker = param != null;

			this.localLocality2 = param;

		}

		/**
		 * field for City
		 */

		protected City_type3 localCity;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCityTracker = false;

		public boolean isCitySpecified() {
			return localCityTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return City_type3
		 */
		public City_type3 getCity() {
			return localCity;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            City
		 */
		public void setCity(City_type3 param) {
			localCityTracker = param != null;

			this.localCity = param;

		}

		/**
		 * field for State
		 */

		protected StateCodeOptions localState;

		/**
		 * Auto generated getter method
		 * 
		 * @return StateCodeOptions
		 */
		public StateCodeOptions getState() {
			return localState;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            State
		 */
		public void setState(StateCodeOptions param) {

			this.localState = param;

		}

		/**
		 * field for Postal
		 */

		protected Postal_type3 localPostal;

		/**
		 * Auto generated getter method
		 * 
		 * @return Postal_type3
		 */
		public Postal_type3 getPostal() {
			return localPostal;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Postal
		 */
		public void setPostal(Postal_type3 param) {

			this.localPostal = param;

		}

		/**
		 * field for AddressType
		 */

		protected AddressCodeType localAddressType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAddressTypeTracker = false;

		public boolean isAddressTypeSpecified() {
			return localAddressTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AddressCodeType
		 */
		public AddressCodeType getAddressType() {
			return localAddressType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AddressType
		 */
		public void setAddressType(AddressCodeType param) {
			localAddressTypeTracker = param != null;

			this.localAddressType = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":InquiryAddressType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "InquiryAddressType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localAddressLine == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"AddressLine cannot be null!!");
			}
			localAddressLine.serialize(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"AddressLine"), xmlWriter);
			if (localStreetTracker) {
				if (localStreet == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Street cannot be null!!");
				}
				localStreet.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Street"), xmlWriter);
			}
			if (localLocality1Tracker) {
				if (localLocality1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Locality1 cannot be null!!");
				}
				localLocality1.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Locality1"), xmlWriter);
			}
			if (localLocality2Tracker) {
				if (localLocality2 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Locality2 cannot be null!!");
				}
				localLocality2.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Locality2"), xmlWriter);
			}
			if (localCityTracker) {
				if (localCity == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"City cannot be null!!");
				}
				localCity.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"City"), xmlWriter);
			}
			if (localState == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"State cannot be null!!");
			}
			localState.serialize(
					new javax.xml.namespace.QName(
							"http://services.equifax.com/eport/ws/schemas/1.0",
							"State"), xmlWriter);

			if (localPostal == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Postal cannot be null!!");
			}
			localPostal.serialize(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"Postal"), xmlWriter);
			if (localAddressTypeTracker) {
				if (localAddressType == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AddressType cannot be null!!");
				}
				localAddressType.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AddressType"), xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"AddressLine"));

			if (localAddressLine == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"AddressLine cannot be null!!");
			}
			elementList.add(localAddressLine);
			if (localStreetTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Street"));

				if (localStreet == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Street cannot be null!!");
				}
				elementList.add(localStreet);
			}
			if (localLocality1Tracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Locality1"));

				if (localLocality1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Locality1 cannot be null!!");
				}
				elementList.add(localLocality1);
			}
			if (localLocality2Tracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Locality2"));

				if (localLocality2 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Locality2 cannot be null!!");
				}
				elementList.add(localLocality2);
			}
			if (localCityTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"City"));

				if (localCity == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"City cannot be null!!");
				}
				elementList.add(localCity);
			}
			elementList
					.add(new javax.xml.namespace.QName(
							"http://services.equifax.com/eport/ws/schemas/1.0",
							"State"));

			if (localState == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"State cannot be null!!");
			}
			elementList.add(localState);

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"Postal"));

			if (localPostal == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Postal cannot be null!!");
			}
			elementList.add(localPostal);
			if (localAddressTypeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AddressType"));

				if (localAddressType == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AddressType cannot be null!!");
				}
				elementList.add(localAddressType);
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static InquiryAddressType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				InquiryAddressType object = new InquiryAddressType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"InquiryAddressType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (InquiryAddressType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AddressLine").equals(reader.getName())) {

						object.setAddressLine(AddressLine_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Street").equals(reader.getName())) {

						object.setStreet(Street_type3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Locality1").equals(reader.getName())) {

						object.setLocality1(Locality1_type3.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Locality2").equals(reader.getName())) {

						object.setLocality2(Locality2_type3.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"City").equals(reader.getName())) {

						object.setCity(City_type3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"State").equals(reader.getName())) {

						object.setState(StateCodeOptions.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Postal").equals(reader.getName())) {

						object.setPostal(Postal_type3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AddressType").equals(reader.getName())) {

						object.setAddressType(AddressCodeType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VidNsdlResponse implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * vidNsdlResponse Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for NsdlRequest
		 */

		protected NsdlRequest localNsdlRequest;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNsdlRequestTracker = false;

		public boolean isNsdlRequestSpecified() {
			return localNsdlRequestTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return NsdlRequest
		 */
		public NsdlRequest getNsdlRequest() {
			return localNsdlRequest;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NsdlRequest
		 */
		public void setNsdlRequest(NsdlRequest param) {
			localNsdlRequestTracker = param != null;

			this.localNsdlRequest = param;

		}

		/**
		 * field for NsdlResponse
		 */

		protected NsdlResponse localNsdlResponse;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNsdlResponseTracker = false;

		public boolean isNsdlResponseSpecified() {
			return localNsdlResponseTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return NsdlResponse
		 */
		public NsdlResponse getNsdlResponse() {
			return localNsdlResponse;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NsdlResponse
		 */
		public void setNsdlResponse(NsdlResponse param) {
			localNsdlResponseTracker = param != null;

			this.localNsdlResponse = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":vidNsdlResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "vidNsdlResponse", xmlWriter);
				}

			}
			if (localNsdlRequestTracker) {
				if (localNsdlRequest == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"nsdlRequest cannot be null!!");
				}
				localNsdlRequest.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"nsdlRequest"), xmlWriter);
			}
			if (localNsdlResponseTracker) {
				if (localNsdlResponse == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"nsdlResponse cannot be null!!");
				}
				localNsdlResponse.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"nsdlResponse"), xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localNsdlRequestTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"nsdlRequest"));

				if (localNsdlRequest == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"nsdlRequest cannot be null!!");
				}
				elementList.add(localNsdlRequest);
			}
			if (localNsdlResponseTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"nsdlResponse"));

				if (localNsdlResponse == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"nsdlResponse cannot be null!!");
				}
				elementList.add(localNsdlResponse);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static VidNsdlResponse parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				VidNsdlResponse object = new VidNsdlResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"vidNsdlResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (VidNsdlResponse) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"nsdlRequest").equals(reader.getName())) {

						object.setNsdlRequest(NsdlRequest.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"nsdlResponse").equals(reader.getName())) {

						object.setNsdlResponse(NsdlResponse.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VoterId implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0", "VoterId",
				"ns1");

		/**
		 * field for VoterId
		 */

		protected VoterId_type1 localVoterId;

		/**
		 * Auto generated getter method
		 * 
		 * @return VoterId_type1
		 */
		public VoterId_type1 getVoterId() {
			return localVoterId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VoterId
		 */
		public void setVoterId(VoterId_type1 param) {

			this.localVoterId = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			if (localVoterId == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"VoterId cannot be null!");
			}
			localVoterId.serialize(MY_QNAME, xmlWriter);

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return localVoterId.getPullParser(MY_QNAME);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static VoterId parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				VoterId object = new VoterId();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"VoterId").equals(reader.getName())) {

								object.setVoterId(VoterId_type1.Factory
										.parse(reader));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MiddleName_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"MiddleName_type1", "ns1");

		/**
		 * field for MiddleName_type0
		 */

		protected java.lang.String localMiddleName_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMiddleName_type0() {
			return localMiddleName_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MiddleName_type0
		 */
		public void setMiddleName_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-z A-Z.,])+")) {
				this.localMiddleName_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localMiddleName_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":MiddleName_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "MiddleName_type1", xmlWriter);
				}
			}

			if (localMiddleName_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"MiddleName_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localMiddleName_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMiddleName_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static MiddleName_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				MiddleName_type1 returnValue = new MiddleName_type1();

				returnValue
						.setMiddleName_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static MiddleName_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return MiddleName_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return MiddleName_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static MiddleName_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				MiddleName_type1 object = new MiddleName_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "MiddleName_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setMiddleName_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class NsdlRequest extends Request implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * nsdlRequest Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for PANNumber
		 */

		protected java.lang.String localPANNumber;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPANNumberTracker = false;

		public boolean isPANNumberSpecified() {
			return localPANNumberTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPANNumber() {
			return localPANNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PANNumber
		 */
		public void setPANNumber(java.lang.String param) {
			localPANNumberTracker = param != null;

			this.localPANNumber = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			java.lang.String namespacePrefix = registerPrefix(xmlWriter,
					"http://services.equifax.com/eport/ws/schemas/1.0");
			if ((namespacePrefix != null)
					&& (namespacePrefix.trim().length() > 0)) {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						namespacePrefix + ":nsdlRequest", xmlWriter);
			} else {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						"nsdlRequest", xmlWriter);
			}

			if (localSourceTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "source", xmlWriter);

				if (localSource == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"source cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localSource);

				}

				xmlWriter.writeEndElement();
			}
			if (localPANNumberTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "PANNumber", xmlWriter);

				if (localPANNumber == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"PANNumber cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPANNumber);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			attribList.add(new javax.xml.namespace.QName(
					"http://www.w3.org/2001/XMLSchema-instance", "type"));
			attribList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"nsdlRequest"));
			if (localSourceTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"source"));

				if (localSource != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSource));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"source cannot be null!!");
				}
			}
			if (localPANNumberTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PANNumber"));

				if (localPANNumber != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPANNumber));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"PANNumber cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static NsdlRequest parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				NsdlRequest object = new NsdlRequest();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"nsdlRequest".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (NsdlRequest) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"source").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "source"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSource(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PANNumber").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "PANNumber"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPANNumber(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DisputeDetailsType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * DisputeDetailsType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AccNum
		 */

		protected java.lang.String localAccNum;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccNumTracker = false;

		public boolean isAccNumSpecified() {
			return localAccNumTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAccNum() {
			return localAccNum;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccNum
		 */
		public void setAccNum(java.lang.String param) {
			localAccNumTracker = param != null;

			this.localAccNum = param;

		}

		/**
		 * field for DisputeComments
		 */

		protected java.lang.String localDisputeComments;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDisputeComments() {
			return localDisputeComments;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DisputeComments
		 */
		public void setDisputeComments(java.lang.String param) {

			this.localDisputeComments = param;

		}

		/**
		 * field for Status
		 */

		protected java.lang.String localStatus;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getStatus() {
			return localStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Status
		 */
		public void setStatus(java.lang.String param) {

			this.localStatus = param;

		}

		/**
		 * field for ResolvedDate
		 */

		protected java.util.Date localResolvedDate;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localResolvedDateTracker = false;

		public boolean isResolvedDateSpecified() {
			return localResolvedDateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getResolvedDate() {
			return localResolvedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ResolvedDate
		 */
		public void setResolvedDate(java.util.Date param) {
			localResolvedDateTracker = param != null;

			this.localResolvedDate = param;

		}

		/**
		 * field for Type This was an Attribute!
		 */

		protected java.lang.String localType;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getType() {
			return localType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Type
		 */
		public void setType(java.lang.String param) {

			this.localType = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":DisputeDetailsType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "DisputeDetailsType", xmlWriter);
				}

			}

			if (localType != null) {

				writeAttribute("", "type",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localType), xmlWriter);

			}
			if (localAccNumTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AccNum", xmlWriter);

				if (localAccNum == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AccNum cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAccNum);

				}

				xmlWriter.writeEndElement();
			}
			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "DisputeComments", xmlWriter);

			if (localDisputeComments == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"DisputeComments cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localDisputeComments);

			}

			xmlWriter.writeEndElement();

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "Status", xmlWriter);

			if (localStatus == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"Status cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localStatus);

			}

			xmlWriter.writeEndElement();
			if (localResolvedDateTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "ResolvedDate", xmlWriter);

				if (localResolvedDate == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"ResolvedDate cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localResolvedDate));

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAccNumTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccNum"));

				if (localAccNum != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAccNum));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AccNum cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"DisputeComments"));

			if (localDisputeComments != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localDisputeComments));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"DisputeComments cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"Status"));

			if (localStatus != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localStatus));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"Status cannot be null!!");
			}
			if (localResolvedDateTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ResolvedDate"));

				if (localResolvedDate != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localResolvedDate));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"ResolvedDate cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "type"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localType));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static DisputeDetailsType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				DisputeDetailsType object = new DisputeDetailsType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"DisputeDetailsType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (DisputeDetailsType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "type"
					java.lang.String tempAttribType =

					reader.getAttributeValue(null, "type");

					if (tempAttribType != null) {
						java.lang.String content = tempAttribType;

						object.setType(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(tempAttribType));

					} else {

					}
					handledAttributes.add("type");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccNum").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AccNum"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAccNum(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DisputeComments").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DisputeComments"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDisputeComments(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Status").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Status"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setStatus(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ResolvedDate").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ResolvedDate"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setResolvedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ExtensionMapper {

		public static java.lang.Object getTypeObject(
				java.lang.String namespaceURI, java.lang.String typeName,
				javax.xml.stream.XMLStreamReader reader)
				throws java.lang.Exception {

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "PlaceOfBirthInfoType".equals(typeName)) {

				return PlaceOfBirthInfoType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "ScoringElementsType".equals(typeName)) {

				return ScoringElementsType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "PhoneTypeCode".equals(typeName)) {

				return PhoneTypeCode.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "Dispute_type0".equals(typeName)) {

				return Dispute_type0.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "EnquiryType".equals(typeName)) {

				return EnquiryType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "CreditReportSummaryType".equals(typeName)) {

				return CreditReportSummaryType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AdditionalMFIDetailsType".equals(typeName)) {

				return AdditionalMFIDetailsType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "RequestHeaderType".equals(typeName)) {

				return RequestHeaderType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AccountDetailsType".equals(typeName)) {

				return AccountDetailsType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "Postal_type3".equals(typeName)) {

				return Postal_type3.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "GenderOptions".equals(typeName)) {

				return GenderOptions.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "GlossaryInfoType".equals(typeName)) {

				return GlossaryInfoType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "GenderTypeCode".equals(typeName)) {

				return GenderTypeCode.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "Postal_type1".equals(typeName)) {

				return Postal_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "InquiryAddressType".equals(typeName)) {

				return InquiryAddressType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "ReportFormatOptions".equals(typeName)) {

				return ReportFormatOptions.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "MiddleName_type1".equals(typeName)) {

				return MiddleName_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AliasNameInfoType".equals(typeName)) {

				return AliasNameInfoType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "DisputeDetailsType".equals(typeName)) {

				return DisputeDetailsType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "EmailAddressType".equals(typeName)) {

				return EmailAddressType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "AddrLine1_type1".equals(typeName)) {

				return AddrLine1_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "AddressType".equals(typeName)) {

				return AddressType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "OtherKeyIndType".equals(typeName)) {

				return OtherKeyIndType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "IDType".equals(typeName)) {

				return IDType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AddressLine_type1".equals(typeName)) {

				return AddressLine_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "FirstName_type1".equals(typeName)) {

				return FirstName_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "MaritalStatusOptions".equals(typeName)) {

				return MaritalStatusOptions.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "PhoneType".equals(typeName)) {

				return PhoneType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "uidaiRequest".equals(typeName)) {

				return UidaiRequest.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "Locality2_type3".equals(typeName)) {

				return Locality2_type3.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "AddressCodeType".equals(typeName)) {

				return AddressCodeType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "LandlineType".equals(typeName)) {

				return LandlineType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "InquiryRequestType".equals(typeName)) {

				return InquiryRequestType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "Locality2_type1".equals(typeName)) {

				return Locality2_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "InquiryCommonInputPhoneType".equals(typeName)) {

				return InquiryCommonInputPhoneType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "MFIAddlAdrsDetailsType".equals(typeName)) {

				return MFIAddlAdrsDetailsType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "InquiryResponseHeaderType".equals(typeName)) {

				return InquiryResponseHeaderType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "RelationInfoType".equals(typeName)) {

				return RelationInfoType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "RationCard_type1".equals(typeName)) {

				return RationCard_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "InquiryPurposeOptions".equals(typeName)) {

				return InquiryPurposeOptions.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "response".equals(typeName)) {

				return Response.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "ReportType".equals(typeName)) {

				return ReportType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "InquiryResponseType".equals(typeName)) {

				return InquiryResponseType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "Locality1_type1".equals(typeName)) {

				return Locality1_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AccountInputType".equals(typeName)) {

				return AccountInputType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "IdentificationType".equals(typeName)) {

				return IdentificationType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "Street_type3".equals(typeName)) {

				return Street_type3.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AccountStatusType".equals(typeName)) {

				return AccountStatusType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "NameType".equals(typeName)) {

				return NameType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AdditionalId1_type1".equals(typeName)) {

				return AdditionalId1_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "voterRequest".equals(typeName)) {

				return VoterRequest.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "Locality1_type3".equals(typeName)) {

				return Locality1_type3.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "InquiryCommonInputAddressType".equals(typeName)) {

				return InquiryCommonInputAddressType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "NationalIdCard_type1".equals(typeName)) {

				return NationalIdCard_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "Street_type1".equals(typeName)) {

				return Street_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "ScoreType".equals(typeName)) {

				return ScoreType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "RecentActivitiesType".equals(typeName)) {

				return RecentActivitiesType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "InquiryPhoneType".equals(typeName)) {

				return InquiryPhoneType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "City_type1".equals(typeName)) {

				return City_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "FullName_type1".equals(typeName)) {

				return FullName_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "City_type3".equals(typeName)) {

				return City_type3.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AdditionalNameTypeDetails".equals(typeName)) {

				return AdditionalNameTypeDetails.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "DriverLicense_type1".equals(typeName)) {

				return DriverLicense_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "MonthlyDetailType".equals(typeName)) {

				return MonthlyDetailType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "EmployerDetailsType".equals(typeName)) {

				return EmployerDetailsType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "IncomeDetailsType".equals(typeName)) {

				return IncomeDetailsType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "vidNsdlResponse".equals(typeName)) {

				return VidNsdlResponse.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "FamilyInfo".equals(typeName)) {

				return FamilyInfo.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AdditionalName_type1".equals(typeName)) {

				return AdditionalName_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "InquiryCommonAccountDetailsType".equals(typeName)) {

				return InquiryCommonAccountDetailsType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "PersonalInfoType".equals(typeName)) {

				return PersonalInfoType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "nsdlResponse".equals(typeName)) {

				return NsdlResponse.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "voterResponse".equals(typeName)) {

				return VoterResponse.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "EnquirySummaryType".equals(typeName)) {

				return EnquirySummaryType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "LastName_type1".equals(typeName)) {

				return LastName_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AccountHistoryType".equals(typeName)) {

				return AccountHistoryType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "ScoringElementType".equals(typeName)) {

				return ScoringElementType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "AgeInfo".equals(typeName)) {

				return AgeInfo.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "ErrorType".equals(typeName)) {

				return ErrorType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "IDAndContactType".equals(typeName)) {

				return IDAndContactType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "vidVoterResponse".equals(typeName)) {

				return VidVoterResponse.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "vidUidaiResponse".equals(typeName)) {

				return VidUidaiResponse.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "AccountType".equals(typeName)) {

				return AccountType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "uidaiResponse".equals(typeName)) {

				return UidaiResponse.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "MFIAdditionalAddressType".equals(typeName)) {

				return MFIAdditionalAddressType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "responseBody".equals(typeName)) {

				return ResponseBody.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "RequestBodyType".equals(typeName)) {

				return RequestBodyType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "GroupCreditSummaryType".equals(typeName)) {

				return GroupCreditSummaryType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "StateCodeOptions".equals(typeName)) {

				return StateCodeOptions.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AdditionalId2_type1".equals(typeName)) {

				return AdditionalId2_type1.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "ConsumerDisputesType".equals(typeName)) {

				return ConsumerDisputesType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "request".equals(typeName)) {

				return Request.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "MFIAdditionalIdentityInfoType".equals(typeName)) {

				return MFIAdditionalIdentityInfoType.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI) && "nsdlRequest".equals(typeName)) {

				return NsdlRequest.Factory.parse(reader);

			}

			if ("http://services.equifax.com/eport/ws/schemas/1.0"
					.equals(namespaceURI)
					&& "AdditionalNameValType".equals(typeName)) {

				return AdditionalNameValType.Factory.parse(reader);

			}

			throw new org.apache.axis2.databinding.ADBException(
					"Unsupported type " + namespaceURI + " " + typeName);
		}

	}

	public static class MiddleName_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"MiddleName_type0", "ns1");

		/**
		 * field for MiddleName_type0
		 */

		protected java.lang.String localMiddleName_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMiddleName_type0() {
			return localMiddleName_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MiddleName_type0
		 */
		public void setMiddleName_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-z A-Z.,])+")) {
				this.localMiddleName_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localMiddleName_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":MiddleName_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "MiddleName_type0", xmlWriter);
				}
			}

			if (localMiddleName_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"MiddleName_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localMiddleName_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMiddleName_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static MiddleName_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				MiddleName_type0 returnValue = new MiddleName_type0();

				returnValue
						.setMiddleName_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static MiddleName_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return MiddleName_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return MiddleName_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static MiddleName_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				MiddleName_type0 object = new MiddleName_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "MiddleName_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setMiddleName_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class FirstName_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"FirstName_type0", "ns1");

		/**
		 * field for FirstName_type0
		 */

		protected java.lang.String localFirstName_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFirstName_type0() {
			return localFirstName_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FirstName_type0
		 */
		public void setFirstName_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-z A-Z.,])+")) {
				this.localFirstName_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localFirstName_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":FirstName_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "FirstName_type0", xmlWriter);
				}
			}

			if (localFirstName_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"FirstName_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localFirstName_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localFirstName_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static FirstName_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				FirstName_type0 returnValue = new FirstName_type0();

				returnValue
						.setFirstName_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static FirstName_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return FirstName_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return FirstName_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static FirstName_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				FirstName_type0 object = new FirstName_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "FirstName_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setFirstName_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ResponseBody implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * responseBody Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for VidNsdlResponses This was an Array!
		 */

		protected VidNsdlResponse[] localVidNsdlResponses;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVidNsdlResponsesTracker = false;

		public boolean isVidNsdlResponsesSpecified() {
			return localVidNsdlResponsesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return VidNsdlResponse[]
		 */
		public VidNsdlResponse[] getVidNsdlResponses() {
			return localVidNsdlResponses;
		}

		/**
		 * validate the array for VidNsdlResponses
		 */
		protected void validateVidNsdlResponses(VidNsdlResponse[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VidNsdlResponses
		 */
		public void setVidNsdlResponses(VidNsdlResponse[] param) {

			validateVidNsdlResponses(param);

			localVidNsdlResponsesTracker = true;

			this.localVidNsdlResponses = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            VidNsdlResponse
		 */
		public void addVidNsdlResponses(VidNsdlResponse param) {
			if (localVidNsdlResponses == null) {
				localVidNsdlResponses = new VidNsdlResponse[] {};
			}

			// update the setting tracker
			localVidNsdlResponsesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localVidNsdlResponses);
			list.add(param);
			this.localVidNsdlResponses = (VidNsdlResponse[]) list
					.toArray(new VidNsdlResponse[list.size()]);

		}

		/**
		 * field for VidUidaiResponses This was an Array!
		 */

		protected VidUidaiResponse[] localVidUidaiResponses;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVidUidaiResponsesTracker = false;

		public boolean isVidUidaiResponsesSpecified() {
			return localVidUidaiResponsesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return VidUidaiResponse[]
		 */
		public VidUidaiResponse[] getVidUidaiResponses() {
			return localVidUidaiResponses;
		}

		/**
		 * validate the array for VidUidaiResponses
		 */
		protected void validateVidUidaiResponses(VidUidaiResponse[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VidUidaiResponses
		 */
		public void setVidUidaiResponses(VidUidaiResponse[] param) {

			validateVidUidaiResponses(param);

			localVidUidaiResponsesTracker = true;

			this.localVidUidaiResponses = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            VidUidaiResponse
		 */
		public void addVidUidaiResponses(VidUidaiResponse param) {
			if (localVidUidaiResponses == null) {
				localVidUidaiResponses = new VidUidaiResponse[] {};
			}

			// update the setting tracker
			localVidUidaiResponsesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localVidUidaiResponses);
			list.add(param);
			this.localVidUidaiResponses = (VidUidaiResponse[]) list
					.toArray(new VidUidaiResponse[list.size()]);

		}

		/**
		 * field for VidVoterResponses This was an Array!
		 */

		protected VidVoterResponse[] localVidVoterResponses;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVidVoterResponsesTracker = false;

		public boolean isVidVoterResponsesSpecified() {
			return localVidVoterResponsesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return VidVoterResponse[]
		 */
		public VidVoterResponse[] getVidVoterResponses() {
			return localVidVoterResponses;
		}

		/**
		 * validate the array for VidVoterResponses
		 */
		protected void validateVidVoterResponses(VidVoterResponse[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VidVoterResponses
		 */
		public void setVidVoterResponses(VidVoterResponse[] param) {

			validateVidVoterResponses(param);

			localVidVoterResponsesTracker = true;

			this.localVidVoterResponses = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            VidVoterResponse
		 */
		public void addVidVoterResponses(VidVoterResponse param) {
			if (localVidVoterResponses == null) {
				localVidVoterResponses = new VidVoterResponse[] {};
			}

			// update the setting tracker
			localVidVoterResponsesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localVidVoterResponses);
			list.add(param);
			this.localVidVoterResponses = (VidVoterResponse[]) list
					.toArray(new VidVoterResponse[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":responseBody",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "responseBody", xmlWriter);
				}

			}
			if (localVidNsdlResponsesTracker) {
				if (localVidNsdlResponses != null) {
					for (int i = 0; i < localVidNsdlResponses.length; i++) {
						if (localVidNsdlResponses[i] != null) {
							localVidNsdlResponses[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"vidNsdlResponses"),
											xmlWriter);
						} else {

							writeStartElement(
									null,
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"vidNsdlResponses", xmlWriter);

							// write the nil attribute
							writeAttribute(
									"xsi",
									"http://www.w3.org/2001/XMLSchema-instance",
									"nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null,
							"http://services.equifax.com/eport/ws/schemas/1.0",
							"vidNsdlResponses", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance", "nil",
							"1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			if (localVidUidaiResponsesTracker) {
				if (localVidUidaiResponses != null) {
					for (int i = 0; i < localVidUidaiResponses.length; i++) {
						if (localVidUidaiResponses[i] != null) {
							localVidUidaiResponses[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"vidUidaiResponses"),
											xmlWriter);
						} else {

							writeStartElement(
									null,
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"vidUidaiResponses", xmlWriter);

							// write the nil attribute
							writeAttribute(
									"xsi",
									"http://www.w3.org/2001/XMLSchema-instance",
									"nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null,
							"http://services.equifax.com/eport/ws/schemas/1.0",
							"vidUidaiResponses", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance", "nil",
							"1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			if (localVidVoterResponsesTracker) {
				if (localVidVoterResponses != null) {
					for (int i = 0; i < localVidVoterResponses.length; i++) {
						if (localVidVoterResponses[i] != null) {
							localVidVoterResponses[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"vidVoterResponses"),
											xmlWriter);
						} else {

							writeStartElement(
									null,
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"vidVoterResponses", xmlWriter);

							// write the nil attribute
							writeAttribute(
									"xsi",
									"http://www.w3.org/2001/XMLSchema-instance",
									"nil", "1", xmlWriter);
							xmlWriter.writeEndElement();

						}

					}
				} else {

					writeStartElement(null,
							"http://services.equifax.com/eport/ws/schemas/1.0",
							"vidVoterResponses", xmlWriter);

					// write the nil attribute
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance", "nil",
							"1", xmlWriter);
					xmlWriter.writeEndElement();

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localVidNsdlResponsesTracker) {
				if (localVidNsdlResponses != null) {
					for (int i = 0; i < localVidNsdlResponses.length; i++) {

						if (localVidNsdlResponses[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"vidNsdlResponses"));
							elementList.add(localVidNsdlResponses[i]);
						} else {

							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"vidNsdlResponses"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName(
							"http://services.equifax.com/eport/ws/schemas/1.0",
							"vidNsdlResponses"));
					elementList.add(localVidNsdlResponses);

				}

			}
			if (localVidUidaiResponsesTracker) {
				if (localVidUidaiResponses != null) {
					for (int i = 0; i < localVidUidaiResponses.length; i++) {

						if (localVidUidaiResponses[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"vidUidaiResponses"));
							elementList.add(localVidUidaiResponses[i]);
						} else {

							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"vidUidaiResponses"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName(
							"http://services.equifax.com/eport/ws/schemas/1.0",
							"vidUidaiResponses"));
					elementList.add(localVidUidaiResponses);

				}

			}
			if (localVidVoterResponsesTracker) {
				if (localVidVoterResponses != null) {
					for (int i = 0; i < localVidVoterResponses.length; i++) {

						if (localVidVoterResponses[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"vidVoterResponses"));
							elementList.add(localVidVoterResponses[i]);
						} else {

							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"vidVoterResponses"));
							elementList.add(null);

						}

					}
				} else {

					elementList.add(new javax.xml.namespace.QName(
							"http://services.equifax.com/eport/ws/schemas/1.0",
							"vidVoterResponses"));
					elementList.add(localVidVoterResponses);

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ResponseBody parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ResponseBody object = new ResponseBody();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"responseBody".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (ResponseBody) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					java.util.ArrayList list2 = new java.util.ArrayList();

					java.util.ArrayList list3 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"vidNsdlResponses")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							list1.add(null);
							reader.next();
						} else {
							list1.add(VidNsdlResponse.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"vidNsdlResponses").equals(reader
										.getName())) {

									nillableValue = reader
											.getAttributeValue(
													"http://www.w3.org/2001/XMLSchema-instance",
													"nil");
									if ("true".equals(nillableValue)
											|| "1".equals(nillableValue)) {
										list1.add(null);
										reader.next();
									} else {
										list1.add(VidNsdlResponse.Factory
												.parse(reader));
									}
								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setVidNsdlResponses((VidNsdlResponse[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(VidNsdlResponse.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"vidUidaiResponses").equals(reader
									.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							list2.add(null);
							reader.next();
						} else {
							list2.add(VidUidaiResponse.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone2 = false;
						while (!loopDone2) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone2 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"vidUidaiResponses").equals(reader
										.getName())) {

									nillableValue = reader
											.getAttributeValue(
													"http://www.w3.org/2001/XMLSchema-instance",
													"nil");
									if ("true".equals(nillableValue)
											|| "1".equals(nillableValue)) {
										list2.add(null);
										reader.next();
									} else {
										list2.add(VidUidaiResponse.Factory
												.parse(reader));
									}
								} else {
									loopDone2 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setVidUidaiResponses((VidUidaiResponse[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(VidUidaiResponse.class, list2));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"vidVoterResponses").equals(reader
									.getName())) {

						// Process the array and step past its final element's
						// end.

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							list3.add(null);
							reader.next();
						} else {
							list3.add(VidVoterResponse.Factory.parse(reader));
						}
						// loop until we find a start element that is not part
						// of this array
						boolean loopDone3 = false;
						while (!loopDone3) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone3 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"vidVoterResponses").equals(reader
										.getName())) {

									nillableValue = reader
											.getAttributeValue(
													"http://www.w3.org/2001/XMLSchema-instance",
													"nil");
									if ("true".equals(nillableValue)
											|| "1".equals(nillableValue)) {
										list3.add(null);
										reader.next();
									} else {
										list3.add(VidVoterResponse.Factory
												.parse(reader));
									}
								} else {
									loopDone3 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setVidVoterResponses((VidVoterResponse[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(VidVoterResponse.class, list3));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class FirstName_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"FirstName_type1", "ns1");

		/**
		 * field for FirstName_type0
		 */

		protected java.lang.String localFirstName_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFirstName_type0() {
			return localFirstName_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FirstName_type0
		 */
		public void setFirstName_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-z A-Z.,])+")) {
				this.localFirstName_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localFirstName_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":FirstName_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "FirstName_type1", xmlWriter);
				}
			}

			if (localFirstName_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"FirstName_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localFirstName_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localFirstName_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static FirstName_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				FirstName_type1 returnValue = new FirstName_type1();

				returnValue
						.setFirstName_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static FirstName_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return FirstName_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return FirstName_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static FirstName_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				FirstName_type1 object = new FirstName_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "FirstName_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setFirstName_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MaritalStatusOptions implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"MaritalStatusOptions", "ns1");

		/**
		 * field for MaritalStatusOptions
		 */

		protected java.lang.String localMaritalStatusOptions;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected MaritalStatusOptions(java.lang.String value,
				boolean isRegisterValue) {
			localMaritalStatusOptions = value;
			if (isRegisterValue) {

				_table_.put(localMaritalStatusOptions, this);

			}

		}

		public static final java.lang.String _value1 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Cohabitating");

		public static final java.lang.String _value2 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Divorced");

		public static final java.lang.String _value3 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Married");

		public static final java.lang.String _value4 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Not Asked");

		public static final java.lang.String _value5 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Not Given");

		public static final java.lang.String _value6 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Other");

		public static final java.lang.String _value7 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Separated");

		public static final java.lang.String _value8 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Single");

		public static final java.lang.String _value9 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("To Be Married");

		public static final java.lang.String _value10 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Widowed");

		public static final MaritalStatusOptions value1 = new MaritalStatusOptions(
				_value1, true);

		public static final MaritalStatusOptions value2 = new MaritalStatusOptions(
				_value2, true);

		public static final MaritalStatusOptions value3 = new MaritalStatusOptions(
				_value3, true);

		public static final MaritalStatusOptions value4 = new MaritalStatusOptions(
				_value4, true);

		public static final MaritalStatusOptions value5 = new MaritalStatusOptions(
				_value5, true);

		public static final MaritalStatusOptions value6 = new MaritalStatusOptions(
				_value6, true);

		public static final MaritalStatusOptions value7 = new MaritalStatusOptions(
				_value7, true);

		public static final MaritalStatusOptions value8 = new MaritalStatusOptions(
				_value8, true);

		public static final MaritalStatusOptions value9 = new MaritalStatusOptions(
				_value9, true);

		public static final MaritalStatusOptions value10 = new MaritalStatusOptions(
				_value10, true);

		public java.lang.String getValue() {
			return localMaritalStatusOptions;
		}

		public boolean equals(java.lang.Object obj) {
			return (obj == this);
		}

		public int hashCode() {
			return toString().hashCode();
		}

		public java.lang.String toString() {

			return localMaritalStatusOptions.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":MaritalStatusOptions",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "MaritalStatusOptions", xmlWriter);
				}
			}

			if (localMaritalStatusOptions == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"MaritalStatusOptions cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localMaritalStatusOptions);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMaritalStatusOptions) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static MaritalStatusOptions fromValue(java.lang.String value)
					throws java.lang.IllegalArgumentException {
				MaritalStatusOptions enumeration = (MaritalStatusOptions)

				_table_.get(value);

				if ((enumeration == null)
						&& !((value == null) || (value.equals("")))) {
					throw new java.lang.IllegalArgumentException();
				}
				return enumeration;
			}

			public static MaritalStatusOptions fromString(
					java.lang.String value, java.lang.String namespaceURI)
					throws java.lang.IllegalArgumentException {
				try {

					return fromValue(org.apache.axis2.databinding.utils.ConverterUtil
							.convertToString(value));

				} catch (java.lang.Exception e) {
					throw new java.lang.IllegalArgumentException();
				}
			}

			public static MaritalStatusOptions fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return MaritalStatusOptions.Factory.fromString(content,
							namespaceUri);
				} else {
					return MaritalStatusOptions.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static MaritalStatusOptions parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				MaritalStatusOptions object = null;
				// initialize a hash map to keep values
				java.util.Map attributeMap = new java.util.HashMap();
				java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							nillableValue = reader
									.getAttributeValue(
											"http://www.w3.org/2001/XMLSchema-instance",
											"nil");
							if ("true".equals(nillableValue)
									|| "1".equals(nillableValue)) {
								throw new org.apache.axis2.databinding.ADBException(
										"The element: "
												+ "MaritalStatusOptions"
												+ "  cannot be null");
							}

							java.lang.String content = reader.getElementText();

							if (content.indexOf(":") > 0) {
								// this seems to be a Qname so find the
								// namespace and send
								prefix = content.substring(0,
										content.indexOf(":"));
								namespaceuri = reader.getNamespaceURI(prefix);
								object = MaritalStatusOptions.Factory
										.fromString(content, namespaceuri);
							} else {
								// this seems to be not a qname send and empty
								// namespace incase of it is
								// check is done in fromString method
								object = MaritalStatusOptions.Factory
										.fromString(content, "");
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VoterResponse extends Response implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * voterResponse Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for VoterId
		 */

		protected java.lang.String localVoterId;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVoterIdTracker = false;

		public boolean isVoterIdSpecified() {
			return localVoterIdTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getVoterId() {
			return localVoterId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VoterId
		 */
		public void setVoterId(java.lang.String param) {
			localVoterIdTracker = param != null;

			this.localVoterId = param;

		}

		/**
		 * field for VoterResponse
		 */

		protected java.lang.String localVoterResponse;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVoterResponseTracker = false;

		public boolean isVoterResponseSpecified() {
			return localVoterResponseTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getVoterResponse() {
			return localVoterResponse;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VoterResponse
		 */
		public void setVoterResponse(java.lang.String param) {
			localVoterResponseTracker = param != null;

			this.localVoterResponse = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			java.lang.String namespacePrefix = registerPrefix(xmlWriter,
					"http://services.equifax.com/eport/ws/schemas/1.0");
			if ((namespacePrefix != null)
					&& (namespacePrefix.trim().length() > 0)) {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						namespacePrefix + ":voterResponse", xmlWriter);
			} else {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						"voterResponse", xmlWriter);
			}

			if (localReturnCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "returnCode", xmlWriter);

				if (localReturnCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"returnCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReturnCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localReturnCodeDescTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "returnCodeDesc", xmlWriter);

				if (localReturnCodeDesc == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"returnCodeDesc cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReturnCodeDesc);

				}

				xmlWriter.writeEndElement();
			}
			if (localRunDateTimeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "runDateTime", xmlWriter);

				if (localRunDateTime == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"runDateTime cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRunDateTime));

				}

				xmlWriter.writeEndElement();
			}
			if (localErrorRespMessageTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "errorRespMessage",
						xmlWriter);

				if (localErrorRespMessage == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"errorRespMessage cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localErrorRespMessage);

				}

				xmlWriter.writeEndElement();
			}
			if (localVoterIdTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "voterId", xmlWriter);

				if (localVoterId == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"voterId cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localVoterId);

				}

				xmlWriter.writeEndElement();
			}
			if (localVoterResponseTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "voterResponse", xmlWriter);

				if (localVoterResponse == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"voterResponse cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localVoterResponse);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			attribList.add(new javax.xml.namespace.QName(
					"http://www.w3.org/2001/XMLSchema-instance", "type"));
			attribList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"voterResponse"));
			if (localReturnCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"returnCode"));

				if (localReturnCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReturnCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"returnCode cannot be null!!");
				}
			}
			if (localReturnCodeDescTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"returnCodeDesc"));

				if (localReturnCodeDesc != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReturnCodeDesc));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"returnCodeDesc cannot be null!!");
				}
			}
			if (localRunDateTimeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"runDateTime"));

				if (localRunDateTime != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRunDateTime));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"runDateTime cannot be null!!");
				}
			}
			if (localErrorRespMessageTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"errorRespMessage"));

				if (localErrorRespMessage != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localErrorRespMessage));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"errorRespMessage cannot be null!!");
				}
			}
			if (localVoterIdTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"voterId"));

				if (localVoterId != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localVoterId));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"voterId cannot be null!!");
				}
			}
			if (localVoterResponseTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"voterResponse"));

				if (localVoterResponse != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localVoterResponse));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"voterResponse cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static VoterResponse parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				VoterResponse object = new VoterResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"voterResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (VoterResponse) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"returnCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "returnCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"returnCodeDesc").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "returnCodeDesc"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReturnCodeDesc(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"runDateTime").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "runDateTime"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRunDateTime(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDateTime(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"errorRespMessage")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "errorRespMessage"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setErrorRespMessage(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"voterId").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "voterId"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setVoterId(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"voterResponse").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "voterResponse"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setVoterResponse(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Request implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * request Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Source
		 */

		protected java.lang.String localSource;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSourceTracker = false;

		public boolean isSourceSpecified() {
			return localSourceTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getSource() {
			return localSource;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Source
		 */
		public void setSource(java.lang.String param) {
			localSourceTracker = param != null;

			this.localSource = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":request", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "request", xmlWriter);
				}

			}
			if (localSourceTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "source", xmlWriter);

				if (localSource == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"source cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localSource);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localSourceTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"source"));

				if (localSource != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSource));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"source cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Request parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Request object = new Request();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"request".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Request) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"source").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "source"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSource(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class LandlineType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * LandlineType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for PhoneNumber
		 */

		protected java.lang.String localPhoneNumber;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPhoneNumber() {
			return localPhoneNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PhoneNumber
		 */
		public void setPhoneNumber(java.lang.String param) {

			this.localPhoneNumber = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":LandlineType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "LandlineType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "PhoneNumber", xmlWriter);

			if (localPhoneNumber == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"PhoneNumber cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localPhoneNumber);

			}

			xmlWriter.writeEndElement();

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"PhoneNumber"));

			if (localPhoneNumber != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localPhoneNumber));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"PhoneNumber cannot be null!!");
			}

			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static LandlineType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				LandlineType object = new LandlineType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"LandlineType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (LandlineType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PhoneNumber").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "PhoneNumber"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPhoneNumber(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PANId implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0", "PANId",
				"ns1");

		/**
		 * field for PANId
		 */

		protected PANId_type1 localPANId;

		/**
		 * Auto generated getter method
		 * 
		 * @return PANId_type1
		 */
		public PANId_type1 getPANId() {
			return localPANId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PANId
		 */
		public void setPANId(PANId_type1 param) {

			this.localPANId = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			if (localPANId == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PANId cannot be null!");
			}
			localPANId.serialize(MY_QNAME, xmlWriter);

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return localPANId.getPullParser(MY_QNAME);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static PANId parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				PANId object = new PANId();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"PANId").equals(reader.getName())) {

								object.setPANId(PANId_type1.Factory
										.parse(reader));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RationCard_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"RationCard_type0", "ns1");

		/**
		 * field for RationCard_type0
		 */

		protected java.lang.String localRationCard_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRationCard_type0() {
			return localRationCard_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RationCard_type0
		 */
		public void setRationCard_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localRationCard_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localRationCard_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":RationCard_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "RationCard_type0", xmlWriter);
				}
			}

			if (localRationCard_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"RationCard_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localRationCard_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRationCard_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static RationCard_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				RationCard_type0 returnValue = new RationCard_type0();

				returnValue
						.setRationCard_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static RationCard_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return RationCard_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return RationCard_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static RationCard_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				RationCard_type0 object = new RationCard_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "RationCard_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setRationCard_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RelationInfoType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * RelationInfoType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Name
		 */

		protected java.lang.String localName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNameTracker = false;

		public boolean isNameSpecified() {
			return localNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getName() {
			return localName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name
		 */
		public void setName(java.lang.String param) {
			localNameTracker = param != null;

			this.localName = param;

		}

		/**
		 * field for RelationType
		 */

		protected java.lang.String localRelationType;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRelationTypeTracker = false;

		public boolean isRelationTypeSpecified() {
			return localRelationTypeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRelationType() {
			return localRelationType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RelationType
		 */
		public void setRelationType(java.lang.String param) {
			localRelationTypeTracker = param != null;

			this.localRelationType = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":RelationInfoType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "RelationInfoType", xmlWriter);
				}

			}
			if (localNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Name", xmlWriter);

				if (localName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Name cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localName);

				}

				xmlWriter.writeEndElement();
			}
			if (localRelationTypeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "RelationType", xmlWriter);

				if (localRelationType == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"RelationType cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localRelationType);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Name"));

				if (localName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Name cannot be null!!");
				}
			}
			if (localRelationTypeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"RelationType"));

				if (localRelationType != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRelationType));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"RelationType cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static RelationInfoType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				RelationInfoType object = new RelationInfoType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"RelationInfoType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (RelationInfoType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Name").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Name"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RelationType").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "RelationType"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRelationType(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RationCard_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"RationCard_type1", "ns1");

		/**
		 * field for RationCard_type0
		 */

		protected java.lang.String localRationCard_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRationCard_type0() {
			return localRationCard_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RationCard_type0
		 */
		public void setRationCard_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localRationCard_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localRationCard_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":RationCard_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "RationCard_type1", xmlWriter);
				}
			}

			if (localRationCard_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"RationCard_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localRationCard_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRationCard_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static RationCard_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				RationCard_type1 returnValue = new RationCard_type1();

				returnValue
						.setRationCard_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static RationCard_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return RationCard_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return RationCard_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static RationCard_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				RationCard_type1 object = new RationCard_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "RationCard_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setRationCard_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class PassportId implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"PassportId", "ns1");

		/**
		 * field for PassportId
		 */

		protected PassportId_type1 localPassportId;

		/**
		 * Auto generated getter method
		 * 
		 * @return PassportId_type1
		 */
		public PassportId_type1 getPassportId() {
			return localPassportId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PassportId
		 */
		public void setPassportId(PassportId_type1 param) {

			this.localPassportId = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			if (localPassportId == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PassportId cannot be null!");
			}
			localPassportId.serialize(MY_QNAME, xmlWriter);

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return localPassportId.getPullParser(MY_QNAME);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static PassportId parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				PassportId object = new PassportId();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"PassportId").equals(reader
											.getName())) {

								object.setPassportId(PassportId_type1.Factory
										.parse(reader));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class NsdlResponse extends Response implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * nsdlResponse Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for NsdlRespId
		 */

		protected long localNsdlRespId;

		/**
		 * Auto generated getter method
		 * 
		 * @return long
		 */
		public long getNsdlRespId() {
			return localNsdlRespId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NsdlRespId
		 */
		public void setNsdlRespId(long param) {

			this.localNsdlRespId = param;

		}

		/**
		 * field for PAN
		 */

		protected java.lang.String localPAN;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPANTracker = false;

		public boolean isPANSpecified() {
			return localPANTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPAN() {
			return localPAN;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PAN
		 */
		public void setPAN(java.lang.String param) {
			localPANTracker = param != null;

			this.localPAN = param;

		}

		/**
		 * field for PANStatus
		 */

		protected java.lang.String localPANStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPANStatusTracker = false;

		public boolean isPANStatusSpecified() {
			return localPANStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPANStatus() {
			return localPANStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PANStatus
		 */
		public void setPANStatus(java.lang.String param) {
			localPANStatusTracker = param != null;

			this.localPANStatus = param;

		}

		/**
		 * field for Title
		 */

		protected java.lang.String localTitle;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTitleTracker = false;

		public boolean isTitleSpecified() {
			return localTitleTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTitle() {
			return localTitle;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Title
		 */
		public void setTitle(java.lang.String param) {
			localTitleTracker = param != null;

			this.localTitle = param;

		}

		/**
		 * field for FirstName
		 */

		protected java.lang.String localFirstName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localFirstNameTracker = false;

		public boolean isFirstNameSpecified() {
			return localFirstNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFirstName() {
			return localFirstName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FirstName
		 */
		public void setFirstName(java.lang.String param) {
			localFirstNameTracker = param != null;

			this.localFirstName = param;

		}

		/**
		 * field for MiddleName
		 */

		protected java.lang.String localMiddleName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMiddleNameTracker = false;

		public boolean isMiddleNameSpecified() {
			return localMiddleNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMiddleName() {
			return localMiddleName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MiddleName
		 */
		public void setMiddleName(java.lang.String param) {
			localMiddleNameTracker = param != null;

			this.localMiddleName = param;

		}

		/**
		 * field for LastName
		 */

		protected java.lang.String localLastName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLastNameTracker = false;

		public boolean isLastNameSpecified() {
			return localLastNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLastName() {
			return localLastName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastName
		 */
		public void setLastName(java.lang.String param) {
			localLastNameTracker = param != null;

			this.localLastName = param;

		}

		/**
		 * field for LastUpdatedDate
		 */

		protected java.lang.String localLastUpdatedDate;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLastUpdatedDateTracker = false;

		public boolean isLastUpdatedDateSpecified() {
			return localLastUpdatedDateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLastUpdatedDate() {
			return localLastUpdatedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastUpdatedDate
		 */
		public void setLastUpdatedDate(java.lang.String param) {
			localLastUpdatedDateTracker = param != null;

			this.localLastUpdatedDate = param;

		}

		/**
		 * field for OrigNSDLResponse
		 */

		protected java.lang.String localOrigNSDLResponse;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localOrigNSDLResponseTracker = false;

		public boolean isOrigNSDLResponseSpecified() {
			return localOrigNSDLResponseTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getOrigNSDLResponse() {
			return localOrigNSDLResponse;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            OrigNSDLResponse
		 */
		public void setOrigNSDLResponse(java.lang.String param) {
			localOrigNSDLResponseTracker = param != null;

			this.localOrigNSDLResponse = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			java.lang.String namespacePrefix = registerPrefix(xmlWriter,
					"http://services.equifax.com/eport/ws/schemas/1.0");
			if ((namespacePrefix != null)
					&& (namespacePrefix.trim().length() > 0)) {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						namespacePrefix + ":nsdlResponse", xmlWriter);
			} else {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						"nsdlResponse", xmlWriter);
			}

			if (localReturnCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "returnCode", xmlWriter);

				if (localReturnCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"returnCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReturnCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localReturnCodeDescTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "returnCodeDesc", xmlWriter);

				if (localReturnCodeDesc == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"returnCodeDesc cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReturnCodeDesc);

				}

				xmlWriter.writeEndElement();
			}
			if (localRunDateTimeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "runDateTime", xmlWriter);

				if (localRunDateTime == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"runDateTime cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRunDateTime));

				}

				xmlWriter.writeEndElement();
			}
			if (localErrorRespMessageTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "errorRespMessage",
						xmlWriter);

				if (localErrorRespMessage == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"errorRespMessage cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localErrorRespMessage);

				}

				xmlWriter.writeEndElement();
			}
			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "nsdlRespId", xmlWriter);

			if (localNsdlRespId == java.lang.Long.MIN_VALUE) {

				throw new org.apache.axis2.databinding.ADBException(
						"nsdlRespId cannot be null!!");

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNsdlRespId));
			}

			xmlWriter.writeEndElement();
			if (localPANTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "PAN", xmlWriter);

				if (localPAN == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"PAN cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPAN);

				}

				xmlWriter.writeEndElement();
			}
			if (localPANStatusTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "PANStatus", xmlWriter);

				if (localPANStatus == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"PANStatus cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPANStatus);

				}

				xmlWriter.writeEndElement();
			}
			if (localTitleTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "title", xmlWriter);

				if (localTitle == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"title cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localTitle);

				}

				xmlWriter.writeEndElement();
			}
			if (localFirstNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "firstName", xmlWriter);

				if (localFirstName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"firstName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localFirstName);

				}

				xmlWriter.writeEndElement();
			}
			if (localMiddleNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "middleName", xmlWriter);

				if (localMiddleName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"middleName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMiddleName);

				}

				xmlWriter.writeEndElement();
			}
			if (localLastNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "lastName", xmlWriter);

				if (localLastName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"lastName cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localLastName);

				}

				xmlWriter.writeEndElement();
			}
			if (localLastUpdatedDateTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "lastUpdatedDate", xmlWriter);

				if (localLastUpdatedDate == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"lastUpdatedDate cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localLastUpdatedDate);

				}

				xmlWriter.writeEndElement();
			}
			if (localOrigNSDLResponseTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "origNSDLResponse",
						xmlWriter);

				if (localOrigNSDLResponse == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"origNSDLResponse cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localOrigNSDLResponse);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			attribList.add(new javax.xml.namespace.QName(
					"http://www.w3.org/2001/XMLSchema-instance", "type"));
			attribList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"nsdlResponse"));
			if (localReturnCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"returnCode"));

				if (localReturnCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReturnCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"returnCode cannot be null!!");
				}
			}
			if (localReturnCodeDescTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"returnCodeDesc"));

				if (localReturnCodeDesc != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReturnCodeDesc));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"returnCodeDesc cannot be null!!");
				}
			}
			if (localRunDateTimeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"runDateTime"));

				if (localRunDateTime != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRunDateTime));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"runDateTime cannot be null!!");
				}
			}
			if (localErrorRespMessageTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"errorRespMessage"));

				if (localErrorRespMessage != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localErrorRespMessage));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"errorRespMessage cannot be null!!");
				}
			}
			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"nsdlRespId"));

			elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localNsdlRespId));
			if (localPANTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PAN"));

				if (localPAN != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPAN));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"PAN cannot be null!!");
				}
			}
			if (localPANStatusTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PANStatus"));

				if (localPANStatus != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPANStatus));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"PANStatus cannot be null!!");
				}
			}
			if (localTitleTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"title"));

				if (localTitle != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTitle));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"title cannot be null!!");
				}
			}
			if (localFirstNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"firstName"));

				if (localFirstName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localFirstName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"firstName cannot be null!!");
				}
			}
			if (localMiddleNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"middleName"));

				if (localMiddleName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMiddleName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"middleName cannot be null!!");
				}
			}
			if (localLastNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"lastName"));

				if (localLastName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLastName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"lastName cannot be null!!");
				}
			}
			if (localLastUpdatedDateTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"lastUpdatedDate"));

				if (localLastUpdatedDate != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLastUpdatedDate));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"lastUpdatedDate cannot be null!!");
				}
			}
			if (localOrigNSDLResponseTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"origNSDLResponse"));

				if (localOrigNSDLResponse != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localOrigNSDLResponse));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"origNSDLResponse cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static NsdlResponse parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				NsdlResponse object = new NsdlResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"nsdlResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (NsdlResponse) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"returnCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "returnCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"returnCodeDesc").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "returnCodeDesc"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReturnCodeDesc(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"runDateTime").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "runDateTime"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRunDateTime(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDateTime(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"errorRespMessage")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "errorRespMessage"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setErrorRespMessage(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"nsdlRespId").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "nsdlRespId"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNsdlRespId(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToLong(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PAN").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "PAN"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPAN(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PANStatus").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "PANStatus"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPANStatus(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"title").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "title"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"firstName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "firstName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setFirstName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"middleName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "middleName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMiddleName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"lastName").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "lastName"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setLastName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"lastUpdatedDate").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "lastUpdatedDate"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setLastUpdatedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"origNSDLResponse")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "origNSDLResponse"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setOrigNSDLResponse(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ReportType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * ReportType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * Whenever a new property is set ensure all others are unset There can
		 * be only one choice and the last one wins
		 */
		private void clearAllSettingTrackers() {

			localErrorTracker = false;

			localReportTypeSequence_type0Tracker = false;

		}

		/**
		 * field for Error This was an Array!
		 */

		protected ErrorType[] localError;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localErrorTracker = false;

		public boolean isErrorSpecified() {
			return localErrorTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return ErrorType[]
		 */
		public ErrorType[] getError() {
			return localError;
		}

		/**
		 * validate the array for Error
		 */
		protected void validateError(ErrorType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Error
		 */
		public void setError(ErrorType[] param) {

			validateError(param);

			clearAllSettingTrackers();
			localErrorTracker = param != null;

			this.localError = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            ErrorType
		 */
		public void addError(ErrorType param) {
			if (localError == null) {
				localError = new ErrorType[] {};
			}

			clearAllSettingTrackers();

			// update the setting tracker
			localErrorTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localError);
			list.add(param);
			this.localError = (ErrorType[]) list.toArray(new ErrorType[list
					.size()]);

		}

		/**
		 * field for ReportTypeSequence_type0
		 */

		protected ReportTypeSequence_type0 localReportTypeSequence_type0;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localReportTypeSequence_type0Tracker = false;

		public boolean isReportTypeSequence_type0Specified() {
			return localReportTypeSequence_type0Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return ReportTypeSequence_type0
		 */
		public ReportTypeSequence_type0 getReportTypeSequence_type0() {
			return localReportTypeSequence_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportTypeSequence_type0
		 */
		public void setReportTypeSequence_type0(ReportTypeSequence_type0 param) {

			clearAllSettingTrackers();
			localReportTypeSequence_type0Tracker = param != null;

			this.localReportTypeSequence_type0 = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":ReportType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ReportType", xmlWriter);
				}

			}
			if (localErrorTracker) {
				if (localError != null) {
					for (int i = 0; i < localError.length; i++) {
						if (localError[i] != null) {
							localError[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"Error"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"Error cannot be null!!");

				}
			}
			if (localReportTypeSequence_type0Tracker) {
				if (localReportTypeSequence_type0 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ReportTypeSequence_type0 cannot be null!!");
				}
				localReportTypeSequence_type0.serialize(null, xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localErrorTracker) {
				if (localError != null) {
					for (int i = 0; i < localError.length; i++) {

						if (localError[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"Error"));
							elementList.add(localError[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"Error cannot be null!!");

				}

			}
			if (localReportTypeSequence_type0Tracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ReportTypeSequence_type0"));

				if (localReportTypeSequence_type0 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ReportTypeSequence_type0 cannot be null!!");
				}
				elementList.add(localReportTypeSequence_type0);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ReportType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ReportType object = new ReportType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"ReportType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (ReportType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"Error").equals(reader.getName())) {

								// Process the array and step past its final
								// element's end.
								list1.add(ErrorType.Factory.parse(reader));

								// loop until we find a start element that is
								// not part of this array
								boolean loopDone1 = false;
								while (!loopDone1) {
									// We should be at the end element, but make
									// sure
									while (!reader.isEndElement())
										reader.next();
									// Step out of this element
									reader.next();
									// Step to next element event.
									while (!reader.isStartElement()
											&& !reader.isEndElement())
										reader.next();
									if (reader.isEndElement()) {
										// two continuous end elements means we
										// are exiting the xml structure
										loopDone1 = true;
									} else {
										if (new javax.xml.namespace.QName(
												"http://services.equifax.com/eport/ws/schemas/1.0",
												"Error").equals(reader
												.getName())) {
											list1.add(ErrorType.Factory
													.parse(reader));

										} else {
											loopDone1 = true;
										}
									}
								}
								// call the converter utility to convert and set
								// the array

								object.setError((ErrorType[]) org.apache.axis2.databinding.utils.ConverterUtil
										.convertToArray(ErrorType.class, list1));

							} // End of if for expected property start element

							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();

							try {

								if (reader.isStartElement()) {

									object.setReportTypeSequence_type0(ReportTypeSequence_type0.Factory
											.parse(reader));

								} // End of if for expected property start
									// element

							} catch (java.lang.Exception e) {
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Locality1_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Locality1_type0", "ns1");

		/**
		 * field for Locality1_type0
		 */

		protected java.lang.String localLocality1_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLocality1_type0() {
			return localLocality1_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality1_type0
		 */
		public void setLocality1_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localLocality1_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localLocality1_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Locality1_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Locality1_type0", xmlWriter);
				}
			}

			if (localLocality1_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Locality1_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLocality1_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLocality1_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Locality1_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Locality1_type0 returnValue = new Locality1_type0();

				returnValue
						.setLocality1_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Locality1_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Locality1_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return Locality1_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Locality1_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Locality1_type0 object = new Locality1_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Locality1_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLocality1_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Locality1_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Locality1_type1", "ns1");

		/**
		 * field for Locality1_type0
		 */

		protected java.lang.String localLocality1_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLocality1_type0() {
			return localLocality1_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality1_type0
		 */
		public void setLocality1_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localLocality1_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localLocality1_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Locality1_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Locality1_type1", xmlWriter);
				}
			}

			if (localLocality1_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Locality1_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLocality1_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLocality1_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Locality1_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Locality1_type1 returnValue = new Locality1_type1();

				returnValue
						.setLocality1_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Locality1_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Locality1_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return Locality1_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Locality1_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Locality1_type1 object = new Locality1_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Locality1_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLocality1_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AccountInputType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * AccountInputType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AccountNumber
		 */

		protected java.lang.String localAccountNumber;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountNumberTracker = false;

		public boolean isAccountNumberSpecified() {
			return localAccountNumberTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAccountNumber() {
			return localAccountNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountNumber
		 */
		public void setAccountNumber(java.lang.String param) {
			localAccountNumberTracker = param != null;

			this.localAccountNumber = param;

		}

		/**
		 * field for BranchIDMFI
		 */

		protected java.lang.String localBranchIDMFI;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localBranchIDMFITracker = false;

		public boolean isBranchIDMFISpecified() {
			return localBranchIDMFITracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getBranchIDMFI() {
			return localBranchIDMFI;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            BranchIDMFI
		 */
		public void setBranchIDMFI(java.lang.String param) {
			localBranchIDMFITracker = param != null;

			this.localBranchIDMFI = param;

		}

		/**
		 * field for KendraIDMFI
		 */

		protected java.lang.String localKendraIDMFI;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localKendraIDMFITracker = false;

		public boolean isKendraIDMFISpecified() {
			return localKendraIDMFITracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getKendraIDMFI() {
			return localKendraIDMFI;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            KendraIDMFI
		 */
		public void setKendraIDMFI(java.lang.String param) {
			localKendraIDMFITracker = param != null;

			this.localKendraIDMFI = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AccountInputType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AccountInputType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}
			if (localAccountNumberTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AccountNumber", xmlWriter);

				if (localAccountNumber == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AccountNumber cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAccountNumber);

				}

				xmlWriter.writeEndElement();
			}
			if (localBranchIDMFITracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "BranchIDMFI", xmlWriter);

				if (localBranchIDMFI == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"BranchIDMFI cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localBranchIDMFI);

				}

				xmlWriter.writeEndElement();
			}
			if (localKendraIDMFITracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "KendraIDMFI", xmlWriter);

				if (localKendraIDMFI == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"KendraIDMFI cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localKendraIDMFI);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAccountNumberTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountNumber"));

				if (localAccountNumber != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAccountNumber));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AccountNumber cannot be null!!");
				}
			}
			if (localBranchIDMFITracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"BranchIDMFI"));

				if (localBranchIDMFI != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localBranchIDMFI));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"BranchIDMFI cannot be null!!");
				}
			}
			if (localKendraIDMFITracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"KendraIDMFI"));

				if (localKendraIDMFI != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localKendraIDMFI));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"KendraIDMFI cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AccountInputType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AccountInputType object = new AccountInputType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"AccountInputType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (AccountInputType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountNumber").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AccountNumber"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAccountNumber(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"BranchIDMFI").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "BranchIDMFI"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setBranchIDMFI(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"KendraIDMFI").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "KendraIDMFI"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setKendraIDMFI(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Locality1_type2 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Locality1_type2", "ns1");

		/**
		 * field for Locality1_type2
		 */

		protected java.lang.String localLocality1_type2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLocality1_type2() {
			return localLocality1_type2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality1_type2
		 */
		public void setLocality1_type2(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localLocality1_type2 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localLocality1_type2.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Locality1_type2",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Locality1_type2", xmlWriter);
				}
			}

			if (localLocality1_type2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Locality1_type2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLocality1_type2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLocality1_type2) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Locality1_type2 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Locality1_type2 returnValue = new Locality1_type2();

				returnValue
						.setLocality1_type2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Locality1_type2 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Locality1_type2.Factory.fromString(content,
							namespaceUri);
				} else {
					return Locality1_type2.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Locality1_type2 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Locality1_type2 object = new Locality1_type2();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Locality1_type2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLocality1_type2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class IdentificationType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * IdentificationType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for PANId This was an Array!
		 */

		protected IDType[] localPANId;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPANIdTracker = false;

		public boolean isPANIdSpecified() {
			return localPANIdTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IDType[]
		 */
		public IDType[] getPANId() {
			return localPANId;
		}

		/**
		 * validate the array for PANId
		 */
		protected void validatePANId(IDType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PANId
		 */
		public void setPANId(IDType[] param) {

			validatePANId(param);

			localPANIdTracker = param != null;

			this.localPANId = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            IDType
		 */
		public void addPANId(IDType param) {
			if (localPANId == null) {
				localPANId = new IDType[] {};
			}

			// update the setting tracker
			localPANIdTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localPANId);
			list.add(param);
			this.localPANId = (IDType[]) list.toArray(new IDType[list.size()]);

		}

		/**
		 * field for PassportID This was an Array!
		 */

		protected IDType[] localPassportID;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPassportIDTracker = false;

		public boolean isPassportIDSpecified() {
			return localPassportIDTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IDType[]
		 */
		public IDType[] getPassportID() {
			return localPassportID;
		}

		/**
		 * validate the array for PassportID
		 */
		protected void validatePassportID(IDType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PassportID
		 */
		public void setPassportID(IDType[] param) {

			validatePassportID(param);

			localPassportIDTracker = param != null;

			this.localPassportID = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            IDType
		 */
		public void addPassportID(IDType param) {
			if (localPassportID == null) {
				localPassportID = new IDType[] {};
			}

			// update the setting tracker
			localPassportIDTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localPassportID);
			list.add(param);
			this.localPassportID = (IDType[]) list.toArray(new IDType[list
					.size()]);

		}

		/**
		 * field for DriverLicence This was an Array!
		 */

		protected IDType[] localDriverLicence;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDriverLicenceTracker = false;

		public boolean isDriverLicenceSpecified() {
			return localDriverLicenceTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IDType[]
		 */
		public IDType[] getDriverLicence() {
			return localDriverLicence;
		}

		/**
		 * validate the array for DriverLicence
		 */
		protected void validateDriverLicence(IDType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DriverLicence
		 */
		public void setDriverLicence(IDType[] param) {

			validateDriverLicence(param);

			localDriverLicenceTracker = param != null;

			this.localDriverLicence = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            IDType
		 */
		public void addDriverLicence(IDType param) {
			if (localDriverLicence == null) {
				localDriverLicence = new IDType[] {};
			}

			// update the setting tracker
			localDriverLicenceTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localDriverLicence);
			list.add(param);
			this.localDriverLicence = (IDType[]) list.toArray(new IDType[list
					.size()]);

		}

		/**
		 * field for VoterID This was an Array!
		 */

		protected IDType[] localVoterID;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVoterIDTracker = false;

		public boolean isVoterIDSpecified() {
			return localVoterIDTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IDType[]
		 */
		public IDType[] getVoterID() {
			return localVoterID;
		}

		/**
		 * validate the array for VoterID
		 */
		protected void validateVoterID(IDType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VoterID
		 */
		public void setVoterID(IDType[] param) {

			validateVoterID(param);

			localVoterIDTracker = param != null;

			this.localVoterID = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            IDType
		 */
		public void addVoterID(IDType param) {
			if (localVoterID == null) {
				localVoterID = new IDType[] {};
			}

			// update the setting tracker
			localVoterIDTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localVoterID);
			list.add(param);
			this.localVoterID = (IDType[]) list
					.toArray(new IDType[list.size()]);

		}

		/**
		 * field for NationalIDCard This was an Array!
		 */

		protected IDType[] localNationalIDCard;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNationalIDCardTracker = false;

		public boolean isNationalIDCardSpecified() {
			return localNationalIDCardTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IDType[]
		 */
		public IDType[] getNationalIDCard() {
			return localNationalIDCard;
		}

		/**
		 * validate the array for NationalIDCard
		 */
		protected void validateNationalIDCard(IDType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NationalIDCard
		 */
		public void setNationalIDCard(IDType[] param) {

			validateNationalIDCard(param);

			localNationalIDCardTracker = param != null;

			this.localNationalIDCard = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            IDType
		 */
		public void addNationalIDCard(IDType param) {
			if (localNationalIDCard == null) {
				localNationalIDCard = new IDType[] {};
			}

			// update the setting tracker
			localNationalIDCardTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localNationalIDCard);
			list.add(param);
			this.localNationalIDCard = (IDType[]) list.toArray(new IDType[list
					.size()]);

		}

		/**
		 * field for RationCard This was an Array!
		 */

		protected IDType[] localRationCard;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRationCardTracker = false;

		public boolean isRationCardSpecified() {
			return localRationCardTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IDType[]
		 */
		public IDType[] getRationCard() {
			return localRationCard;
		}

		/**
		 * validate the array for RationCard
		 */
		protected void validateRationCard(IDType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RationCard
		 */
		public void setRationCard(IDType[] param) {

			validateRationCard(param);

			localRationCardTracker = param != null;

			this.localRationCard = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            IDType
		 */
		public void addRationCard(IDType param) {
			if (localRationCard == null) {
				localRationCard = new IDType[] {};
			}

			// update the setting tracker
			localRationCardTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localRationCard);
			list.add(param);
			this.localRationCard = (IDType[]) list.toArray(new IDType[list
					.size()]);

		}

		/**
		 * field for IDCard This was an Array!
		 */

		protected IDType[] localIDCard;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localIDCardTracker = false;

		public boolean isIDCardSpecified() {
			return localIDCardTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IDType[]
		 */
		public IDType[] getIDCard() {
			return localIDCard;
		}

		/**
		 * validate the array for IDCard
		 */
		protected void validateIDCard(IDType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            IDCard
		 */
		public void setIDCard(IDType[] param) {

			validateIDCard(param);

			localIDCardTracker = param != null;

			this.localIDCard = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            IDType
		 */
		public void addIDCard(IDType param) {
			if (localIDCard == null) {
				localIDCard = new IDType[] {};
			}

			// update the setting tracker
			localIDCardTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localIDCard);
			list.add(param);
			this.localIDCard = (IDType[]) list.toArray(new IDType[list.size()]);

		}

		/**
		 * field for PhotoCreditCard This was an Array!
		 */

		protected IDType[] localPhotoCreditCard;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPhotoCreditCardTracker = false;

		public boolean isPhotoCreditCardSpecified() {
			return localPhotoCreditCardTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IDType[]
		 */
		public IDType[] getPhotoCreditCard() {
			return localPhotoCreditCard;
		}

		/**
		 * validate the array for PhotoCreditCard
		 */
		protected void validatePhotoCreditCard(IDType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PhotoCreditCard
		 */
		public void setPhotoCreditCard(IDType[] param) {

			validatePhotoCreditCard(param);

			localPhotoCreditCardTracker = param != null;

			this.localPhotoCreditCard = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            IDType
		 */
		public void addPhotoCreditCard(IDType param) {
			if (localPhotoCreditCard == null) {
				localPhotoCreditCard = new IDType[] {};
			}

			// update the setting tracker
			localPhotoCreditCardTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localPhotoCreditCard);
			list.add(param);
			this.localPhotoCreditCard = (IDType[]) list.toArray(new IDType[list
					.size()]);

		}

		/**
		 * field for IDOther This was an Array!
		 */

		protected IDType[] localIDOther;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localIDOtherTracker = false;

		public boolean isIDOtherSpecified() {
			return localIDOtherTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IDType[]
		 */
		public IDType[] getIDOther() {
			return localIDOther;
		}

		/**
		 * validate the array for IDOther
		 */
		protected void validateIDOther(IDType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            IDOther
		 */
		public void setIDOther(IDType[] param) {

			validateIDOther(param);

			localIDOtherTracker = param != null;

			this.localIDOther = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            IDType
		 */
		public void addIDOther(IDType param) {
			if (localIDOther == null) {
				localIDOther = new IDType[] {};
			}

			// update the setting tracker
			localIDOtherTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localIDOther);
			list.add(param);
			this.localIDOther = (IDType[]) list
					.toArray(new IDType[list.size()]);

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":IdentificationType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "IdentificationType", xmlWriter);
				}

			}
			if (localPANIdTracker) {
				if (localPANId != null) {
					for (int i = 0; i < localPANId.length; i++) {
						if (localPANId[i] != null) {
							localPANId[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"PANId"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PANId cannot be null!!");

				}
			}
			if (localPassportIDTracker) {
				if (localPassportID != null) {
					for (int i = 0; i < localPassportID.length; i++) {
						if (localPassportID[i] != null) {
							localPassportID[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"PassportID"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PassportID cannot be null!!");

				}
			}
			if (localDriverLicenceTracker) {
				if (localDriverLicence != null) {
					for (int i = 0; i < localDriverLicence.length; i++) {
						if (localDriverLicence[i] != null) {
							localDriverLicence[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"DriverLicence"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"DriverLicence cannot be null!!");

				}
			}
			if (localVoterIDTracker) {
				if (localVoterID != null) {
					for (int i = 0; i < localVoterID.length; i++) {
						if (localVoterID[i] != null) {
							localVoterID[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"VoterID"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"VoterID cannot be null!!");

				}
			}
			if (localNationalIDCardTracker) {
				if (localNationalIDCard != null) {
					for (int i = 0; i < localNationalIDCard.length; i++) {
						if (localNationalIDCard[i] != null) {
							localNationalIDCard[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"NationalIDCard"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"NationalIDCard cannot be null!!");

				}
			}
			if (localRationCardTracker) {
				if (localRationCard != null) {
					for (int i = 0; i < localRationCard.length; i++) {
						if (localRationCard[i] != null) {
							localRationCard[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"RationCard"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"RationCard cannot be null!!");

				}
			}
			if (localIDCardTracker) {
				if (localIDCard != null) {
					for (int i = 0; i < localIDCard.length; i++) {
						if (localIDCard[i] != null) {
							localIDCard[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"IDCard"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"IDCard cannot be null!!");

				}
			}
			if (localPhotoCreditCardTracker) {
				if (localPhotoCreditCard != null) {
					for (int i = 0; i < localPhotoCreditCard.length; i++) {
						if (localPhotoCreditCard[i] != null) {
							localPhotoCreditCard[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"PhotoCreditCard"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PhotoCreditCard cannot be null!!");

				}
			}
			if (localIDOtherTracker) {
				if (localIDOther != null) {
					for (int i = 0; i < localIDOther.length; i++) {
						if (localIDOther[i] != null) {
							localIDOther[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"IDOther"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"IDOther cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPANIdTracker) {
				if (localPANId != null) {
					for (int i = 0; i < localPANId.length; i++) {

						if (localPANId[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"PANId"));
							elementList.add(localPANId[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PANId cannot be null!!");

				}

			}
			if (localPassportIDTracker) {
				if (localPassportID != null) {
					for (int i = 0; i < localPassportID.length; i++) {

						if (localPassportID[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"PassportID"));
							elementList.add(localPassportID[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PassportID cannot be null!!");

				}

			}
			if (localDriverLicenceTracker) {
				if (localDriverLicence != null) {
					for (int i = 0; i < localDriverLicence.length; i++) {

						if (localDriverLicence[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"DriverLicence"));
							elementList.add(localDriverLicence[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"DriverLicence cannot be null!!");

				}

			}
			if (localVoterIDTracker) {
				if (localVoterID != null) {
					for (int i = 0; i < localVoterID.length; i++) {

						if (localVoterID[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"VoterID"));
							elementList.add(localVoterID[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"VoterID cannot be null!!");

				}

			}
			if (localNationalIDCardTracker) {
				if (localNationalIDCard != null) {
					for (int i = 0; i < localNationalIDCard.length; i++) {

						if (localNationalIDCard[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"NationalIDCard"));
							elementList.add(localNationalIDCard[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"NationalIDCard cannot be null!!");

				}

			}
			if (localRationCardTracker) {
				if (localRationCard != null) {
					for (int i = 0; i < localRationCard.length; i++) {

						if (localRationCard[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"RationCard"));
							elementList.add(localRationCard[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"RationCard cannot be null!!");

				}

			}
			if (localIDCardTracker) {
				if (localIDCard != null) {
					for (int i = 0; i < localIDCard.length; i++) {

						if (localIDCard[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"IDCard"));
							elementList.add(localIDCard[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"IDCard cannot be null!!");

				}

			}
			if (localPhotoCreditCardTracker) {
				if (localPhotoCreditCard != null) {
					for (int i = 0; i < localPhotoCreditCard.length; i++) {

						if (localPhotoCreditCard[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"PhotoCreditCard"));
							elementList.add(localPhotoCreditCard[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"PhotoCreditCard cannot be null!!");

				}

			}
			if (localIDOtherTracker) {
				if (localIDOther != null) {
					for (int i = 0; i < localIDOther.length; i++) {

						if (localIDOther[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"IDOther"));
							elementList.add(localIDOther[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"IDOther cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static IdentificationType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				IdentificationType object = new IdentificationType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"IdentificationType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (IdentificationType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					java.util.ArrayList list2 = new java.util.ArrayList();

					java.util.ArrayList list3 = new java.util.ArrayList();

					java.util.ArrayList list4 = new java.util.ArrayList();

					java.util.ArrayList list5 = new java.util.ArrayList();

					java.util.ArrayList list6 = new java.util.ArrayList();

					java.util.ArrayList list7 = new java.util.ArrayList();

					java.util.ArrayList list8 = new java.util.ArrayList();

					java.util.ArrayList list9 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PANId").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(IDType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"PANId").equals(reader.getName())) {
									list1.add(IDType.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setPANId((IDType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(IDType.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PassportID").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list2.add(IDType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone2 = false;
						while (!loopDone2) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone2 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"PassportID").equals(reader.getName())) {
									list2.add(IDType.Factory.parse(reader));

								} else {
									loopDone2 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setPassportID((IDType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(IDType.class, list2));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DriverLicence").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list3.add(IDType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone3 = false;
						while (!loopDone3) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone3 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"DriverLicence").equals(reader
										.getName())) {
									list3.add(IDType.Factory.parse(reader));

								} else {
									loopDone3 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setDriverLicence((IDType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(IDType.class, list3));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"VoterID").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list4.add(IDType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone4 = false;
						while (!loopDone4) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone4 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"VoterID").equals(reader.getName())) {
									list4.add(IDType.Factory.parse(reader));

								} else {
									loopDone4 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setVoterID((IDType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(IDType.class, list4));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NationalIDCard").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list5.add(IDType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone5 = false;
						while (!loopDone5) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone5 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"NationalIDCard").equals(reader
										.getName())) {
									list5.add(IDType.Factory.parse(reader));

								} else {
									loopDone5 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setNationalIDCard((IDType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(IDType.class, list5));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RationCard").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list6.add(IDType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone6 = false;
						while (!loopDone6) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone6 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"RationCard").equals(reader.getName())) {
									list6.add(IDType.Factory.parse(reader));

								} else {
									loopDone6 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setRationCard((IDType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(IDType.class, list6));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"IDCard").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list7.add(IDType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone7 = false;
						while (!loopDone7) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone7 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"IDCard").equals(reader.getName())) {
									list7.add(IDType.Factory.parse(reader));

								} else {
									loopDone7 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setIDCard((IDType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(IDType.class, list7));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PhotoCreditCard").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list8.add(IDType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone8 = false;
						while (!loopDone8) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone8 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"PhotoCreditCard").equals(reader
										.getName())) {
									list8.add(IDType.Factory.parse(reader));

								} else {
									loopDone8 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setPhotoCreditCard((IDType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(IDType.class, list8));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"IDOther").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list9.add(IDType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone9 = false;
						while (!loopDone9) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone9 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"IDOther").equals(reader.getName())) {
									list9.add(IDType.Factory.parse(reader));

								} else {
									loopDone9 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setIDOther((IDType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(IDType.class, list9));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Street_type2 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Street_type2", "ns1");

		/**
		 * field for Street_type2
		 */

		protected java.lang.String localStreet_type2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getStreet_type2() {
			return localStreet_type2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Street_type2
		 */
		public void setStreet_type2(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localStreet_type2 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localStreet_type2.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Street_type2",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Street_type2", xmlWriter);
				}
			}

			if (localStreet_type2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Street_type2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localStreet_type2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localStreet_type2) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Street_type2 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Street_type2 returnValue = new Street_type2();

				returnValue
						.setStreet_type2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Street_type2 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Street_type2.Factory.fromString(content,
							namespaceUri);
				} else {
					return Street_type2.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Street_type2 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Street_type2 object = new Street_type2();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Street_type2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setStreet_type2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Street_type3 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Street_type3", "ns1");

		/**
		 * field for Street_type2
		 */

		protected java.lang.String localStreet_type2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getStreet_type2() {
			return localStreet_type2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Street_type2
		 */
		public void setStreet_type2(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localStreet_type2 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localStreet_type2.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Street_type3",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Street_type3", xmlWriter);
				}
			}

			if (localStreet_type2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Street_type2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localStreet_type2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localStreet_type2) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Street_type3 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Street_type3 returnValue = new Street_type3();

				returnValue
						.setStreet_type2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Street_type3 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Street_type3.Factory.fromString(content,
							namespaceUri);
				} else {
					return Street_type3.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Street_type3 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Street_type3 object = new Street_type3();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Street_type2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setStreet_type2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AdditionalId1_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AdditionalId1_type1", "ns1");

		/**
		 * field for AdditionalId1_type0
		 */

		protected java.lang.String localAdditionalId1_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAdditionalId1_type0() {
			return localAdditionalId1_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalId1_type0
		 */
		public void setAdditionalId1_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localAdditionalId1_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localAdditionalId1_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AdditionalId1_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AdditionalId1_type1", xmlWriter);
				}
			}

			if (localAdditionalId1_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AdditionalId1_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAdditionalId1_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAdditionalId1_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AdditionalId1_type1 fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				AdditionalId1_type1 returnValue = new AdditionalId1_type1();

				returnValue
						.setAdditionalId1_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static AdditionalId1_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AdditionalId1_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return AdditionalId1_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AdditionalId1_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AdditionalId1_type1 object = new AdditionalId1_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "AdditionalId1_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setAdditionalId1_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AccountStatusType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * AccountStatusType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for StatusCode
		 */

		protected java.lang.String localStatusCode;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localStatusCodeTracker = false;

		public boolean isStatusCodeSpecified() {
			return localStatusCodeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getStatusCode() {
			return localStatusCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StatusCode
		 */
		public void setStatusCode(java.lang.String param) {
			localStatusCodeTracker = param != null;

			this.localStatusCode = param;

		}

		/**
		 * field for Description
		 */

		protected java.lang.String localDescription;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDescriptionTracker = false;

		public boolean isDescriptionSpecified() {
			return localDescriptionTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDescription() {
			return localDescription;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Description
		 */
		public void setDescription(java.lang.String param) {
			localDescriptionTracker = param != null;

			this.localDescription = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AccountStatusType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AccountStatusType", xmlWriter);
				}

			}
			if (localStatusCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "StatusCode", xmlWriter);

				if (localStatusCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"StatusCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localStatusCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localDescriptionTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Description", xmlWriter);

				if (localDescription == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Description cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localDescription);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localStatusCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"StatusCode"));

				if (localStatusCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localStatusCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"StatusCode cannot be null!!");
				}
			}
			if (localDescriptionTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Description"));

				if (localDescription != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDescription));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Description cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AccountStatusType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AccountStatusType object = new AccountStatusType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"AccountStatusType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (AccountStatusType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"StatusCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "StatusCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setStatusCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Description").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Description"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AdditionalId1_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AdditionalId1_type0", "ns1");

		/**
		 * field for AdditionalId1_type0
		 */

		protected java.lang.String localAdditionalId1_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAdditionalId1_type0() {
			return localAdditionalId1_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalId1_type0
		 */
		public void setAdditionalId1_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localAdditionalId1_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localAdditionalId1_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AdditionalId1_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AdditionalId1_type0", xmlWriter);
				}
			}

			if (localAdditionalId1_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AdditionalId1_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAdditionalId1_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAdditionalId1_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AdditionalId1_type0 fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				AdditionalId1_type0 returnValue = new AdditionalId1_type0();

				returnValue
						.setAdditionalId1_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static AdditionalId1_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AdditionalId1_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return AdditionalId1_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AdditionalId1_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AdditionalId1_type0 object = new AdditionalId1_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "AdditionalId1_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setAdditionalId1_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ReportTypeSequence_type0 implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * ReportTypeSequence_type0 Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for VerifyIDResponse
		 */

		protected ResponseBody localVerifyIDResponse;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVerifyIDResponseTracker = false;

		public boolean isVerifyIDResponseSpecified() {
			return localVerifyIDResponseTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return ResponseBody
		 */
		public ResponseBody getVerifyIDResponse() {
			return localVerifyIDResponse;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VerifyIDResponse
		 */
		public void setVerifyIDResponse(ResponseBody param) {
			localVerifyIDResponseTracker = param != null;

			this.localVerifyIDResponse = param;

		}

		/**
		 * field for IDAndContactInfo
		 */

		protected IDAndContactType localIDAndContactInfo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localIDAndContactInfoTracker = false;

		public boolean isIDAndContactInfoSpecified() {
			return localIDAndContactInfoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IDAndContactType
		 */
		public IDAndContactType getIDAndContactInfo() {
			return localIDAndContactInfo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            IDAndContactInfo
		 */
		public void setIDAndContactInfo(IDAndContactType param) {
			localIDAndContactInfoTracker = param != null;

			this.localIDAndContactInfo = param;

		}

		/**
		 * field for IncomeDetails This was an Array!
		 */

		protected IncomeDetailsType[] localIncomeDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localIncomeDetailsTracker = false;

		public boolean isIncomeDetailsSpecified() {
			return localIncomeDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return IncomeDetailsType[]
		 */
		public IncomeDetailsType[] getIncomeDetails() {
			return localIncomeDetails;
		}

		/**
		 * validate the array for IncomeDetails
		 */
		protected void validateIncomeDetails(IncomeDetailsType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            IncomeDetails
		 */
		public void setIncomeDetails(IncomeDetailsType[] param) {

			validateIncomeDetails(param);

			localIncomeDetailsTracker = param != null;

			this.localIncomeDetails = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            IncomeDetailsType
		 */
		public void addIncomeDetails(IncomeDetailsType param) {
			if (localIncomeDetails == null) {
				localIncomeDetails = new IncomeDetailsType[] {};
			}

			// update the setting tracker
			localIncomeDetailsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localIncomeDetails);
			list.add(param);
			this.localIncomeDetails = (IncomeDetailsType[]) list
					.toArray(new IncomeDetailsType[list.size()]);

		}

		/**
		 * field for EmploymentInfo This was an Array!
		 */

		protected EmployerDetailsType[] localEmploymentInfo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localEmploymentInfoTracker = false;

		public boolean isEmploymentInfoSpecified() {
			return localEmploymentInfoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return EmployerDetailsType[]
		 */
		public EmployerDetailsType[] getEmploymentInfo() {
			return localEmploymentInfo;
		}

		/**
		 * validate the array for EmploymentInfo
		 */
		protected void validateEmploymentInfo(EmployerDetailsType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            EmploymentInfo
		 */
		public void setEmploymentInfo(EmployerDetailsType[] param) {

			validateEmploymentInfo(param);

			localEmploymentInfoTracker = param != null;

			this.localEmploymentInfo = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            EmployerDetailsType
		 */
		public void addEmploymentInfo(EmployerDetailsType param) {
			if (localEmploymentInfo == null) {
				localEmploymentInfo = new EmployerDetailsType[] {};
			}

			// update the setting tracker
			localEmploymentInfoTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localEmploymentInfo);
			list.add(param);
			this.localEmploymentInfo = (EmployerDetailsType[]) list
					.toArray(new EmployerDetailsType[list.size()]);

		}

		/**
		 * field for Score
		 */

		protected ScoreType localScore;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localScoreTracker = false;

		public boolean isScoreSpecified() {
			return localScoreTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return ScoreType
		 */
		public ScoreType getScore() {
			return localScore;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Score
		 */
		public void setScore(ScoreType param) {
			localScoreTracker = param != null;

			this.localScore = param;

		}

		/**
		 * field for AccountSummary
		 */

		protected CreditReportSummaryType localAccountSummary;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountSummaryTracker = false;

		public boolean isAccountSummarySpecified() {
			return localAccountSummaryTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return CreditReportSummaryType
		 */
		public CreditReportSummaryType getAccountSummary() {
			return localAccountSummary;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountSummary
		 */
		public void setAccountSummary(CreditReportSummaryType param) {
			localAccountSummaryTracker = param != null;

			this.localAccountSummary = param;

		}

		/**
		 * field for GrpBalLoansAccountSummary
		 */

		protected CreditReportSummaryType localGrpBalLoansAccountSummary;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localGrpBalLoansAccountSummaryTracker = false;

		public boolean isGrpBalLoansAccountSummarySpecified() {
			return localGrpBalLoansAccountSummaryTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return CreditReportSummaryType
		 */
		public CreditReportSummaryType getGrpBalLoansAccountSummary() {
			return localGrpBalLoansAccountSummary;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            GrpBalLoansAccountSummary
		 */
		public void setGrpBalLoansAccountSummary(CreditReportSummaryType param) {
			localGrpBalLoansAccountSummaryTracker = param != null;

			this.localGrpBalLoansAccountSummary = param;

		}

		/**
		 * field for RecentActivities
		 */

		protected RecentActivitiesType localRecentActivities;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRecentActivitiesTracker = false;

		public boolean isRecentActivitiesSpecified() {
			return localRecentActivitiesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return RecentActivitiesType
		 */
		public RecentActivitiesType getRecentActivities() {
			return localRecentActivities;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RecentActivities
		 */
		public void setRecentActivities(RecentActivitiesType param) {
			localRecentActivitiesTracker = param != null;

			this.localRecentActivities = param;

		}

		/**
		 * field for OtherKeyInd
		 */

		protected OtherKeyIndType localOtherKeyInd;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localOtherKeyIndTracker = false;

		public boolean isOtherKeyIndSpecified() {
			return localOtherKeyIndTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return OtherKeyIndType
		 */
		public OtherKeyIndType getOtherKeyInd() {
			return localOtherKeyInd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            OtherKeyInd
		 */
		public void setOtherKeyInd(OtherKeyIndType param) {
			localOtherKeyIndTracker = param != null;

			this.localOtherKeyInd = param;

		}

		/**
		 * field for EnquirySummary
		 */

		protected EnquirySummaryType localEnquirySummary;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localEnquirySummaryTracker = false;

		public boolean isEnquirySummarySpecified() {
			return localEnquirySummaryTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return EnquirySummaryType
		 */
		public EnquirySummaryType getEnquirySummary() {
			return localEnquirySummary;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            EnquirySummary
		 */
		public void setEnquirySummary(EnquirySummaryType param) {
			localEnquirySummaryTracker = param != null;

			this.localEnquirySummary = param;

		}

		/**
		 * field for Enquiries This was an Array!
		 */

		protected EnquiryType[] localEnquiries;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localEnquiriesTracker = false;

		public boolean isEnquiriesSpecified() {
			return localEnquiriesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return EnquiryType[]
		 */
		public EnquiryType[] getEnquiries() {
			return localEnquiries;
		}

		/**
		 * validate the array for Enquiries
		 */
		protected void validateEnquiries(EnquiryType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Enquiries
		 */
		public void setEnquiries(EnquiryType[] param) {

			validateEnquiries(param);

			localEnquiriesTracker = param != null;

			this.localEnquiries = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            EnquiryType
		 */
		public void addEnquiries(EnquiryType param) {
			if (localEnquiries == null) {
				localEnquiries = new EnquiryType[] {};
			}

			// update the setting tracker
			localEnquiriesTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localEnquiries);
			list.add(param);
			this.localEnquiries = (EnquiryType[]) list
					.toArray(new EnquiryType[list.size()]);

		}

		/**
		 * field for AccountDetails
		 */

		protected AccountDetailsType localAccountDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountDetailsTracker = false;

		public boolean isAccountDetailsSpecified() {
			return localAccountDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountDetailsType
		 */
		public AccountDetailsType getAccountDetails() {
			return localAccountDetails;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountDetails
		 */
		public void setAccountDetails(AccountDetailsType param) {
			localAccountDetailsTracker = param != null;

			this.localAccountDetails = param;

		}

		/**
		 * field for GrpBalLoansAccountDetails
		 */

		protected AccountDetailsType localGrpBalLoansAccountDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localGrpBalLoansAccountDetailsTracker = false;

		public boolean isGrpBalLoansAccountDetailsSpecified() {
			return localGrpBalLoansAccountDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountDetailsType
		 */
		public AccountDetailsType getGrpBalLoansAccountDetails() {
			return localGrpBalLoansAccountDetails;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            GrpBalLoansAccountDetails
		 */
		public void setGrpBalLoansAccountDetails(AccountDetailsType param) {
			localGrpBalLoansAccountDetailsTracker = param != null;

			this.localGrpBalLoansAccountDetails = param;

		}

		/**
		 * field for GroupCreditSummary This was an Array!
		 */

		protected GroupCreditSummaryType[] localGroupCreditSummary;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localGroupCreditSummaryTracker = false;

		public boolean isGroupCreditSummarySpecified() {
			return localGroupCreditSummaryTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return GroupCreditSummaryType[]
		 */
		public GroupCreditSummaryType[] getGroupCreditSummary() {
			return localGroupCreditSummary;
		}

		/**
		 * validate the array for GroupCreditSummary
		 */
		protected void validateGroupCreditSummary(GroupCreditSummaryType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            GroupCreditSummary
		 */
		public void setGroupCreditSummary(GroupCreditSummaryType[] param) {

			validateGroupCreditSummary(param);

			localGroupCreditSummaryTracker = param != null;

			this.localGroupCreditSummary = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            GroupCreditSummaryType
		 */
		public void addGroupCreditSummary(GroupCreditSummaryType param) {
			if (localGroupCreditSummary == null) {
				localGroupCreditSummary = new GroupCreditSummaryType[] {};
			}

			// update the setting tracker
			localGroupCreditSummaryTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localGroupCreditSummary);
			list.add(param);
			this.localGroupCreditSummary = (GroupCreditSummaryType[]) list
					.toArray(new GroupCreditSummaryType[list.size()]);

		}

		/**
		 * field for Glossary
		 */

		protected GlossaryInfoType localGlossary;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localGlossaryTracker = false;

		public boolean isGlossarySpecified() {
			return localGlossaryTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return GlossaryInfoType
		 */
		public GlossaryInfoType getGlossary() {
			return localGlossary;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Glossary
		 */
		public void setGlossary(GlossaryInfoType param) {
			localGlossaryTracker = param != null;

			this.localGlossary = param;

		}

		/**
		 * field for Disclaimer
		 */

		protected java.lang.String localDisclaimer;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDisclaimerTracker = false;

		public boolean isDisclaimerSpecified() {
			return localDisclaimerTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDisclaimer() {
			return localDisclaimer;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Disclaimer
		 */
		public void setDisclaimer(java.lang.String param) {
			localDisclaimerTracker = param != null;

			this.localDisclaimer = param;

		}

		/**
		 * field for ScoringElements
		 */

		protected ScoringElementsType localScoringElements;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localScoringElementsTracker = false;

		public boolean isScoringElementsSpecified() {
			return localScoringElementsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return ScoringElementsType
		 */
		public ScoringElementsType getScoringElements() {
			return localScoringElements;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ScoringElements
		 */
		public void setScoringElements(ScoringElementsType param) {
			localScoringElementsTracker = param != null;

			this.localScoringElements = param;

		}

		/**
		 * field for ConsumerDispute
		 */

		protected ConsumerDisputesType localConsumerDispute;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localConsumerDisputeTracker = false;

		public boolean isConsumerDisputeSpecified() {
			return localConsumerDisputeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return ConsumerDisputesType
		 */
		public ConsumerDisputesType getConsumerDispute() {
			return localConsumerDispute;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ConsumerDispute
		 */
		public void setConsumerDispute(ConsumerDisputesType param) {
			localConsumerDisputeTracker = param != null;

			this.localConsumerDispute = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":ReportTypeSequence_type0", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ReportTypeSequence_type0", xmlWriter);
				}

			}
			if (localVerifyIDResponseTracker) {
				if (localVerifyIDResponse == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"VerifyIDResponse cannot be null!!");
				}
				localVerifyIDResponse.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"VerifyIDResponse"), xmlWriter);
			}
			if (localIDAndContactInfoTracker) {
				if (localIDAndContactInfo == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"IDAndContactInfo cannot be null!!");
				}
				localIDAndContactInfo.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"IDAndContactInfo"), xmlWriter);
			}
			if (localIncomeDetailsTracker) {
				if (localIncomeDetails != null) {
					for (int i = 0; i < localIncomeDetails.length; i++) {
						if (localIncomeDetails[i] != null) {
							localIncomeDetails[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"IncomeDetails"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"IncomeDetails cannot be null!!");

				}
			}
			if (localEmploymentInfoTracker) {
				if (localEmploymentInfo != null) {
					for (int i = 0; i < localEmploymentInfo.length; i++) {
						if (localEmploymentInfo[i] != null) {
							localEmploymentInfo[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"EmploymentInfo"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"EmploymentInfo cannot be null!!");

				}
			}
			if (localScoreTracker) {
				if (localScore == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Score cannot be null!!");
				}
				localScore.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Score"), xmlWriter);
			}
			if (localAccountSummaryTracker) {
				if (localAccountSummary == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AccountSummary cannot be null!!");
				}
				localAccountSummary.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountSummary"), xmlWriter);
			}
			if (localGrpBalLoansAccountSummaryTracker) {
				if (localGrpBalLoansAccountSummary == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"GrpBalLoansAccountSummary cannot be null!!");
				}
				localGrpBalLoansAccountSummary
						.serialize(
								new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"GrpBalLoansAccountSummary"), xmlWriter);
			}
			if (localRecentActivitiesTracker) {
				if (localRecentActivities == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"RecentActivities cannot be null!!");
				}
				localRecentActivities.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"RecentActivities"), xmlWriter);
			}
			if (localOtherKeyIndTracker) {
				if (localOtherKeyInd == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"OtherKeyInd cannot be null!!");
				}
				localOtherKeyInd.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"OtherKeyInd"), xmlWriter);
			}
			if (localEnquirySummaryTracker) {
				if (localEnquirySummary == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"EnquirySummary cannot be null!!");
				}
				localEnquirySummary.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"EnquirySummary"), xmlWriter);
			}
			if (localEnquiriesTracker) {
				if (localEnquiries != null) {
					for (int i = 0; i < localEnquiries.length; i++) {
						if (localEnquiries[i] != null) {
							localEnquiries[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"Enquiries"), xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"Enquiries cannot be null!!");

				}
			}
			if (localAccountDetailsTracker) {
				if (localAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AccountDetails cannot be null!!");
				}
				localAccountDetails.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountDetails"), xmlWriter);
			}
			if (localGrpBalLoansAccountDetailsTracker) {
				if (localGrpBalLoansAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"GrpBalLoansAccountDetails cannot be null!!");
				}
				localGrpBalLoansAccountDetails
						.serialize(
								new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"GrpBalLoansAccountDetails"), xmlWriter);
			}
			if (localGroupCreditSummaryTracker) {
				if (localGroupCreditSummary != null) {
					for (int i = 0; i < localGroupCreditSummary.length; i++) {
						if (localGroupCreditSummary[i] != null) {
							localGroupCreditSummary[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"GroupCreditSummary"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"GroupCreditSummary cannot be null!!");

				}
			}
			if (localGlossaryTracker) {
				if (localGlossary == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Glossary cannot be null!!");
				}
				localGlossary.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Glossary"), xmlWriter);
			}
			if (localDisclaimerTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Disclaimer", xmlWriter);

				if (localDisclaimer == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Disclaimer cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localDisclaimer);

				}

				xmlWriter.writeEndElement();
			}
			if (localScoringElementsTracker) {
				if (localScoringElements == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ScoringElements cannot be null!!");
				}
				localScoringElements.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ScoringElements"), xmlWriter);
			}
			if (localConsumerDisputeTracker) {
				if (localConsumerDispute == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ConsumerDispute cannot be null!!");
				}
				localConsumerDispute.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ConsumerDispute"), xmlWriter);
			}

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localVerifyIDResponseTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"VerifyIDResponse"));

				if (localVerifyIDResponse == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"VerifyIDResponse cannot be null!!");
				}
				elementList.add(localVerifyIDResponse);
			}
			if (localIDAndContactInfoTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"IDAndContactInfo"));

				if (localIDAndContactInfo == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"IDAndContactInfo cannot be null!!");
				}
				elementList.add(localIDAndContactInfo);
			}
			if (localIncomeDetailsTracker) {
				if (localIncomeDetails != null) {
					for (int i = 0; i < localIncomeDetails.length; i++) {

						if (localIncomeDetails[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"IncomeDetails"));
							elementList.add(localIncomeDetails[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"IncomeDetails cannot be null!!");

				}

			}
			if (localEmploymentInfoTracker) {
				if (localEmploymentInfo != null) {
					for (int i = 0; i < localEmploymentInfo.length; i++) {

						if (localEmploymentInfo[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"EmploymentInfo"));
							elementList.add(localEmploymentInfo[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"EmploymentInfo cannot be null!!");

				}

			}
			if (localScoreTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Score"));

				if (localScore == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Score cannot be null!!");
				}
				elementList.add(localScore);
			}
			if (localAccountSummaryTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountSummary"));

				if (localAccountSummary == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AccountSummary cannot be null!!");
				}
				elementList.add(localAccountSummary);
			}
			if (localGrpBalLoansAccountSummaryTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"GrpBalLoansAccountSummary"));

				if (localGrpBalLoansAccountSummary == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"GrpBalLoansAccountSummary cannot be null!!");
				}
				elementList.add(localGrpBalLoansAccountSummary);
			}
			if (localRecentActivitiesTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"RecentActivities"));

				if (localRecentActivities == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"RecentActivities cannot be null!!");
				}
				elementList.add(localRecentActivities);
			}
			if (localOtherKeyIndTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"OtherKeyInd"));

				if (localOtherKeyInd == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"OtherKeyInd cannot be null!!");
				}
				elementList.add(localOtherKeyInd);
			}
			if (localEnquirySummaryTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"EnquirySummary"));

				if (localEnquirySummary == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"EnquirySummary cannot be null!!");
				}
				elementList.add(localEnquirySummary);
			}
			if (localEnquiriesTracker) {
				if (localEnquiries != null) {
					for (int i = 0; i < localEnquiries.length; i++) {

						if (localEnquiries[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"Enquiries"));
							elementList.add(localEnquiries[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"Enquiries cannot be null!!");

				}

			}
			if (localAccountDetailsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountDetails"));

				if (localAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AccountDetails cannot be null!!");
				}
				elementList.add(localAccountDetails);
			}
			if (localGrpBalLoansAccountDetailsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"GrpBalLoansAccountDetails"));

				if (localGrpBalLoansAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"GrpBalLoansAccountDetails cannot be null!!");
				}
				elementList.add(localGrpBalLoansAccountDetails);
			}
			if (localGroupCreditSummaryTracker) {
				if (localGroupCreditSummary != null) {
					for (int i = 0; i < localGroupCreditSummary.length; i++) {

						if (localGroupCreditSummary[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"GroupCreditSummary"));
							elementList.add(localGroupCreditSummary[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"GroupCreditSummary cannot be null!!");

				}

			}
			if (localGlossaryTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Glossary"));

				if (localGlossary == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Glossary cannot be null!!");
				}
				elementList.add(localGlossary);
			}
			if (localDisclaimerTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Disclaimer"));

				if (localDisclaimer != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDisclaimer));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Disclaimer cannot be null!!");
				}
			}
			if (localScoringElementsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ScoringElements"));

				if (localScoringElements == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ScoringElements cannot be null!!");
				}
				elementList.add(localScoringElements);
			}
			if (localConsumerDisputeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ConsumerDispute"));

				if (localConsumerDispute == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ConsumerDispute cannot be null!!");
				}
				elementList.add(localConsumerDispute);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ReportTypeSequence_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ReportTypeSequence_type0 object = new ReportTypeSequence_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					java.util.ArrayList list3 = new java.util.ArrayList();

					java.util.ArrayList list4 = new java.util.ArrayList();

					java.util.ArrayList list11 = new java.util.ArrayList();

					java.util.ArrayList list14 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"VerifyIDResponse")
									.equals(reader.getName())) {

						object.setVerifyIDResponse(ResponseBody.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"IDAndContactInfo")
									.equals(reader.getName())) {

						object.setIDAndContactInfo(IDAndContactType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"IncomeDetails").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list3.add(IncomeDetailsType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone3 = false;
						while (!loopDone3) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone3 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"IncomeDetails").equals(reader
										.getName())) {
									list3.add(IncomeDetailsType.Factory
											.parse(reader));

								} else {
									loopDone3 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setIncomeDetails((IncomeDetailsType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(IncomeDetailsType.class, list3));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"EmploymentInfo").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list4.add(EmployerDetailsType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone4 = false;
						while (!loopDone4) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone4 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"EmploymentInfo").equals(reader
										.getName())) {
									list4.add(EmployerDetailsType.Factory
											.parse(reader));

								} else {
									loopDone4 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setEmploymentInfo((EmployerDetailsType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(EmployerDetailsType.class,
										list4));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Score").equals(reader.getName())) {

						object.setScore(ScoreType.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountSummary").equals(reader.getName())) {

						object.setAccountSummary(CreditReportSummaryType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"GrpBalLoansAccountSummary").equals(reader
									.getName())) {

						object.setGrpBalLoansAccountSummary(CreditReportSummaryType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RecentActivities")
									.equals(reader.getName())) {

						object.setRecentActivities(RecentActivitiesType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"OtherKeyInd").equals(reader.getName())) {

						object.setOtherKeyInd(OtherKeyIndType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"EnquirySummary").equals(reader.getName())) {

						object.setEnquirySummary(EnquirySummaryType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Enquiries").equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list11.add(EnquiryType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone11 = false;
						while (!loopDone11) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone11 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"Enquiries").equals(reader.getName())) {
									list11.add(EnquiryType.Factory
											.parse(reader));

								} else {
									loopDone11 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setEnquiries((EnquiryType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(EnquiryType.class, list11));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountDetails").equals(reader.getName())) {

						object.setAccountDetails(AccountDetailsType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"GrpBalLoansAccountDetails").equals(reader
									.getName())) {

						object.setGrpBalLoansAccountDetails(AccountDetailsType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"GroupCreditSummary").equals(reader
									.getName())) {

						// Process the array and step past its final element's
						// end.
						list14.add(GroupCreditSummaryType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone14 = false;
						while (!loopDone14) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone14 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"GroupCreditSummary").equals(reader
										.getName())) {
									list14.add(GroupCreditSummaryType.Factory
											.parse(reader));

								} else {
									loopDone14 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setGroupCreditSummary((GroupCreditSummaryType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(GroupCreditSummaryType.class,
										list14));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Glossary").equals(reader.getName())) {

						object.setGlossary(GlossaryInfoType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Disclaimer").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Disclaimer"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDisclaimer(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ScoringElements").equals(reader.getName())) {

						object.setScoringElements(ScoringElementsType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ConsumerDispute").equals(reader.getName())) {

						object.setConsumerDispute(ConsumerDisputesType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Locality1_type3 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Locality1_type3", "ns1");

		/**
		 * field for Locality1_type2
		 */

		protected java.lang.String localLocality1_type2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLocality1_type2() {
			return localLocality1_type2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality1_type2
		 */
		public void setLocality1_type2(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localLocality1_type2 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localLocality1_type2.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Locality1_type3",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Locality1_type3", xmlWriter);
				}
			}

			if (localLocality1_type2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Locality1_type2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLocality1_type2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLocality1_type2) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Locality1_type3 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Locality1_type3 returnValue = new Locality1_type3();

				returnValue
						.setLocality1_type2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Locality1_type3 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Locality1_type3.Factory.fromString(content,
							namespaceUri);
				} else {
					return Locality1_type3.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Locality1_type3 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Locality1_type3 object = new Locality1_type3();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Locality1_type2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLocality1_type2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Street_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Street_type0", "ns1");

		/**
		 * field for Street_type0
		 */

		protected java.lang.String localStreet_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getStreet_type0() {
			return localStreet_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Street_type0
		 */
		public void setStreet_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localStreet_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localStreet_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Street_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Street_type0", xmlWriter);
				}
			}

			if (localStreet_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Street_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localStreet_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localStreet_type0) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Street_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Street_type0 returnValue = new Street_type0();

				returnValue
						.setStreet_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Street_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Street_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return Street_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Street_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Street_type0 object = new Street_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Street_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setStreet_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Street_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"Street_type1", "ns1");

		/**
		 * field for Street_type0
		 */

		protected java.lang.String localStreet_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getStreet_type0() {
			return localStreet_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Street_type0
		 */
		public void setStreet_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localStreet_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localStreet_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Street_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Street_type1", xmlWriter);
				}
			}

			if (localStreet_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"Street_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localStreet_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localStreet_type0) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Street_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Street_type1 returnValue = new Street_type1();

				returnValue
						.setStreet_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Street_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Street_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return Street_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Street_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Street_type1 object = new Street_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "Street_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setStreet_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VidUidaiResponse implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * vidUidaiResponse Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for UidaiRequest
		 */

		protected UidaiRequest localUidaiRequest;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localUidaiRequestTracker = false;

		public boolean isUidaiRequestSpecified() {
			return localUidaiRequestTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return UidaiRequest
		 */
		public UidaiRequest getUidaiRequest() {
			return localUidaiRequest;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UidaiRequest
		 */
		public void setUidaiRequest(UidaiRequest param) {
			localUidaiRequestTracker = param != null;

			this.localUidaiRequest = param;

		}

		/**
		 * field for UidaiResponse
		 */

		protected UidaiResponse localUidaiResponse;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localUidaiResponseTracker = false;

		public boolean isUidaiResponseSpecified() {
			return localUidaiResponseTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return UidaiResponse
		 */
		public UidaiResponse getUidaiResponse() {
			return localUidaiResponse;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UidaiResponse
		 */
		public void setUidaiResponse(UidaiResponse param) {
			localUidaiResponseTracker = param != null;

			this.localUidaiResponse = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":vidUidaiResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "vidUidaiResponse", xmlWriter);
				}

			}
			if (localUidaiRequestTracker) {
				if (localUidaiRequest == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"uidaiRequest cannot be null!!");
				}
				localUidaiRequest.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"uidaiRequest"), xmlWriter);
			}
			if (localUidaiResponseTracker) {
				if (localUidaiResponse == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"uidaiResponse cannot be null!!");
				}
				localUidaiResponse.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"uidaiResponse"), xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localUidaiRequestTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"uidaiRequest"));

				if (localUidaiRequest == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"uidaiRequest cannot be null!!");
				}
				elementList.add(localUidaiRequest);
			}
			if (localUidaiResponseTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"uidaiResponse"));

				if (localUidaiResponse == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"uidaiResponse cannot be null!!");
				}
				elementList.add(localUidaiResponse);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static VidUidaiResponse parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				VidUidaiResponse object = new VidUidaiResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"vidUidaiResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (VidUidaiResponse) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"uidaiRequest").equals(reader.getName())) {

						object.setUidaiRequest(UidaiRequest.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"uidaiResponse").equals(reader.getName())) {

						object.setUidaiResponse(UidaiResponse.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class City_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"City_type0", "ns1");

		/**
		 * field for City_type0
		 */

		protected java.lang.String localCity_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCity_type0() {
			return localCity_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            City_type0
		 */
		public void setCity_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localCity_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localCity_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":City_type0", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "City_type0", xmlWriter);
				}
			}

			if (localCity_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"City_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localCity_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCity_type0) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static City_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				City_type0 returnValue = new City_type0();

				returnValue
						.setCity_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static City_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return City_type0.Factory.fromString(content, namespaceUri);
				} else {
					return City_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static City_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				City_type0 object = new City_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "City_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setCity_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RecentActivitiesType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * RecentActivitiesType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AccountsDeliquent
		 */

		protected int localAccountsDeliquent;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountsDeliquentTracker = false;

		public boolean isAccountsDeliquentSpecified() {
			return localAccountsDeliquentTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getAccountsDeliquent() {
			return localAccountsDeliquent;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountsDeliquent
		 */
		public void setAccountsDeliquent(int param) {

			// setting primitive attribute tracker to true
			localAccountsDeliquentTracker = param != java.lang.Integer.MIN_VALUE;

			this.localAccountsDeliquent = param;

		}

		/**
		 * field for AccountsOpened
		 */

		protected int localAccountsOpened;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountsOpenedTracker = false;

		public boolean isAccountsOpenedSpecified() {
			return localAccountsOpenedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getAccountsOpened() {
			return localAccountsOpened;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountsOpened
		 */
		public void setAccountsOpened(int param) {

			// setting primitive attribute tracker to true
			localAccountsOpenedTracker = param != java.lang.Integer.MIN_VALUE;

			this.localAccountsOpened = param;

		}

		/**
		 * field for TotalInquiries
		 */

		protected int localTotalInquiries;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTotalInquiriesTracker = false;

		public boolean isTotalInquiriesSpecified() {
			return localTotalInquiriesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getTotalInquiries() {
			return localTotalInquiries;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TotalInquiries
		 */
		public void setTotalInquiries(int param) {

			// setting primitive attribute tracker to true
			localTotalInquiriesTracker = param != java.lang.Integer.MIN_VALUE;

			this.localTotalInquiries = param;

		}

		/**
		 * field for AccountsUpdated
		 */

		protected int localAccountsUpdated;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAccountsUpdatedTracker = false;

		public boolean isAccountsUpdatedSpecified() {
			return localAccountsUpdatedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getAccountsUpdated() {
			return localAccountsUpdated;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AccountsUpdated
		 */
		public void setAccountsUpdated(int param) {

			// setting primitive attribute tracker to true
			localAccountsUpdatedTracker = param != java.lang.Integer.MIN_VALUE;

			this.localAccountsUpdated = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":RecentActivitiesType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "RecentActivitiesType", xmlWriter);
				}

			}
			if (localAccountsDeliquentTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AccountsDeliquent",
						xmlWriter);

				if (localAccountsDeliquent == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"AccountsDeliquent cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAccountsDeliquent));
				}

				xmlWriter.writeEndElement();
			}
			if (localAccountsOpenedTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AccountsOpened", xmlWriter);

				if (localAccountsOpened == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"AccountsOpened cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAccountsOpened));
				}

				xmlWriter.writeEndElement();
			}
			if (localTotalInquiriesTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TotalInquiries", xmlWriter);

				if (localTotalInquiries == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"TotalInquiries cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotalInquiries));
				}

				xmlWriter.writeEndElement();
			}
			if (localAccountsUpdatedTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AccountsUpdated", xmlWriter);

				if (localAccountsUpdated == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"AccountsUpdated cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAccountsUpdated));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAccountsDeliquentTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountsDeliquent"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localAccountsDeliquent));
			}
			if (localAccountsOpenedTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountsOpened"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localAccountsOpened));
			}
			if (localTotalInquiriesTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TotalInquiries"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localTotalInquiries));
			}
			if (localAccountsUpdatedTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AccountsUpdated"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localAccountsUpdated));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static RecentActivitiesType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				RecentActivitiesType object = new RecentActivitiesType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"RecentActivitiesType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (RecentActivitiesType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountsDeliquent").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AccountsDeliquent"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAccountsDeliquent(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setAccountsDeliquent(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountsOpened").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AccountsOpened"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAccountsOpened(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setAccountsOpened(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TotalInquiries").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TotalInquiries"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTotalInquiries(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setTotalInquiries(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AccountsUpdated").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AccountsUpdated"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAccountsUpdated(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setAccountsUpdated(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class City_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"City_type1", "ns1");

		/**
		 * field for City_type0
		 */

		protected java.lang.String localCity_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCity_type0() {
			return localCity_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            City_type0
		 */
		public void setCity_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localCity_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localCity_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":City_type1", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "City_type1", xmlWriter);
				}
			}

			if (localCity_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"City_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localCity_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCity_type0) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static City_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				City_type1 returnValue = new City_type1();

				returnValue
						.setCity_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static City_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return City_type1.Factory.fromString(content, namespaceUri);
				} else {
					return City_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static City_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				City_type1 object = new City_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "City_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setCity_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class FullName_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"FullName_type1", "ns1");

		/**
		 * field for FullName_type0
		 */

		protected java.lang.String localFullName_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFullName_type0() {
			return localFullName_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FullName_type0
		 */
		public void setFullName_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-z A-Z.,])+")) {
				this.localFullName_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localFullName_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":FullName_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "FullName_type1", xmlWriter);
				}
			}

			if (localFullName_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"FullName_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localFullName_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localFullName_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static FullName_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				FullName_type1 returnValue = new FullName_type1();

				returnValue
						.setFullName_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static FullName_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return FullName_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return FullName_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static FullName_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				FullName_type1 object = new FullName_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "FullName_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setFullName_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class City_type2 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"City_type2", "ns1");

		/**
		 * field for City_type2
		 */

		protected java.lang.String localCity_type2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCity_type2() {
			return localCity_type2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            City_type2
		 */
		public void setCity_type2(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localCity_type2 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localCity_type2.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":City_type2", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "City_type2", xmlWriter);
				}
			}

			if (localCity_type2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"City_type2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localCity_type2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCity_type2) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static City_type2 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				City_type2 returnValue = new City_type2();

				returnValue
						.setCity_type2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static City_type2 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return City_type2.Factory.fromString(content, namespaceUri);
				} else {
					return City_type2.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static City_type2 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				City_type2 object = new City_type2();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "City_type2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setCity_type2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class City_type3 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"City_type3", "ns1");

		/**
		 * field for City_type2
		 */

		protected java.lang.String localCity_type2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCity_type2() {
			return localCity_type2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            City_type2
		 */
		public void setCity_type2(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localCity_type2 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localCity_type2.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":City_type3", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "City_type3", xmlWriter);
				}
			}

			if (localCity_type2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"City_type2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localCity_type2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCity_type2) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static City_type3 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				City_type3 returnValue = new City_type3();

				returnValue
						.setCity_type2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static City_type3 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return City_type3.Factory.fromString(content, namespaceUri);
				} else {
					return City_type3.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static City_type3 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				City_type3 object = new City_type3();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "City_type2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setCity_type2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class FullName_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"FullName_type0", "ns1");

		/**
		 * field for FullName_type0
		 */

		protected java.lang.String localFullName_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getFullName_type0() {
			return localFullName_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FullName_type0
		 */
		public void setFullName_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-z A-Z.,])+")) {
				this.localFullName_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localFullName_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":FullName_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "FullName_type0", xmlWriter);
				}
			}

			if (localFullName_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"FullName_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localFullName_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localFullName_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static FullName_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				FullName_type0 returnValue = new FullName_type0();

				returnValue
						.setFullName_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static FullName_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return FullName_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return FullName_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static FullName_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				FullName_type0 object = new FullName_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "FullName_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setFullName_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DriverLicense_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"DriverLicense_type1", "ns1");

		/**
		 * field for DriverLicense_type0
		 */

		protected java.lang.String localDriverLicense_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDriverLicense_type0() {
			return localDriverLicense_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DriverLicense_type0
		 */
		public void setDriverLicense_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localDriverLicense_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localDriverLicense_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":DriverLicense_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "DriverLicense_type1", xmlWriter);
				}
			}

			if (localDriverLicense_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"DriverLicense_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localDriverLicense_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDriverLicense_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static DriverLicense_type1 fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				DriverLicense_type1 returnValue = new DriverLicense_type1();

				returnValue
						.setDriverLicense_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static DriverLicense_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return DriverLicense_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return DriverLicense_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static DriverLicense_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				DriverLicense_type1 object = new DriverLicense_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "DriverLicense_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setDriverLicense_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class DriverLicense_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"DriverLicense_type0", "ns1");

		/**
		 * field for DriverLicense_type0
		 */

		protected java.lang.String localDriverLicense_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDriverLicense_type0() {
			return localDriverLicense_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DriverLicense_type0
		 */
		public void setDriverLicense_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localDriverLicense_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localDriverLicense_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":DriverLicense_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "DriverLicense_type0", xmlWriter);
				}
			}

			if (localDriverLicense_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"DriverLicense_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localDriverLicense_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDriverLicense_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static DriverLicense_type0 fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				DriverLicense_type0 returnValue = new DriverLicense_type0();

				returnValue
						.setDriverLicense_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static DriverLicense_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return DriverLicense_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return DriverLicense_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static DriverLicense_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				DriverLicense_type0 object = new DriverLicense_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "DriverLicense_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setDriverLicense_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MonthlyDetailType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * MonthlyDetailType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for PaymentStatus
		 */

		protected java.lang.String localPaymentStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPaymentStatusTracker = false;

		public boolean isPaymentStatusSpecified() {
			return localPaymentStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPaymentStatus() {
			return localPaymentStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PaymentStatus
		 */
		public void setPaymentStatus(java.lang.String param) {
			localPaymentStatusTracker = param != null;

			this.localPaymentStatus = param;

		}

		/**
		 * field for SuitFiledStatus
		 */

		protected java.lang.String localSuitFiledStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localSuitFiledStatusTracker = false;

		public boolean isSuitFiledStatusSpecified() {
			return localSuitFiledStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getSuitFiledStatus() {
			return localSuitFiledStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            SuitFiledStatus
		 */
		public void setSuitFiledStatus(java.lang.String param) {
			localSuitFiledStatusTracker = param != null;

			this.localSuitFiledStatus = param;

		}

		/**
		 * field for AssetClassificationStatus
		 */

		protected java.lang.String localAssetClassificationStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAssetClassificationStatusTracker = false;

		public boolean isAssetClassificationStatusSpecified() {
			return localAssetClassificationStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAssetClassificationStatus() {
			return localAssetClassificationStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AssetClassificationStatus
		 */
		public void setAssetClassificationStatus(java.lang.String param) {
			localAssetClassificationStatusTracker = param != null;

			this.localAssetClassificationStatus = param;

		}

		/**
		 * field for Key This was an Attribute!
		 */

		protected java.lang.String localKey;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getKey() {
			return localKey;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Key
		 */
		public void setKey(java.lang.String param) {

			this.localKey = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":MonthlyDetailType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "MonthlyDetailType", xmlWriter);
				}

			}

			if (localKey != null) {

				writeAttribute("", "key",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localKey), xmlWriter);

			}
			if (localPaymentStatusTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "PaymentStatus", xmlWriter);

				if (localPaymentStatus == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"PaymentStatus cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPaymentStatus);

				}

				xmlWriter.writeEndElement();
			}
			if (localSuitFiledStatusTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "SuitFiledStatus", xmlWriter);

				if (localSuitFiledStatus == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"SuitFiledStatus cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localSuitFiledStatus);

				}

				xmlWriter.writeEndElement();
			}
			if (localAssetClassificationStatusTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AssetClassificationStatus",
						xmlWriter);

				if (localAssetClassificationStatus == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AssetClassificationStatus cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAssetClassificationStatus);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPaymentStatusTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PaymentStatus"));

				if (localPaymentStatus != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPaymentStatus));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"PaymentStatus cannot be null!!");
				}
			}
			if (localSuitFiledStatusTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"SuitFiledStatus"));

				if (localSuitFiledStatus != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSuitFiledStatus));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"SuitFiledStatus cannot be null!!");
				}
			}
			if (localAssetClassificationStatusTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AssetClassificationStatus"));

				if (localAssetClassificationStatus != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAssetClassificationStatus));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AssetClassificationStatus cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "key"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localKey));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static MonthlyDetailType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				MonthlyDetailType object = new MonthlyDetailType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"MonthlyDetailType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (MonthlyDetailType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "key"
					java.lang.String tempAttribKey =

					reader.getAttributeValue(null, "key");

					if (tempAttribKey != null) {
						java.lang.String content = tempAttribKey;

						object.setKey(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(tempAttribKey));

					} else {

					}
					handledAttributes.add("key");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PaymentStatus").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "PaymentStatus"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPaymentStatus(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"SuitFiledStatus").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "SuitFiledStatus"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSuitFiledStatus(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AssetClassificationStatus").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: "
											+ "AssetClassificationStatus"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAssetClassificationStatus(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class FamilyInfo implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * FamilyInfo Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AdditionalNameInfo This was an Array!
		 */

		protected AdditionalNameTypeDetails[] localAdditionalNameInfo;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAdditionalNameInfoTracker = false;

		public boolean isAdditionalNameInfoSpecified() {
			return localAdditionalNameInfoTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AdditionalNameTypeDetails[]
		 */
		public AdditionalNameTypeDetails[] getAdditionalNameInfo() {
			return localAdditionalNameInfo;
		}

		/**
		 * validate the array for AdditionalNameInfo
		 */
		protected void validateAdditionalNameInfo(
				AdditionalNameTypeDetails[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalNameInfo
		 */
		public void setAdditionalNameInfo(AdditionalNameTypeDetails[] param) {

			validateAdditionalNameInfo(param);

			localAdditionalNameInfoTracker = param != null;

			this.localAdditionalNameInfo = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            AdditionalNameTypeDetails
		 */
		public void addAdditionalNameInfo(AdditionalNameTypeDetails param) {
			if (localAdditionalNameInfo == null) {
				localAdditionalNameInfo = new AdditionalNameTypeDetails[] {};
			}

			// update the setting tracker
			localAdditionalNameInfoTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localAdditionalNameInfo);
			list.add(param);
			this.localAdditionalNameInfo = (AdditionalNameTypeDetails[]) list
					.toArray(new AdditionalNameTypeDetails[list.size()]);

		}

		/**
		 * field for NoOfDependents
		 */

		protected int localNoOfDependents;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNoOfDependentsTracker = false;

		public boolean isNoOfDependentsSpecified() {
			return localNoOfDependentsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getNoOfDependents() {
			return localNoOfDependents;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NoOfDependents
		 */
		public void setNoOfDependents(int param) {

			// setting primitive attribute tracker to true
			localNoOfDependentsTracker = param != java.lang.Integer.MIN_VALUE;

			this.localNoOfDependents = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":FamilyInfo", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "FamilyInfo", xmlWriter);
				}

			}
			if (localAdditionalNameInfoTracker) {
				if (localAdditionalNameInfo != null) {
					for (int i = 0; i < localAdditionalNameInfo.length; i++) {
						if (localAdditionalNameInfo[i] != null) {
							localAdditionalNameInfo[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"AdditionalNameInfo"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalNameInfo cannot be null!!");

				}
			}
			if (localNoOfDependentsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "NoOfDependents", xmlWriter);

				if (localNoOfDependents == java.lang.Integer.MIN_VALUE) {

					throw new org.apache.axis2.databinding.ADBException(
							"NoOfDependents cannot be null!!");

				} else {
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNoOfDependents));
				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAdditionalNameInfoTracker) {
				if (localAdditionalNameInfo != null) {
					for (int i = 0; i < localAdditionalNameInfo.length; i++) {

						if (localAdditionalNameInfo[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"AdditionalNameInfo"));
							elementList.add(localAdditionalNameInfo[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalNameInfo cannot be null!!");

				}

			}
			if (localNoOfDependentsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NoOfDependents"));

				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localNoOfDependents));
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static FamilyInfo parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				FamilyInfo object = new FamilyInfo();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"FamilyInfo".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (FamilyInfo) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AdditionalNameInfo").equals(reader
									.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(AdditionalNameTypeDetails.Factory
								.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"AdditionalNameInfo").equals(reader
										.getName())) {
									list1.add(AdditionalNameTypeDetails.Factory
											.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setAdditionalNameInfo((AdditionalNameTypeDetails[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(
										AdditionalNameTypeDetails.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NoOfDependents").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "NoOfDependents"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNoOfDependents(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {

						object.setNoOfDependents(java.lang.Integer.MIN_VALUE);

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AdditionalName_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AdditionalName_type1", "ns1");

		/**
		 * field for AdditionalName_type0
		 */

		protected java.lang.String localAdditionalName_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAdditionalName_type0() {
			return localAdditionalName_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalName_type0
		 */
		public void setAdditionalName_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-z A-Z.,])+")) {
				this.localAdditionalName_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localAdditionalName_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AdditionalName_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AdditionalName_type1", xmlWriter);
				}
			}

			if (localAdditionalName_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AdditionalName_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAdditionalName_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAdditionalName_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AdditionalName_type1 fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				AdditionalName_type1 returnValue = new AdditionalName_type1();

				returnValue
						.setAdditionalName_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static AdditionalName_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AdditionalName_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return AdditionalName_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AdditionalName_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AdditionalName_type1 object = new AdditionalName_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "AdditionalName_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setAdditionalName_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AdditionalName_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AdditionalName_type0", "ns1");

		/**
		 * field for AdditionalName_type0
		 */

		protected java.lang.String localAdditionalName_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAdditionalName_type0() {
			return localAdditionalName_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalName_type0
		 */
		public void setAdditionalName_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-z A-Z.,])+")) {
				this.localAdditionalName_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localAdditionalName_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AdditionalName_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AdditionalName_type0", xmlWriter);
				}
			}

			if (localAdditionalName_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AdditionalName_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAdditionalName_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAdditionalName_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AdditionalName_type0 fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				AdditionalName_type0 returnValue = new AdditionalName_type0();

				returnValue
						.setAdditionalName_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static AdditionalName_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AdditionalName_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return AdditionalName_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AdditionalName_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AdditionalName_type0 object = new AdditionalName_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "AdditionalName_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setAdditionalName_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class HomePhone implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"HomePhone", "ns1");

		/**
		 * field for HomePhone
		 */

		protected LandlineType localHomePhone;

		/**
		 * Auto generated getter method
		 * 
		 * @return LandlineType
		 */
		public LandlineType getHomePhone() {
			return localHomePhone;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HomePhone
		 */
		public void setHomePhone(LandlineType param) {

			this.localHomePhone = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			if (localHomePhone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HomePhone cannot be null!");
			}
			localHomePhone.serialize(MY_QNAME, xmlWriter);

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return localHomePhone.getPullParser(MY_QNAME);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static HomePhone parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				HomePhone object = new HomePhone();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"HomePhone").equals(reader
											.getName())) {

								object.setHomePhone(LandlineType.Factory
										.parse(reader));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class EnquirySummaryType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * EnquirySummaryType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Purpose
		 */

		protected java.lang.String localPurpose;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPurposeTracker = false;

		public boolean isPurposeSpecified() {
			return localPurposeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPurpose() {
			return localPurpose;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Purpose
		 */
		public void setPurpose(java.lang.String param) {
			localPurposeTracker = param != null;

			this.localPurpose = param;

		}

		/**
		 * field for Total
		 */

		protected java.lang.String localTotal;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTotalTracker = false;

		public boolean isTotalSpecified() {
			return localTotalTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTotal() {
			return localTotal;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Total
		 */
		public void setTotal(java.lang.String param) {
			localTotalTracker = param != null;

			this.localTotal = param;

		}

		/**
		 * field for Past30Days
		 */

		protected java.lang.String localPast30Days;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPast30DaysTracker = false;

		public boolean isPast30DaysSpecified() {
			return localPast30DaysTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPast30Days() {
			return localPast30Days;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Past30Days
		 */
		public void setPast30Days(java.lang.String param) {
			localPast30DaysTracker = param != null;

			this.localPast30Days = param;

		}

		/**
		 * field for Past12Months
		 */

		protected java.lang.String localPast12Months;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPast12MonthsTracker = false;

		public boolean isPast12MonthsSpecified() {
			return localPast12MonthsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPast12Months() {
			return localPast12Months;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Past12Months
		 */
		public void setPast12Months(java.lang.String param) {
			localPast12MonthsTracker = param != null;

			this.localPast12Months = param;

		}

		/**
		 * field for Past24Months
		 */

		protected java.lang.String localPast24Months;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPast24MonthsTracker = false;

		public boolean isPast24MonthsSpecified() {
			return localPast24MonthsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getPast24Months() {
			return localPast24Months;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Past24Months
		 */
		public void setPast24Months(java.lang.String param) {
			localPast24MonthsTracker = param != null;

			this.localPast24Months = param;

		}

		/**
		 * field for Recent
		 */

		protected java.lang.String localRecent;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRecentTracker = false;

		public boolean isRecentSpecified() {
			return localRecentTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRecent() {
			return localRecent;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Recent
		 */
		public void setRecent(java.lang.String param) {
			localRecentTracker = param != null;

			this.localRecent = param;

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 * field for ReportedDate This was an Attribute!
		 */

		protected java.util.Date localReportedDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getReportedDate() {
			return localReportedDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ReportedDate
		 */
		public void setReportedDate(java.util.Date param) {

			this.localReportedDate = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":EnquirySummaryType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "EnquirySummaryType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}

			if (localReportedDate != null) {

				writeAttribute("", "ReportedDate",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localReportedDate), xmlWriter);

			}
			if (localPurposeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Purpose", xmlWriter);

				if (localPurpose == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Purpose cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPurpose);

				}

				xmlWriter.writeEndElement();
			}
			if (localTotalTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Total", xmlWriter);

				if (localTotal == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Total cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localTotal);

				}

				xmlWriter.writeEndElement();
			}
			if (localPast30DaysTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Past30Days", xmlWriter);

				if (localPast30Days == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Past30Days cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPast30Days);

				}

				xmlWriter.writeEndElement();
			}
			if (localPast12MonthsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Past12Months", xmlWriter);

				if (localPast12Months == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Past12Months cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPast12Months);

				}

				xmlWriter.writeEndElement();
			}
			if (localPast24MonthsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Past24Months", xmlWriter);

				if (localPast24Months == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Past24Months cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localPast24Months);

				}

				xmlWriter.writeEndElement();
			}
			if (localRecentTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Recent", xmlWriter);

				if (localRecent == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Recent cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localRecent);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localPurposeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Purpose"));

				if (localPurpose != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPurpose));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Purpose cannot be null!!");
				}
			}
			if (localTotalTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Total"));

				if (localTotal != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTotal));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Total cannot be null!!");
				}
			}
			if (localPast30DaysTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Past30Days"));

				if (localPast30Days != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPast30Days));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Past30Days cannot be null!!");
				}
			}
			if (localPast12MonthsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Past12Months"));

				if (localPast12Months != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPast12Months));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Past12Months cannot be null!!");
				}
			}
			if (localPast24MonthsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Past24Months"));

				if (localPast24Months != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localPast24Months));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Past24Months cannot be null!!");
				}
			}
			if (localRecentTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Recent"));

				if (localRecent != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRecent));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Recent cannot be null!!");
				}
			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			attribList.add(new javax.xml.namespace.QName("", "ReportedDate"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localReportedDate));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static EnquirySummaryType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				EnquirySummaryType object = new EnquirySummaryType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"EnquirySummaryType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (EnquirySummaryType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					// handle attribute "ReportedDate"
					java.lang.String tempAttribReportedDate =

					reader.getAttributeValue(null, "ReportedDate");

					if (tempAttribReportedDate != null) {
						java.lang.String content = tempAttribReportedDate;

						object.setReportedDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(tempAttribReportedDate));

					} else {

					}
					handledAttributes.add("ReportedDate");

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Purpose").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Purpose"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPurpose(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Total").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Total"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTotal(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Past30Days").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Past30Days"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPast30Days(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Past12Months").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Past12Months"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPast12Months(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Past24Months").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Past24Months"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setPast24Months(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Recent").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Recent"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRecent(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class UidaiResponse extends Response implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * uidaiResponse Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for UidaiResponse
		 */

		protected java.lang.String localUidaiResponse;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localUidaiResponseTracker = false;

		public boolean isUidaiResponseSpecified() {
			return localUidaiResponseTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getUidaiResponse() {
			return localUidaiResponse;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UidaiResponse
		 */
		public void setUidaiResponse(java.lang.String param) {
			localUidaiResponseTracker = param != null;

			this.localUidaiResponse = param;

		}

		/**
		 * field for NameResponse
		 */

		protected java.lang.String localNameResponse;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNameResponseTracker = false;

		public boolean isNameResponseSpecified() {
			return localNameResponseTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNameResponse() {
			return localNameResponse;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NameResponse
		 */
		public void setNameResponse(java.lang.String param) {
			localNameResponseTracker = param != null;

			this.localNameResponse = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			java.lang.String namespacePrefix = registerPrefix(xmlWriter,
					"http://services.equifax.com/eport/ws/schemas/1.0");
			if ((namespacePrefix != null)
					&& (namespacePrefix.trim().length() > 0)) {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						namespacePrefix + ":uidaiResponse", xmlWriter);
			} else {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						"uidaiResponse", xmlWriter);
			}

			if (localReturnCodeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "returnCode", xmlWriter);

				if (localReturnCode == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"returnCode cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReturnCode);

				}

				xmlWriter.writeEndElement();
			}
			if (localReturnCodeDescTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "returnCodeDesc", xmlWriter);

				if (localReturnCodeDesc == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"returnCodeDesc cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localReturnCodeDesc);

				}

				xmlWriter.writeEndElement();
			}
			if (localRunDateTimeTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "runDateTime", xmlWriter);

				if (localRunDateTime == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"runDateTime cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRunDateTime));

				}

				xmlWriter.writeEndElement();
			}
			if (localErrorRespMessageTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "errorRespMessage",
						xmlWriter);

				if (localErrorRespMessage == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"errorRespMessage cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localErrorRespMessage);

				}

				xmlWriter.writeEndElement();
			}
			if (localUidaiResponseTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "uidaiResponse", xmlWriter);

				if (localUidaiResponse == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"uidaiResponse cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localUidaiResponse);

				}

				xmlWriter.writeEndElement();
			}
			if (localNameResponseTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "nameResponse", xmlWriter);

				if (localNameResponse == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"nameResponse cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localNameResponse);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			attribList.add(new javax.xml.namespace.QName(
					"http://www.w3.org/2001/XMLSchema-instance", "type"));
			attribList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"uidaiResponse"));
			if (localReturnCodeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"returnCode"));

				if (localReturnCode != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReturnCode));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"returnCode cannot be null!!");
				}
			}
			if (localReturnCodeDescTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"returnCodeDesc"));

				if (localReturnCodeDesc != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localReturnCodeDesc));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"returnCodeDesc cannot be null!!");
				}
			}
			if (localRunDateTimeTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"runDateTime"));

				if (localRunDateTime != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRunDateTime));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"runDateTime cannot be null!!");
				}
			}
			if (localErrorRespMessageTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"errorRespMessage"));

				if (localErrorRespMessage != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localErrorRespMessage));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"errorRespMessage cannot be null!!");
				}
			}
			if (localUidaiResponseTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"uidaiResponse"));

				if (localUidaiResponse != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localUidaiResponse));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"uidaiResponse cannot be null!!");
				}
			}
			if (localNameResponseTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"nameResponse"));

				if (localNameResponse != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNameResponse));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"nameResponse cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static UidaiResponse parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				UidaiResponse object = new UidaiResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"uidaiResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (UidaiResponse) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"returnCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "returnCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"returnCodeDesc").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "returnCodeDesc"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setReturnCodeDesc(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"runDateTime").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "runDateTime"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setRunDateTime(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDateTime(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"errorRespMessage")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "errorRespMessage"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setErrorRespMessage(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"uidaiResponse").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "uidaiResponse"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setUidaiResponse(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"nameResponse").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "nameResponse"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setNameResponse(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class UidaiRequest extends Request implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * uidaiRequest Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for UIDAI
		 */

		protected java.lang.String localUIDAI;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localUIDAITracker = false;

		public boolean isUIDAISpecified() {
			return localUIDAITracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getUIDAI() {
			return localUIDAI;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UIDAI
		 */
		public void setUIDAI(java.lang.String param) {
			localUIDAITracker = param != null;

			this.localUIDAI = param;

		}

		/**
		 * field for Name
		 */

		protected java.lang.String localName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNameTracker = false;

		public boolean isNameSpecified() {
			return localNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getName() {
			return localName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name
		 */
		public void setName(java.lang.String param) {
			localNameTracker = param != null;

			this.localName = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			java.lang.String namespacePrefix = registerPrefix(xmlWriter,
					"http://services.equifax.com/eport/ws/schemas/1.0");
			if ((namespacePrefix != null)
					&& (namespacePrefix.trim().length() > 0)) {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						namespacePrefix + ":uidaiRequest", xmlWriter);
			} else {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						"uidaiRequest", xmlWriter);
			}

			if (localSourceTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "source", xmlWriter);

				if (localSource == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"source cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localSource);

				}

				xmlWriter.writeEndElement();
			}
			if (localUIDAITracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "UIDAI", xmlWriter);

				if (localUIDAI == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"UIDAI cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localUIDAI);

				}

				xmlWriter.writeEndElement();
			}
			if (localNameTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "name", xmlWriter);

				if (localName == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"name cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localName);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			attribList.add(new javax.xml.namespace.QName(
					"http://www.w3.org/2001/XMLSchema-instance", "type"));
			attribList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"uidaiRequest"));
			if (localSourceTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"source"));

				if (localSource != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSource));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"source cannot be null!!");
				}
			}
			if (localUIDAITracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"UIDAI"));

				if (localUIDAI != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localUIDAI));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"UIDAI cannot be null!!");
				}
			}
			if (localNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"name"));

				if (localName != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localName));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"name cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static UidaiRequest parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				UidaiRequest object = new UidaiRequest();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"uidaiRequest".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (UidaiRequest) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"source").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "source"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSource(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"UIDAI").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "UIDAI"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setUIDAI(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"name").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "name"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setName(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class LastName_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"LastName_type0", "ns1");

		/**
		 * field for LastName_type0
		 */

		protected java.lang.String localLastName_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLastName_type0() {
			return localLastName_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastName_type0
		 */
		public void setLastName_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-z A-Z.,])+")) {
				this.localLastName_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localLastName_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":LastName_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "LastName_type0", xmlWriter);
				}
			}

			if (localLastName_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"LastName_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLastName_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLastName_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static LastName_type0 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				LastName_type0 returnValue = new LastName_type0();

				returnValue
						.setLastName_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static LastName_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return LastName_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return LastName_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static LastName_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				LastName_type0 object = new LastName_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "LastName_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLastName_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class LastName_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"LastName_type1", "ns1");

		/**
		 * field for LastName_type0
		 */

		protected java.lang.String localLastName_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLastName_type0() {
			return localLastName_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastName_type0
		 */
		public void setLastName_type0(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("([a-z A-Z.,])+")) {
				this.localLastName_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localLastName_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":LastName_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "LastName_type1", xmlWriter);
				}
			}

			if (localLastName_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"LastName_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLastName_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLastName_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static LastName_type1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				LastName_type1 returnValue = new LastName_type1();

				returnValue
						.setLastName_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static LastName_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return LastName_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return LastName_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static LastName_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				LastName_type1 object = new LastName_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "LastName_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLastName_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class VoterRequest extends Request implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * voterRequest Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for VoterId
		 */

		protected java.lang.String localVoterId;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVoterIdTracker = false;

		public boolean isVoterIdSpecified() {
			return localVoterIdTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getVoterId() {
			return localVoterId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VoterId
		 */
		public void setVoterId(java.lang.String param) {
			localVoterIdTracker = param != null;

			this.localVoterId = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			java.lang.String namespacePrefix = registerPrefix(xmlWriter,
					"http://services.equifax.com/eport/ws/schemas/1.0");
			if ((namespacePrefix != null)
					&& (namespacePrefix.trim().length() > 0)) {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						namespacePrefix + ":voterRequest", xmlWriter);
			} else {
				writeAttribute("xsi",
						"http://www.w3.org/2001/XMLSchema-instance", "type",
						"voterRequest", xmlWriter);
			}

			if (localSourceTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "source", xmlWriter);

				if (localSource == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"source cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localSource);

				}

				xmlWriter.writeEndElement();
			}
			if (localVoterIdTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "voterId", xmlWriter);

				if (localVoterId == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"voterId cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localVoterId);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			attribList.add(new javax.xml.namespace.QName(
					"http://www.w3.org/2001/XMLSchema-instance", "type"));
			attribList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"voterRequest"));
			if (localSourceTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"source"));

				if (localSource != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localSource));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"source cannot be null!!");
				}
			}
			if (localVoterIdTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"voterId"));

				if (localVoterId != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localVoterId));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"voterId cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static VoterRequest parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				VoterRequest object = new VoterRequest();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"voterRequest".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (VoterRequest) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"source").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "source"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setSource(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"voterId").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "voterId"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setVoterId(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ErrorType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * ErrorType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for ErrorCode
		 */

		protected java.lang.String localErrorCode;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getErrorCode() {
			return localErrorCode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ErrorCode
		 */
		public void setErrorCode(java.lang.String param) {

			this.localErrorCode = param;

		}

		/**
		 * field for ErrorMsg
		 */

		protected java.lang.String localErrorMsg;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localErrorMsgTracker = false;

		public boolean isErrorMsgSpecified() {
			return localErrorMsgTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getErrorMsg() {
			return localErrorMsg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ErrorMsg
		 */
		public void setErrorMsg(java.lang.String param) {
			localErrorMsgTracker = param != null;

			this.localErrorMsg = param;

		}

		/**
		 * field for Details
		 */

		protected java.lang.String localDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDetailsTracker = false;

		public boolean isDetailsSpecified() {
			return localDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDetails() {
			return localDetails;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Details
		 */
		public void setDetails(java.lang.String param) {
			localDetailsTracker = param != null;

			this.localDetails = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":ErrorType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ErrorType", xmlWriter);
				}

			}

			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "ErrorCode", xmlWriter);

			if (localErrorCode == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"ErrorCode cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localErrorCode);

			}

			xmlWriter.writeEndElement();
			if (localErrorMsgTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "ErrorMsg", xmlWriter);

				if (localErrorMsg == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"ErrorMsg cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localErrorMsg);

				}

				xmlWriter.writeEndElement();
			}
			if (localDetailsTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "Details", xmlWriter);

				if (localDetails == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Details cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localDetails);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"ErrorCode"));

			if (localErrorCode != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localErrorCode));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"ErrorCode cannot be null!!");
			}
			if (localErrorMsgTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"ErrorMsg"));

				if (localErrorMsg != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localErrorMsg));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"ErrorMsg cannot be null!!");
				}
			}
			if (localDetailsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Details"));

				if (localDetails != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDetails));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Details cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ErrorType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ErrorType object = new ErrorType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"ErrorType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (ErrorType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ErrorCode").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ErrorCode"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setErrorCode(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"ErrorMsg").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ErrorMsg"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setErrorMsg(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Details").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Details"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDetails(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MobilePhone implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"MobilePhone", "ns1");

		/**
		 * field for MobilePhone
		 */

		protected MobilePhone_type1 localMobilePhone;

		/**
		 * Auto generated getter method
		 * 
		 * @return MobilePhone_type1
		 */
		public MobilePhone_type1 getMobilePhone() {
			return localMobilePhone;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MobilePhone
		 */
		public void setMobilePhone(MobilePhone_type1 param) {

			this.localMobilePhone = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			if (localMobilePhone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"MobilePhone cannot be null!");
			}
			localMobilePhone.serialize(MY_QNAME, xmlWriter);

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return localMobilePhone.getPullParser(MY_QNAME);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static MobilePhone parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				MobilePhone object = new MobilePhone();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"MobilePhone").equals(reader
											.getName())) {

								object.setMobilePhone(MobilePhone_type1.Factory
										.parse(reader));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RequestBodyType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * RequestBodyType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for InquiryPurpose
		 */

		protected InquiryPurposeOptions localInquiryPurpose;

		/**
		 * Auto generated getter method
		 * 
		 * @return InquiryPurposeOptions
		 */
		public InquiryPurposeOptions getInquiryPurpose() {
			return localInquiryPurpose;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryPurpose
		 */
		public void setInquiryPurpose(InquiryPurposeOptions param) {

			this.localInquiryPurpose = param;

		}

		/**
		 * field for TransactionAmount
		 */

		protected java.math.BigDecimal localTransactionAmount;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTransactionAmountTracker = false;

		public boolean isTransactionAmountSpecified() {
			return localTransactionAmountTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getTransactionAmount() {
			return localTransactionAmount;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TransactionAmount
		 */
		public void setTransactionAmount(java.math.BigDecimal param) {
			localTransactionAmountTracker = param != null;

			this.localTransactionAmount = param;

		}

		/**
		 * field for AdditionalSearchField
		 */

		protected java.lang.String localAdditionalSearchField;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAdditionalSearchFieldTracker = false;

		public boolean isAdditionalSearchFieldSpecified() {
			return localAdditionalSearchFieldTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAdditionalSearchField() {
			return localAdditionalSearchField;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalSearchField
		 */
		public void setAdditionalSearchField(java.lang.String param) {
			localAdditionalSearchFieldTracker = param != null;

			this.localAdditionalSearchField = param;

		}

		/**
		 * field for FullName
		 */

		protected FullName_type1 localFullName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localFullNameTracker = false;

		public boolean isFullNameSpecified() {
			return localFullNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return FullName_type1
		 */
		public FullName_type1 getFullName() {
			return localFullName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FullName
		 */
		public void setFullName(FullName_type1 param) {
			localFullNameTracker = param != null;

			this.localFullName = param;

		}

		/**
		 * field for FirstName
		 */

		protected FirstName_type1 localFirstName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localFirstNameTracker = false;

		public boolean isFirstNameSpecified() {
			return localFirstNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return FirstName_type1
		 */
		public FirstName_type1 getFirstName() {
			return localFirstName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FirstName
		 */
		public void setFirstName(FirstName_type1 param) {
			localFirstNameTracker = param != null;

			this.localFirstName = param;

		}

		/**
		 * field for MiddleName
		 */

		protected MiddleName_type1 localMiddleName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMiddleNameTracker = false;

		public boolean isMiddleNameSpecified() {
			return localMiddleNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return MiddleName_type1
		 */
		public MiddleName_type1 getMiddleName() {
			return localMiddleName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MiddleName
		 */
		public void setMiddleName(MiddleName_type1 param) {
			localMiddleNameTracker = param != null;

			this.localMiddleName = param;

		}

		/**
		 * field for LastName
		 */

		protected LastName_type1 localLastName;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLastNameTracker = false;

		public boolean isLastNameSpecified() {
			return localLastNameTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return LastName_type1
		 */
		public LastName_type1 getLastName() {
			return localLastName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LastName
		 */
		public void setLastName(LastName_type1 param) {
			localLastNameTracker = param != null;

			this.localLastName = param;

		}

		/**
		 * field for FamilyDetails
		 */

		protected FamilyInfo localFamilyDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localFamilyDetailsTracker = false;

		public boolean isFamilyDetailsSpecified() {
			return localFamilyDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return FamilyInfo
		 */
		public FamilyInfo getFamilyDetails() {
			return localFamilyDetails;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FamilyDetails
		 */
		public void setFamilyDetails(FamilyInfo param) {
			localFamilyDetailsTracker = param != null;

			this.localFamilyDetails = param;

		}

		/**
		 * field for AdditionalId1
		 */

		protected AdditionalId1_type1 localAdditionalId1;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAdditionalId1Tracker = false;

		public boolean isAdditionalId1Specified() {
			return localAdditionalId1Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AdditionalId1_type1
		 */
		public AdditionalId1_type1 getAdditionalId1() {
			return localAdditionalId1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalId1
		 */
		public void setAdditionalId1(AdditionalId1_type1 param) {
			localAdditionalId1Tracker = param != null;

			this.localAdditionalId1 = param;

		}

		/**
		 * field for AdditionalId2
		 */

		protected AdditionalId2_type1 localAdditionalId2;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAdditionalId2Tracker = false;

		public boolean isAdditionalId2Specified() {
			return localAdditionalId2Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AdditionalId2_type1
		 */
		public AdditionalId2_type1 getAdditionalId2() {
			return localAdditionalId2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalId2
		 */
		public void setAdditionalId2(AdditionalId2_type1 param) {
			localAdditionalId2Tracker = param != null;

			this.localAdditionalId2 = param;

		}

		/**
		 * field for AddrLine1
		 */

		protected AddrLine1_type1 localAddrLine1;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAddrLine1Tracker = false;

		public boolean isAddrLine1Specified() {
			return localAddrLine1Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AddrLine1_type1
		 */
		public AddrLine1_type1 getAddrLine1() {
			return localAddrLine1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AddrLine1
		 */
		public void setAddrLine1(AddrLine1_type1 param) {
			localAddrLine1Tracker = param != null;

			this.localAddrLine1 = param;

		}

		/**
		 * field for Street
		 */

		protected Street_type1 localStreet;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localStreetTracker = false;

		public boolean isStreetSpecified() {
			return localStreetTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Street_type1
		 */
		public Street_type1 getStreet() {
			return localStreet;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Street
		 */
		public void setStreet(Street_type1 param) {
			localStreetTracker = param != null;

			this.localStreet = param;

		}

		/**
		 * field for Locality1
		 */

		protected Locality1_type1 localLocality1;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLocality1Tracker = false;

		public boolean isLocality1Specified() {
			return localLocality1Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Locality1_type1
		 */
		public Locality1_type1 getLocality1() {
			return localLocality1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality1
		 */
		public void setLocality1(Locality1_type1 param) {
			localLocality1Tracker = param != null;

			this.localLocality1 = param;

		}

		/**
		 * field for Locality2
		 */

		protected Locality2_type1 localLocality2;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localLocality2Tracker = false;

		public boolean isLocality2Specified() {
			return localLocality2Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Locality2_type1
		 */
		public Locality2_type1 getLocality2() {
			return localLocality2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locality2
		 */
		public void setLocality2(Locality2_type1 param) {
			localLocality2Tracker = param != null;

			this.localLocality2 = param;

		}

		/**
		 * field for City
		 */

		protected City_type1 localCity;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localCityTracker = false;

		public boolean isCitySpecified() {
			return localCityTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return City_type1
		 */
		public City_type1 getCity() {
			return localCity;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            City
		 */
		public void setCity(City_type1 param) {
			localCityTracker = param != null;

			this.localCity = param;

		}

		/**
		 * field for State
		 */

		protected StateCodeOptions localState;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localStateTracker = false;

		public boolean isStateSpecified() {
			return localStateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return StateCodeOptions
		 */
		public StateCodeOptions getState() {
			return localState;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            State
		 */
		public void setState(StateCodeOptions param) {
			localStateTracker = param != null;

			this.localState = param;

		}

		/**
		 * field for Postal
		 */

		protected Postal_type1 localPostal;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPostalTracker = false;

		public boolean isPostalSpecified() {
			return localPostalTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Postal_type1
		 */
		public Postal_type1 getPostal() {
			return localPostal;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Postal
		 */
		public void setPostal(Postal_type1 param) {
			localPostalTracker = param != null;

			this.localPostal = param;

		}

		/**
		 * field for InquiryAddresses
		 */

		protected InquiryCommonInputAddressType localInquiryAddresses;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInquiryAddressesTracker = false;

		public boolean isInquiryAddressesSpecified() {
			return localInquiryAddressesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return InquiryCommonInputAddressType
		 */
		public InquiryCommonInputAddressType getInquiryAddresses() {
			return localInquiryAddresses;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryAddresses
		 */
		public void setInquiryAddresses(InquiryCommonInputAddressType param) {
			localInquiryAddressesTracker = param != null;

			this.localInquiryAddresses = param;

		}

		/**
		 * field for InquiryPhones
		 */

		protected InquiryCommonInputPhoneType localInquiryPhones;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInquiryPhonesTracker = false;

		public boolean isInquiryPhonesSpecified() {
			return localInquiryPhonesTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return InquiryCommonInputPhoneType
		 */
		public InquiryCommonInputPhoneType getInquiryPhones() {
			return localInquiryPhones;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryPhones
		 */
		public void setInquiryPhones(InquiryCommonInputPhoneType param) {
			localInquiryPhonesTracker = param != null;

			this.localInquiryPhones = param;

		}

		/**
		 * field for DOB
		 */

		protected java.util.Date localDOB;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.util.Date
		 */
		public java.util.Date getDOB() {
			return localDOB;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DOB
		 */
		public void setDOB(java.util.Date param) {

			this.localDOB = param;

		}

		/**
		 * field for MaritalStatus
		 */

		protected MaritalStatusOptions localMaritalStatus;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMaritalStatusTracker = false;

		public boolean isMaritalStatusSpecified() {
			return localMaritalStatusTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return MaritalStatusOptions
		 */
		public MaritalStatusOptions getMaritalStatus() {
			return localMaritalStatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MaritalStatus
		 */
		public void setMaritalStatus(MaritalStatusOptions param) {
			localMaritalStatusTracker = param != null;

			this.localMaritalStatus = param;

		}

		/**
		 * field for Gender
		 */

		protected GenderOptions localGender;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localGenderTracker = false;

		public boolean isGenderSpecified() {
			return localGenderTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return GenderOptions
		 */
		public GenderOptions getGender() {
			return localGender;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Gender
		 */
		public void setGender(GenderOptions param) {
			localGenderTracker = param != null;

			this.localGender = param;

		}

		/**
		 * field for NationalIdCard
		 */

		protected NationalIdCard_type1 localNationalIdCard;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localNationalIdCardTracker = false;

		public boolean isNationalIdCardSpecified() {
			return localNationalIdCardTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return NationalIdCard_type1
		 */
		public NationalIdCard_type1 getNationalIdCard() {
			return localNationalIdCard;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            NationalIdCard
		 */
		public void setNationalIdCard(NationalIdCard_type1 param) {
			localNationalIdCardTracker = param != null;

			this.localNationalIdCard = param;

		}

		/**
		 * field for RationCard
		 */

		protected RationCard_type1 localRationCard;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRationCardTracker = false;

		public boolean isRationCardSpecified() {
			return localRationCardTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return RationCard_type1
		 */
		public RationCard_type1 getRationCard() {
			return localRationCard;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RationCard
		 */
		public void setRationCard(RationCard_type1 param) {
			localRationCardTracker = param != null;

			this.localRationCard = param;

		}

		/**
		 * field for PANId
		 */

		protected PANId_type0 localPANId;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPANIdTracker = false;

		public boolean isPANIdSpecified() {
			return localPANIdTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return PANId_type0
		 */
		public PANId_type0 getPANId() {
			return localPANId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PANId
		 */
		public void setPANId(PANId_type0 param) {
			localPANIdTracker = param != null;

			this.localPANId = param;

		}

		/**
		 * field for PassportId
		 */

		protected PassportId_type0 localPassportId;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localPassportIdTracker = false;

		public boolean isPassportIdSpecified() {
			return localPassportIdTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return PassportId_type0
		 */
		public PassportId_type0 getPassportId() {
			return localPassportId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PassportId
		 */
		public void setPassportId(PassportId_type0 param) {
			localPassportIdTracker = param != null;

			this.localPassportId = param;

		}

		/**
		 * field for VoterId
		 */

		protected VoterId_type1 localVoterId;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localVoterIdTracker = false;

		public boolean isVoterIdSpecified() {
			return localVoterIdTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return VoterId_type1
		 */
		public VoterId_type1 getVoterId() {
			return localVoterId;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            VoterId
		 */
		public void setVoterId(VoterId_type1 param) {
			localVoterIdTracker = param != null;

			this.localVoterId = param;

		}

		/**
		 * field for HomePhone
		 */

		protected LandlineType localHomePhone;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localHomePhoneTracker = false;

		public boolean isHomePhoneSpecified() {
			return localHomePhoneTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return LandlineType
		 */
		public LandlineType getHomePhone() {
			return localHomePhone;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HomePhone
		 */
		public void setHomePhone(LandlineType param) {
			localHomePhoneTracker = param != null;

			this.localHomePhone = param;

		}

		/**
		 * field for MobilePhone
		 */

		protected MobilePhone_type1 localMobilePhone;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMobilePhoneTracker = false;

		public boolean isMobilePhoneSpecified() {
			return localMobilePhoneTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return MobilePhone_type1
		 */
		public MobilePhone_type1 getMobilePhone() {
			return localMobilePhone;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MobilePhone
		 */
		public void setMobilePhone(MobilePhone_type1 param) {
			localMobilePhoneTracker = param != null;

			this.localMobilePhone = param;

		}

		/**
		 * field for DriverLicense
		 */

		protected DriverLicense_type1 localDriverLicense;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localDriverLicenseTracker = false;

		public boolean isDriverLicenseSpecified() {
			return localDriverLicenseTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return DriverLicense_type1
		 */
		public DriverLicense_type1 getDriverLicense() {
			return localDriverLicense;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DriverLicense
		 */
		public void setDriverLicense(DriverLicense_type1 param) {
			localDriverLicenseTracker = param != null;

			this.localDriverLicense = param;

		}

		/**
		 * field for RequestAccountDetails
		 */

		protected AccountInputType localRequestAccountDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localRequestAccountDetailsTracker = false;

		public boolean isRequestAccountDetailsSpecified() {
			return localRequestAccountDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return AccountInputType
		 */
		public AccountInputType getRequestAccountDetails() {
			return localRequestAccountDetails;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RequestAccountDetails
		 */
		public void setRequestAccountDetails(AccountInputType param) {
			localRequestAccountDetailsTracker = param != null;

			this.localRequestAccountDetails = param;

		}

		/**
		 * field for InquiryCommonAccountDetails
		 */

		protected InquiryCommonAccountDetailsType localInquiryCommonAccountDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localInquiryCommonAccountDetailsTracker = false;

		public boolean isInquiryCommonAccountDetailsSpecified() {
			return localInquiryCommonAccountDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return InquiryCommonAccountDetailsType
		 */
		public InquiryCommonAccountDetailsType getInquiryCommonAccountDetails() {
			return localInquiryCommonAccountDetails;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            InquiryCommonAccountDetails
		 */
		public void setInquiryCommonAccountDetails(
				InquiryCommonAccountDetailsType param) {
			localInquiryCommonAccountDetailsTracker = param != null;

			this.localInquiryCommonAccountDetails = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":RequestBodyType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "RequestBodyType", xmlWriter);
				}

			}

			if (localInquiryPurpose == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"InquiryPurpose cannot be null!!");
			}
			localInquiryPurpose.serialize(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"InquiryPurpose"), xmlWriter);
			if (localTransactionAmountTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "TransactionAmount",
						xmlWriter);

				if (localTransactionAmount == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"TransactionAmount cannot be null!!");

				} else {

					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTransactionAmount));

				}

				xmlWriter.writeEndElement();
			}
			if (localAdditionalSearchFieldTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "AdditionalSearchField",
						xmlWriter);

				if (localAdditionalSearchField == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalSearchField cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localAdditionalSearchField);

				}

				xmlWriter.writeEndElement();
			}
			if (localFullNameTracker) {
				if (localFullName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"FullName cannot be null!!");
				}
				localFullName.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"FullName"), xmlWriter);
			}
			if (localFirstNameTracker) {
				if (localFirstName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"FirstName cannot be null!!");
				}
				localFirstName.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"FirstName"), xmlWriter);
			}
			if (localMiddleNameTracker) {
				if (localMiddleName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MiddleName cannot be null!!");
				}
				localMiddleName.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MiddleName"), xmlWriter);
			}
			if (localLastNameTracker) {
				if (localLastName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"LastName cannot be null!!");
				}
				localLastName.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"LastName"), xmlWriter);
			}
			if (localFamilyDetailsTracker) {
				if (localFamilyDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"FamilyDetails cannot be null!!");
				}
				localFamilyDetails.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"FamilyDetails"), xmlWriter);
			}
			if (localAdditionalId1Tracker) {
				if (localAdditionalId1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalId1 cannot be null!!");
				}
				localAdditionalId1.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AdditionalId1"), xmlWriter);
			}
			if (localAdditionalId2Tracker) {
				if (localAdditionalId2 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalId2 cannot be null!!");
				}
				localAdditionalId2.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AdditionalId2"), xmlWriter);
			}
			if (localAddrLine1Tracker) {
				if (localAddrLine1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AddrLine1 cannot be null!!");
				}
				localAddrLine1.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AddrLine1"), xmlWriter);
			}
			if (localStreetTracker) {
				if (localStreet == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Street cannot be null!!");
				}
				localStreet.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Street"), xmlWriter);
			}
			if (localLocality1Tracker) {
				if (localLocality1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Locality1 cannot be null!!");
				}
				localLocality1.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Locality1"), xmlWriter);
			}
			if (localLocality2Tracker) {
				if (localLocality2 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Locality2 cannot be null!!");
				}
				localLocality2.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Locality2"), xmlWriter);
			}
			if (localCityTracker) {
				if (localCity == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"City cannot be null!!");
				}
				localCity.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"City"), xmlWriter);
			}
			if (localStateTracker) {
				if (localState == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"State cannot be null!!");
				}
				localState.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"State"), xmlWriter);
			}
			if (localPostalTracker) {
				if (localPostal == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Postal cannot be null!!");
				}
				localPostal.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Postal"), xmlWriter);
			}
			if (localInquiryAddressesTracker) {
				if (localInquiryAddresses == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"InquiryAddresses cannot be null!!");
				}
				localInquiryAddresses.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"InquiryAddresses"), xmlWriter);
			}
			if (localInquiryPhonesTracker) {
				if (localInquiryPhones == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"InquiryPhones cannot be null!!");
				}
				localInquiryPhones.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"InquiryPhones"), xmlWriter);
			}
			namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
			writeStartElement(null, namespace, "DOB", xmlWriter);

			if (localDOB == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"DOB cannot be null!!");

			} else {

				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localDOB));

			}

			xmlWriter.writeEndElement();
			if (localMaritalStatusTracker) {
				if (localMaritalStatus == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MaritalStatus cannot be null!!");
				}
				localMaritalStatus.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MaritalStatus"), xmlWriter);
			}
			if (localGenderTracker) {
				if (localGender == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Gender cannot be null!!");
				}
				localGender.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Gender"), xmlWriter);
			}
			if (localNationalIdCardTracker) {
				if (localNationalIdCard == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"NationalIdCard cannot be null!!");
				}
				localNationalIdCard.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NationalIdCard"), xmlWriter);
			}
			if (localRationCardTracker) {
				if (localRationCard == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"RationCard cannot be null!!");
				}
				localRationCard.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"RationCard"), xmlWriter);
			}
			if (localPANIdTracker) {
				if (localPANId == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"PANId cannot be null!!");
				}
				localPANId.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PANId"), xmlWriter);
			}
			if (localPassportIdTracker) {
				if (localPassportId == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"PassportId cannot be null!!");
				}
				localPassportId.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PassportId"), xmlWriter);
			}
			if (localVoterIdTracker) {
				if (localVoterId == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"VoterId cannot be null!!");
				}
				localVoterId.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"VoterId"), xmlWriter);
			}
			if (localHomePhoneTracker) {
				if (localHomePhone == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"HomePhone cannot be null!!");
				}
				localHomePhone.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"HomePhone"), xmlWriter);
			}
			if (localMobilePhoneTracker) {
				if (localMobilePhone == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MobilePhone cannot be null!!");
				}
				localMobilePhone.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MobilePhone"), xmlWriter);
			}
			if (localDriverLicenseTracker) {
				if (localDriverLicense == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"DriverLicense cannot be null!!");
				}
				localDriverLicense.serialize(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DriverLicense"), xmlWriter);
			}
			if (localRequestAccountDetailsTracker) {
				if (localRequestAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"RequestAccountDetails cannot be null!!");
				}
				localRequestAccountDetails
						.serialize(
								new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"RequestAccountDetails"), xmlWriter);
			}
			if (localInquiryCommonAccountDetailsTracker) {
				if (localInquiryCommonAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"InquiryCommonAccountDetails cannot be null!!");
				}
				localInquiryCommonAccountDetails
						.serialize(
								new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"InquiryCommonAccountDetails"),
								xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0",
					"InquiryPurpose"));

			if (localInquiryPurpose == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"InquiryPurpose cannot be null!!");
			}
			elementList.add(localInquiryPurpose);
			if (localTransactionAmountTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"TransactionAmount"));

				if (localTransactionAmount != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTransactionAmount));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"TransactionAmount cannot be null!!");
				}
			}
			if (localAdditionalSearchFieldTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AdditionalSearchField"));

				if (localAdditionalSearchField != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAdditionalSearchField));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalSearchField cannot be null!!");
				}
			}
			if (localFullNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"FullName"));

				if (localFullName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"FullName cannot be null!!");
				}
				elementList.add(localFullName);
			}
			if (localFirstNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"FirstName"));

				if (localFirstName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"FirstName cannot be null!!");
				}
				elementList.add(localFirstName);
			}
			if (localMiddleNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MiddleName"));

				if (localMiddleName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MiddleName cannot be null!!");
				}
				elementList.add(localMiddleName);
			}
			if (localLastNameTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"LastName"));

				if (localLastName == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"LastName cannot be null!!");
				}
				elementList.add(localLastName);
			}
			if (localFamilyDetailsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"FamilyDetails"));

				if (localFamilyDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"FamilyDetails cannot be null!!");
				}
				elementList.add(localFamilyDetails);
			}
			if (localAdditionalId1Tracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AdditionalId1"));

				if (localAdditionalId1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalId1 cannot be null!!");
				}
				elementList.add(localAdditionalId1);
			}
			if (localAdditionalId2Tracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AdditionalId2"));

				if (localAdditionalId2 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalId2 cannot be null!!");
				}
				elementList.add(localAdditionalId2);
			}
			if (localAddrLine1Tracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"AddrLine1"));

				if (localAddrLine1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"AddrLine1 cannot be null!!");
				}
				elementList.add(localAddrLine1);
			}
			if (localStreetTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Street"));

				if (localStreet == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Street cannot be null!!");
				}
				elementList.add(localStreet);
			}
			if (localLocality1Tracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Locality1"));

				if (localLocality1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Locality1 cannot be null!!");
				}
				elementList.add(localLocality1);
			}
			if (localLocality2Tracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Locality2"));

				if (localLocality2 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Locality2 cannot be null!!");
				}
				elementList.add(localLocality2);
			}
			if (localCityTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"City"));

				if (localCity == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"City cannot be null!!");
				}
				elementList.add(localCity);
			}
			if (localStateTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"State"));

				if (localState == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"State cannot be null!!");
				}
				elementList.add(localState);
			}
			if (localPostalTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Postal"));

				if (localPostal == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Postal cannot be null!!");
				}
				elementList.add(localPostal);
			}
			if (localInquiryAddressesTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"InquiryAddresses"));

				if (localInquiryAddresses == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"InquiryAddresses cannot be null!!");
				}
				elementList.add(localInquiryAddresses);
			}
			if (localInquiryPhonesTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"InquiryPhones"));

				if (localInquiryPhones == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"InquiryPhones cannot be null!!");
				}
				elementList.add(localInquiryPhones);
			}
			elementList.add(new javax.xml.namespace.QName(
					"http://services.equifax.com/eport/ws/schemas/1.0", "DOB"));

			if (localDOB != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localDOB));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"DOB cannot be null!!");
			}
			if (localMaritalStatusTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MaritalStatus"));

				if (localMaritalStatus == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MaritalStatus cannot be null!!");
				}
				elementList.add(localMaritalStatus);
			}
			if (localGenderTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"Gender"));

				if (localGender == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Gender cannot be null!!");
				}
				elementList.add(localGender);
			}
			if (localNationalIdCardTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"NationalIdCard"));

				if (localNationalIdCard == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"NationalIdCard cannot be null!!");
				}
				elementList.add(localNationalIdCard);
			}
			if (localRationCardTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"RationCard"));

				if (localRationCard == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"RationCard cannot be null!!");
				}
				elementList.add(localRationCard);
			}
			if (localPANIdTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PANId"));

				if (localPANId == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"PANId cannot be null!!");
				}
				elementList.add(localPANId);
			}
			if (localPassportIdTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"PassportId"));

				if (localPassportId == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"PassportId cannot be null!!");
				}
				elementList.add(localPassportId);
			}
			if (localVoterIdTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"VoterId"));

				if (localVoterId == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"VoterId cannot be null!!");
				}
				elementList.add(localVoterId);
			}
			if (localHomePhoneTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"HomePhone"));

				if (localHomePhone == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"HomePhone cannot be null!!");
				}
				elementList.add(localHomePhone);
			}
			if (localMobilePhoneTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MobilePhone"));

				if (localMobilePhone == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"MobilePhone cannot be null!!");
				}
				elementList.add(localMobilePhone);
			}
			if (localDriverLicenseTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"DriverLicense"));

				if (localDriverLicense == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"DriverLicense cannot be null!!");
				}
				elementList.add(localDriverLicense);
			}
			if (localRequestAccountDetailsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"RequestAccountDetails"));

				if (localRequestAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"RequestAccountDetails cannot be null!!");
				}
				elementList.add(localRequestAccountDetails);
			}
			if (localInquiryCommonAccountDetailsTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"InquiryCommonAccountDetails"));

				if (localInquiryCommonAccountDetails == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"InquiryCommonAccountDetails cannot be null!!");
				}
				elementList.add(localInquiryCommonAccountDetails);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static RequestBodyType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				RequestBodyType object = new RequestBodyType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"RequestBodyType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (RequestBodyType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InquiryPurpose").equals(reader.getName())) {

						object.setInquiryPurpose(InquiryPurposeOptions.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"TransactionAmount").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "TransactionAmount"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setTransactionAmount(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AdditionalSearchField").equals(reader
									.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "AdditionalSearchField"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setAdditionalSearchField(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"FullName").equals(reader.getName())) {

						object.setFullName(FullName_type1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"FirstName").equals(reader.getName())) {

						object.setFirstName(FirstName_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MiddleName").equals(reader.getName())) {

						object.setMiddleName(MiddleName_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"LastName").equals(reader.getName())) {

						object.setLastName(LastName_type1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"FamilyDetails").equals(reader.getName())) {

						object.setFamilyDetails(FamilyInfo.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AdditionalId1").equals(reader.getName())) {

						object.setAdditionalId1(AdditionalId1_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AdditionalId2").equals(reader.getName())) {

						object.setAdditionalId2(AdditionalId2_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AddrLine1").equals(reader.getName())) {

						object.setAddrLine1(AddrLine1_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Street").equals(reader.getName())) {

						object.setStreet(Street_type1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Locality1").equals(reader.getName())) {

						object.setLocality1(Locality1_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Locality2").equals(reader.getName())) {

						object.setLocality2(Locality2_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"City").equals(reader.getName())) {

						object.setCity(City_type1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"State").equals(reader.getName())) {

						object.setState(StateCodeOptions.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Postal").equals(reader.getName())) {

						object.setPostal(Postal_type1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InquiryAddresses")
									.equals(reader.getName())) {

						object.setInquiryAddresses(InquiryCommonInputAddressType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InquiryPhones").equals(reader.getName())) {

						object.setInquiryPhones(InquiryCommonInputPhoneType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DOB").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "DOB"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setDOB(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDate(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MaritalStatus").equals(reader.getName())) {

						object.setMaritalStatus(MaritalStatusOptions.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"Gender").equals(reader.getName())) {

						object.setGender(GenderOptions.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"NationalIdCard").equals(reader.getName())) {

						object.setNationalIdCard(NationalIdCard_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RationCard").equals(reader.getName())) {

						object.setRationCard(RationCard_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PANId").equals(reader.getName())) {

						object.setPANId(PANId_type0.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"PassportId").equals(reader.getName())) {

						object.setPassportId(PassportId_type0.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"VoterId").equals(reader.getName())) {

						object.setVoterId(VoterId_type1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"HomePhone").equals(reader.getName())) {

						object.setHomePhone(LandlineType.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MobilePhone").equals(reader.getName())) {

						object.setMobilePhone(MobilePhone_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"DriverLicense").equals(reader.getName())) {

						object.setDriverLicense(DriverLicense_type1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"RequestAccountDetails").equals(reader
									.getName())) {

						object.setRequestAccountDetails(AccountInputType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"InquiryCommonAccountDetails")
									.equals(reader.getName())) {

						object.setInquiryCommonAccountDetails(InquiryCommonAccountDetailsType.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MFIAdditionalAddressType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * MFIAdditionalAddressType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AdditionalAddressDetails This was an Array!
		 */

		protected MFIAddlAdrsDetailsType[] localAdditionalAddressDetails;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localAdditionalAddressDetailsTracker = false;

		public boolean isAdditionalAddressDetailsSpecified() {
			return localAdditionalAddressDetailsTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return MFIAddlAdrsDetailsType[]
		 */
		public MFIAddlAdrsDetailsType[] getAdditionalAddressDetails() {
			return localAdditionalAddressDetails;
		}

		/**
		 * validate the array for AdditionalAddressDetails
		 */
		protected void validateAdditionalAddressDetails(
				MFIAddlAdrsDetailsType[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalAddressDetails
		 */
		public void setAdditionalAddressDetails(MFIAddlAdrsDetailsType[] param) {

			validateAdditionalAddressDetails(param);

			localAdditionalAddressDetailsTracker = param != null;

			this.localAdditionalAddressDetails = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            MFIAddlAdrsDetailsType
		 */
		public void addAdditionalAddressDetails(MFIAddlAdrsDetailsType param) {
			if (localAdditionalAddressDetails == null) {
				localAdditionalAddressDetails = new MFIAddlAdrsDetailsType[] {};
			}

			// update the setting tracker
			localAdditionalAddressDetailsTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localAdditionalAddressDetails);
			list.add(param);
			this.localAdditionalAddressDetails = (MFIAddlAdrsDetailsType[]) list
					.toArray(new MFIAddlAdrsDetailsType[list.size()]);

		}

		/**
		 * field for Seq This was an Attribute!
		 */

		protected int localSeq;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getSeq() {
			return localSeq;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Seq
		 */
		public void setSeq(int param) {

			this.localSeq = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":MFIAdditionalAddressType", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "MFIAdditionalAddressType", xmlWriter);
				}

			}

			if (localSeq != java.lang.Integer.MIN_VALUE) {

				writeAttribute("", "seq",
						org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localSeq), xmlWriter);

			}
			if (localAdditionalAddressDetailsTracker) {
				if (localAdditionalAddressDetails != null) {
					for (int i = 0; i < localAdditionalAddressDetails.length; i++) {
						if (localAdditionalAddressDetails[i] != null) {
							localAdditionalAddressDetails[i]
									.serialize(
											new javax.xml.namespace.QName(
													"http://services.equifax.com/eport/ws/schemas/1.0",
													"AdditionalAddressDetails"),
											xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalAddressDetails cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localAdditionalAddressDetailsTracker) {
				if (localAdditionalAddressDetails != null) {
					for (int i = 0; i < localAdditionalAddressDetails.length; i++) {

						if (localAdditionalAddressDetails[i] != null) {
							elementList
									.add(new javax.xml.namespace.QName(
											"http://services.equifax.com/eport/ws/schemas/1.0",
											"AdditionalAddressDetails"));
							elementList.add(localAdditionalAddressDetails[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"AdditionalAddressDetails cannot be null!!");

				}

			}
			attribList.add(new javax.xml.namespace.QName("", "seq"));

			attribList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localSeq));

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static MFIAdditionalAddressType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				MFIAdditionalAddressType object = new MFIAdditionalAddressType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"MFIAdditionalAddressType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (MFIAdditionalAddressType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					// handle attribute "seq"
					java.lang.String tempAttribSeq =

					reader.getAttributeValue(null, "seq");

					if (tempAttribSeq != null) {
						java.lang.String content = tempAttribSeq;

						object.setSeq(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(tempAttribSeq));

					} else {

						object.setSeq(java.lang.Integer.MIN_VALUE);

					}
					handledAttributes.add("seq");

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"AdditionalAddressDetails").equals(reader
									.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(MFIAddlAdrsDetailsType.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName(
										"http://services.equifax.com/eport/ws/schemas/1.0",
										"AdditionalAddressDetails")
										.equals(reader.getName())) {
									list1.add(MFIAddlAdrsDetailsType.Factory
											.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setAdditionalAddressDetails((MFIAddlAdrsDetailsType[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(MFIAddlAdrsDetailsType.class,
										list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AdditionalId2_type0 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AdditionalId2_type0", "ns1");

		/**
		 * field for AdditionalId2_type0
		 */

		protected java.lang.String localAdditionalId2_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAdditionalId2_type0() {
			return localAdditionalId2_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalId2_type0
		 */
		public void setAdditionalId2_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localAdditionalId2_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localAdditionalId2_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AdditionalId2_type0",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AdditionalId2_type0", xmlWriter);
				}
			}

			if (localAdditionalId2_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AdditionalId2_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAdditionalId2_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAdditionalId2_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AdditionalId2_type0 fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				AdditionalId2_type0 returnValue = new AdditionalId2_type0();

				returnValue
						.setAdditionalId2_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static AdditionalId2_type0 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AdditionalId2_type0.Factory.fromString(content,
							namespaceUri);
				} else {
					return AdditionalId2_type0.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AdditionalId2_type0 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AdditionalId2_type0 object = new AdditionalId2_type0();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "AdditionalId2_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setAdditionalId2_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AdditionalId2_type1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AdditionalId2_type1", "ns1");

		/**
		 * field for AdditionalId2_type0
		 */

		protected java.lang.String localAdditionalId2_type0;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getAdditionalId2_type0() {
			return localAdditionalId2_type0;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdditionalId2_type0
		 */
		public void setAdditionalId2_type0(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localAdditionalId2_type0 = param;
			} else {
				throw new java.lang.RuntimeException(
						"Input values do not follow defined XSD restrictions");
			}

		}

		public java.lang.String toString() {

			return localAdditionalId2_type0.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AdditionalId2_type1",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AdditionalId2_type1", xmlWriter);
				}
			}

			if (localAdditionalId2_type0 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AdditionalId2_type0 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAdditionalId2_type0);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAdditionalId2_type0) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AdditionalId2_type1 fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				AdditionalId2_type1 returnValue = new AdditionalId2_type1();

				returnValue
						.setAdditionalId2_type0(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static AdditionalId2_type1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AdditionalId2_type1.Factory.fromString(content,
							namespaceUri);
				} else {
					return AdditionalId2_type1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AdditionalId2_type1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AdditionalId2_type1 object = new AdditionalId2_type1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "AdditionalId2_type0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setAdditionalId2_type0(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class MFIAdditionalIdentityInfoType implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * MFIAdditionalIdentityInfoType Namespace URI =
		 * http://services.equifax.com/eport/ws/schemas/1.0 Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for MFIVoterID
		 */

		protected java.lang.String localMFIVoterID;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIVoterIDTracker = false;

		public boolean isMFIVoterIDSpecified() {
			return localMFIVoterIDTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIVoterID() {
			return localMFIVoterID;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIVoterID
		 */
		public void setMFIVoterID(java.lang.String param) {
			localMFIVoterIDTracker = param != null;

			this.localMFIVoterID = param;

		}

		/**
		 * field for MFIPANCardID
		 */

		protected java.lang.String localMFIPANCardID;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIPANCardIDTracker = false;

		public boolean isMFIPANCardIDSpecified() {
			return localMFIPANCardIDTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIPANCardID() {
			return localMFIPANCardID;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIPANCardID
		 */
		public void setMFIPANCardID(java.lang.String param) {
			localMFIPANCardIDTracker = param != null;

			this.localMFIPANCardID = param;

		}

		/**
		 * field for MFIRationCard
		 */

		protected java.lang.String localMFIRationCard;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIRationCardTracker = false;

		public boolean isMFIRationCardSpecified() {
			return localMFIRationCardTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIRationCard() {
			return localMFIRationCard;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIRationCard
		 */
		public void setMFIRationCard(java.lang.String param) {
			localMFIRationCardTracker = param != null;

			this.localMFIRationCard = param;

		}

		/**
		 * field for MFIUID
		 */

		protected java.lang.String localMFIUID;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIUIDTracker = false;

		public boolean isMFIUIDSpecified() {
			return localMFIUIDTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIUID() {
			return localMFIUID;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIUID
		 */
		public void setMFIUID(java.lang.String param) {
			localMFIUIDTracker = param != null;

			this.localMFIUID = param;

		}

		/**
		 * field for MFIOtherID
		 */

		protected java.lang.String localMFIOtherID;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMFIOtherIDTracker = false;

		public boolean isMFIOtherIDSpecified() {
			return localMFIOtherIDTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getMFIOtherID() {
			return localMFIOtherID;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            MFIOtherID
		 */
		public void setMFIOtherID(java.lang.String param) {
			localMFIOtherIDTracker = param != null;

			this.localMFIOtherID = param;

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":MFIAdditionalIdentityInfoType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "MFIAdditionalIdentityInfoType", xmlWriter);
				}

			}
			if (localMFIVoterIDTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIVoterID", xmlWriter);

				if (localMFIVoterID == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIVoterID cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIVoterID);

				}

				xmlWriter.writeEndElement();
			}
			if (localMFIPANCardIDTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIPANCardID", xmlWriter);

				if (localMFIPANCardID == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIPANCardID cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIPANCardID);

				}

				xmlWriter.writeEndElement();
			}
			if (localMFIRationCardTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIRationCard", xmlWriter);

				if (localMFIRationCard == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIRationCard cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIRationCard);

				}

				xmlWriter.writeEndElement();
			}
			if (localMFIUIDTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIUID", xmlWriter);

				if (localMFIUID == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIUID cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIUID);

				}

				xmlWriter.writeEndElement();
			}
			if (localMFIOtherIDTracker) {
				namespace = "http://services.equifax.com/eport/ws/schemas/1.0";
				writeStartElement(null, namespace, "MFIOtherID", xmlWriter);

				if (localMFIOtherID == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"MFIOtherID cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localMFIOtherID);

				}

				xmlWriter.writeEndElement();
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localMFIVoterIDTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIVoterID"));

				if (localMFIVoterID != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIVoterID));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIVoterID cannot be null!!");
				}
			}
			if (localMFIPANCardIDTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIPANCardID"));

				if (localMFIPANCardID != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIPANCardID));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIPANCardID cannot be null!!");
				}
			}
			if (localMFIRationCardTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIRationCard"));

				if (localMFIRationCard != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIRationCard));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIRationCard cannot be null!!");
				}
			}
			if (localMFIUIDTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIUID"));

				if (localMFIUID != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIUID));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIUID cannot be null!!");
				}
			}
			if (localMFIOtherIDTracker) {
				elementList.add(new javax.xml.namespace.QName(
						"http://services.equifax.com/eport/ws/schemas/1.0",
						"MFIOtherID"));

				if (localMFIOtherID != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localMFIOtherID));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"MFIOtherID cannot be null!!");
				}
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static MFIAdditionalIdentityInfoType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				MFIAdditionalIdentityInfoType object = new MFIAdditionalIdentityInfoType();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"MFIAdditionalIdentityInfoType".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (MFIAdditionalIdentityInfoType) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIVoterID").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIVoterID"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIVoterID(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIPANCardID").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIPANCardID"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIPANCardID(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIRationCard").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIRationCard"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIRationCard(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIUID").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIUID"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIUID(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName(
									"http://services.equifax.com/eport/ws/schemas/1.0",
									"MFIOtherID").equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "MFIOtherID"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setMFIOtherID(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class AdditionalNameValType implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"http://services.equifax.com/eport/ws/schemas/1.0",
				"AdditionalNameValType", "ns1");

		/**
		 * field for AdditionalNameValType
		 */

		protected java.lang.String localAdditionalNameValType;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected AdditionalNameValType(java.lang.String value,
				boolean isRegisterValue) {
			localAdditionalNameValType = value;
			if (isRegisterValue) {

				_table_.put(localAdditionalNameValType, this);

			}

		}

		public static final java.lang.String _value1 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("");

		public static final java.lang.String _value2 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("F");

		public static final java.lang.String _value3 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("H");

		public static final java.lang.String _value4 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("M");

		public static final java.lang.String _value5 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("W");

		public static final java.lang.String _value6 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("S");

		public static final java.lang.String _value7 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("D");

		public static final java.lang.String _value8 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("B");

		public static final java.lang.String _value9 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("C");

		public static final java.lang.String _value10 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("O");

		public static final java.lang.String _value11 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Z");

		public static final java.lang.String _value12 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Y");

		public static final java.lang.String _value13 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("V");

		public static final java.lang.String _value14 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("X");

		public static final java.lang.String _value15 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("U");

		public static final java.lang.String _value16 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("T");

		public static final java.lang.String _value17 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K01");

		public static final java.lang.String _value18 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K02");

		public static final java.lang.String _value19 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K03");

		public static final java.lang.String _value20 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K06");

		public static final java.lang.String _value21 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K07");

		public static final java.lang.String _value22 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K14");

		public static final java.lang.String _value23 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K04");

		public static final java.lang.String _value24 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K05");

		public static final java.lang.String _value25 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K12");

		public static final java.lang.String _value26 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K10");

		public static final java.lang.String _value27 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K09");

		public static final java.lang.String _value28 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K08");

		public static final java.lang.String _value29 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K13");

		public static final java.lang.String _value30 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K11");

		public static final java.lang.String _value31 = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("K15");

		public static final AdditionalNameValType value1 = new AdditionalNameValType(
				_value1, true);

		public static final AdditionalNameValType value2 = new AdditionalNameValType(
				_value2, true);

		public static final AdditionalNameValType value3 = new AdditionalNameValType(
				_value3, true);

		public static final AdditionalNameValType value4 = new AdditionalNameValType(
				_value4, true);

		public static final AdditionalNameValType value5 = new AdditionalNameValType(
				_value5, true);

		public static final AdditionalNameValType value6 = new AdditionalNameValType(
				_value6, true);

		public static final AdditionalNameValType value7 = new AdditionalNameValType(
				_value7, true);

		public static final AdditionalNameValType value8 = new AdditionalNameValType(
				_value8, true);

		public static final AdditionalNameValType value9 = new AdditionalNameValType(
				_value9, true);

		public static final AdditionalNameValType value10 = new AdditionalNameValType(
				_value10, true);

		public static final AdditionalNameValType value11 = new AdditionalNameValType(
				_value11, true);

		public static final AdditionalNameValType value12 = new AdditionalNameValType(
				_value12, true);

		public static final AdditionalNameValType value13 = new AdditionalNameValType(
				_value13, true);

		public static final AdditionalNameValType value14 = new AdditionalNameValType(
				_value14, true);

		public static final AdditionalNameValType value15 = new AdditionalNameValType(
				_value15, true);

		public static final AdditionalNameValType value16 = new AdditionalNameValType(
				_value16, true);

		public static final AdditionalNameValType value17 = new AdditionalNameValType(
				_value17, true);

		public static final AdditionalNameValType value18 = new AdditionalNameValType(
				_value18, true);

		public static final AdditionalNameValType value19 = new AdditionalNameValType(
				_value19, true);

		public static final AdditionalNameValType value20 = new AdditionalNameValType(
				_value20, true);

		public static final AdditionalNameValType value21 = new AdditionalNameValType(
				_value21, true);

		public static final AdditionalNameValType value22 = new AdditionalNameValType(
				_value22, true);

		public static final AdditionalNameValType value23 = new AdditionalNameValType(
				_value23, true);

		public static final AdditionalNameValType value24 = new AdditionalNameValType(
				_value24, true);

		public static final AdditionalNameValType value25 = new AdditionalNameValType(
				_value25, true);

		public static final AdditionalNameValType value26 = new AdditionalNameValType(
				_value26, true);

		public static final AdditionalNameValType value27 = new AdditionalNameValType(
				_value27, true);

		public static final AdditionalNameValType value28 = new AdditionalNameValType(
				_value28, true);

		public static final AdditionalNameValType value29 = new AdditionalNameValType(
				_value29, true);

		public static final AdditionalNameValType value30 = new AdditionalNameValType(
				_value30, true);

		public static final AdditionalNameValType value31 = new AdditionalNameValType(
				_value31, true);

		public java.lang.String getValue() {
			return localAdditionalNameValType;
		}

		public boolean equals(java.lang.Object obj) {
			return (obj == this);
		}

		public int hashCode() {
			return toString().hashCode();
		}

		public java.lang.String toString() {

			return localAdditionalNameValType.toString();

		}

		/**
		 *
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"http://services.equifax.com/eport/ws/schemas/1.0");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":AdditionalNameValType",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "AdditionalNameValType", xmlWriter);
				}
			}

			if (localAdditionalNameValType == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"AdditionalNameValType cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localAdditionalNameValType);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("http://services.equifax.com/eport/ws/schemas/1.0")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 *
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localAdditionalNameValType) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static AdditionalNameValType fromValue(java.lang.String value)
					throws java.lang.IllegalArgumentException {
				AdditionalNameValType enumeration = (AdditionalNameValType)

				_table_.get(value);

				if ((enumeration == null)
						&& !((value == null) || (value.equals("")))) {
					throw new java.lang.IllegalArgumentException();
				}
				return enumeration;
			}

			public static AdditionalNameValType fromString(
					java.lang.String value, java.lang.String namespaceURI)
					throws java.lang.IllegalArgumentException {
				try {

					return fromValue(org.apache.axis2.databinding.utils.ConverterUtil
							.convertToString(value));

				} catch (java.lang.Exception e) {
					throw new java.lang.IllegalArgumentException();
				}
			}

			public static AdditionalNameValType fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return AdditionalNameValType.Factory.fromString(content,
							namespaceUri);
				} else {
					return AdditionalNameValType.Factory
							.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static AdditionalNameValType parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				AdditionalNameValType object = null;
				// initialize a hash map to keep values
				java.util.Map attributeMap = new java.util.HashMap();
				java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							nillableValue = reader
									.getAttributeValue(
											"http://www.w3.org/2001/XMLSchema-instance",
											"nil");
							if ("true".equals(nillableValue)
									|| "1".equals(nillableValue)) {
								throw new org.apache.axis2.databinding.ADBException(
										"The element: "
												+ "AdditionalNameValType"
												+ "  cannot be null");
							}

							java.lang.String content = reader.getElementText();

							if (content.indexOf(":") > 0) {
								// this seems to be a Qname so find the
								// namespace and send
								prefix = content.substring(0,
										content.indexOf(":"));
								namespaceuri = reader.getNamespaceURI(prefix);
								object = AdditionalNameValType.Factory
										.fromString(content, namespaceuri);
							} else {
								// this seems to be not a qname send and empty
								// namespace incase of it is
								// check is done in fromString method
								object = AdditionalNameValType.Factory
										.fromString(content, "");
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	private org.apache.axiom.om.OMElement toOM(
			com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryRequest param,
			boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param
					.getOMElement(
							com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryRequest.MY_QNAME,
							org.apache.axiom.om.OMAbstractFactory
									.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(
			com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryResponse param,
			boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param
					.getOMElement(
							com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryResponse.MY_QNAME,
							org.apache.axiom.om.OMAbstractFactory
									.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
			org.apache.axiom.soap.SOAPFactory factory,
			com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryRequest param,
			boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
					.getDefaultEnvelope();
			emptyEnvelope
					.getBody()
					.addChild(
							param.getOMElement(
									com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryRequest.MY_QNAME,
									factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	/**
	 * get the default envelope
	 */
	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
			org.apache.axiom.soap.SOAPFactory factory) {
		return factory.getDefaultEnvelope();
	}

	private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
			java.lang.Class type, java.util.Map extraNamespaces)
			throws org.apache.axis2.AxisFault {

		try {

			if (com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryRequest.class
					.equals(type)) {

				return com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryRequest.Factory
						.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryResponse.class
					.equals(type)) {

				return com.equifax.services.eport.servicedefs._1_0.V10Stub.InquiryResponse.Factory
						.parse(param.getXMLStreamReaderWithoutCaching());

			}

		} catch (java.lang.Exception e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
		return null;
	}

}
